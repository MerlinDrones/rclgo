// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_srv

import (
	"unsafe"

	px4_msgs_msg "github.com/merlindrones/rclgo/internal/msgs/px4_msgs/msg"
	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/srv/vehicle_command.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleCommand_Request", VehicleCommand_RequestTypeSupport)
	typemap.RegisterMessage("px4_msgs/srv/VehicleCommand_Request", VehicleCommand_RequestTypeSupport)
}

type VehicleCommand_Request struct {
	Request px4_msgs_msg.VehicleCommand `yaml:"request"`
}

// NewVehicleCommand_Request creates a new VehicleCommand_Request with default values.
func NewVehicleCommand_Request() *VehicleCommand_Request {
	self := VehicleCommand_Request{}
	self.SetDefaults()
	return &self
}

func (t *VehicleCommand_Request) Clone() *VehicleCommand_Request {
	c := &VehicleCommand_Request{}
	c.Request = *t.Request.Clone()
	return c
}

func (t *VehicleCommand_Request) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleCommand_Request) SetDefaults() {
	t.Request.SetDefaults()
}

func (t *VehicleCommand_Request) GetTypeSupport() types.MessageTypeSupport {
	return VehicleCommand_RequestTypeSupport
}

// VehicleCommand_RequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleCommand_RequestPublisher struct {
	*rclgo.Publisher
}

// NewVehicleCommand_RequestPublisher creates and returns a new publisher for the
// VehicleCommand_Request
func NewVehicleCommand_RequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleCommand_RequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleCommand_RequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleCommand_RequestPublisher{pub}, nil
}

func (p *VehicleCommand_RequestPublisher) Publish(msg *VehicleCommand_Request) error {
	return p.Publisher.Publish(msg)
}

// VehicleCommand_RequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleCommand_RequestSubscription struct {
	*rclgo.Subscription
}

// VehicleCommand_RequestSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleCommand_RequestSubscription.
type VehicleCommand_RequestSubscriptionCallback func(msg *VehicleCommand_Request, info *rclgo.MessageInfo, err error)

// NewVehicleCommand_RequestSubscription creates and returns a new subscription for the
// VehicleCommand_Request
func NewVehicleCommand_RequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleCommand_RequestSubscriptionCallback) (*VehicleCommand_RequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleCommand_Request
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleCommand_RequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleCommand_RequestSubscription{sub}, nil
}

func (s *VehicleCommand_RequestSubscription) TakeMessage(out *VehicleCommand_Request) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleCommand_RequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleCommand_RequestSlice(dst, src []VehicleCommand_Request) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleCommand_RequestTypeSupport types.MessageTypeSupport = _VehicleCommand_RequestTypeSupport{}

type _VehicleCommand_RequestTypeSupport struct{}

func (t _VehicleCommand_RequestTypeSupport) New() types.Message {
	return NewVehicleCommand_Request()
}

func (t _VehicleCommand_RequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__srv__VehicleCommand_Request
	return (unsafe.Pointer)(C.px4_msgs__srv__VehicleCommand_Request__create())
}

func (t _VehicleCommand_RequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__srv__VehicleCommand_Request__destroy((*C.px4_msgs__srv__VehicleCommand_Request)(pointer_to_free))
}

func (t _VehicleCommand_RequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleCommand_Request)
	mem := (*C.px4_msgs__srv__VehicleCommand_Request)(dst)
	px4_msgs_msg.VehicleCommandTypeSupport.AsCStruct(unsafe.Pointer(&mem.request), &m.Request)
}

func (t _VehicleCommand_RequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleCommand_Request)
	mem := (*C.px4_msgs__srv__VehicleCommand_Request)(ros2_message_buffer)
	px4_msgs_msg.VehicleCommandTypeSupport.AsGoStruct(&m.Request, unsafe.Pointer(&mem.request))
}

func (t _VehicleCommand_RequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__srv__VehicleCommand_Request())
}

type CVehicleCommand_Request = C.px4_msgs__srv__VehicleCommand_Request
type CVehicleCommand_Request__Sequence = C.px4_msgs__srv__VehicleCommand_Request__Sequence

func VehicleCommand_Request__Sequence_to_Go(goSlice *[]VehicleCommand_Request, cSlice CVehicleCommand_Request__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleCommand_Request, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleCommand_RequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleCommand_Request__Sequence_to_C(cSlice *CVehicleCommand_Request__Sequence, goSlice []VehicleCommand_Request) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__srv__VehicleCommand_Request)(C.malloc(C.sizeof_struct_px4_msgs__srv__VehicleCommand_Request * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleCommand_RequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleCommand_Request__Array_to_Go(goSlice []VehicleCommand_Request, cSlice []CVehicleCommand_Request) {
	for i := 0; i < len(cSlice); i++ {
		VehicleCommand_RequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleCommand_Request__Array_to_C(cSlice []CVehicleCommand_Request, goSlice []VehicleCommand_Request) {
	for i := 0; i < len(goSlice); i++ {
		VehicleCommand_RequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
