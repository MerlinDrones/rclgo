// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <px4_msgs/srv/vehicle_command.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("px4_msgs/VehicleCommand", VehicleCommandTypeSupport)
	typemap.RegisterService("px4_msgs/srv/VehicleCommand", VehicleCommandTypeSupport)
}

type _VehicleCommandTypeSupport struct{}

func (s _VehicleCommandTypeSupport) Request() types.MessageTypeSupport {
	return VehicleCommand_RequestTypeSupport
}

func (s _VehicleCommandTypeSupport) Response() types.MessageTypeSupport {
	return VehicleCommand_ResponseTypeSupport
}

func (s _VehicleCommandTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__px4_msgs__srv__VehicleCommand())
}

// Modifying this variable is undefined behavior.
var VehicleCommandTypeSupport types.ServiceTypeSupport = _VehicleCommandTypeSupport{}

// VehicleCommandClient wraps rclgo.Client to provide type safe helper
// functions
type VehicleCommandClient struct {
	*rclgo.Client
}

// NewVehicleCommandClient creates and returns a new client for the
// VehicleCommand
func NewVehicleCommandClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*VehicleCommandClient, error) {
	client, err := node.NewClient(serviceName, VehicleCommandTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleCommandClient{client}, nil
}

func (s *VehicleCommandClient) Send(ctx context.Context, req *VehicleCommand_Request) (*VehicleCommand_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*VehicleCommand_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type VehicleCommandServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s VehicleCommandServiceResponseSender) SendResponse(resp *VehicleCommand_Response) error {
	return s.sender.SendResponse(resp)
}

type VehicleCommandServiceRequestHandler func(*rclgo.ServiceInfo, *VehicleCommand_Request, VehicleCommandServiceResponseSender)

// VehicleCommandService wraps rclgo.Service to provide type safe helper
// functions
type VehicleCommandService struct {
	*rclgo.Service
}

// NewVehicleCommandService creates and returns a new service for the
// VehicleCommand
func NewVehicleCommandService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler VehicleCommandServiceRequestHandler) (*VehicleCommandService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*VehicleCommand_Request)
		responseSender := VehicleCommandServiceResponseSender{sender: rs}
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, VehicleCommandTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &VehicleCommandService{service}, nil
}
