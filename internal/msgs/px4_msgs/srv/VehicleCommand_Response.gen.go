// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_srv

import (
	"unsafe"

	px4_msgs_msg "github.com/merlindrones/rclgo/internal/msgs/px4_msgs/msg"
	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/srv/vehicle_command.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleCommand_Response", VehicleCommand_ResponseTypeSupport)
	typemap.RegisterMessage("px4_msgs/srv/VehicleCommand_Response", VehicleCommand_ResponseTypeSupport)
}

type VehicleCommand_Response struct {
	Reply px4_msgs_msg.VehicleCommandAck `yaml:"reply"`
}

// NewVehicleCommand_Response creates a new VehicleCommand_Response with default values.
func NewVehicleCommand_Response() *VehicleCommand_Response {
	self := VehicleCommand_Response{}
	self.SetDefaults()
	return &self
}

func (t *VehicleCommand_Response) Clone() *VehicleCommand_Response {
	c := &VehicleCommand_Response{}
	c.Reply = *t.Reply.Clone()
	return c
}

func (t *VehicleCommand_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleCommand_Response) SetDefaults() {
	t.Reply.SetDefaults()
}

func (t *VehicleCommand_Response) GetTypeSupport() types.MessageTypeSupport {
	return VehicleCommand_ResponseTypeSupport
}

// VehicleCommand_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleCommand_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewVehicleCommand_ResponsePublisher creates and returns a new publisher for the
// VehicleCommand_Response
func NewVehicleCommand_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleCommand_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleCommand_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleCommand_ResponsePublisher{pub}, nil
}

func (p *VehicleCommand_ResponsePublisher) Publish(msg *VehicleCommand_Response) error {
	return p.Publisher.Publish(msg)
}

// VehicleCommand_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleCommand_ResponseSubscription struct {
	*rclgo.Subscription
}

// VehicleCommand_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleCommand_ResponseSubscription.
type VehicleCommand_ResponseSubscriptionCallback func(msg *VehicleCommand_Response, info *rclgo.MessageInfo, err error)

// NewVehicleCommand_ResponseSubscription creates and returns a new subscription for the
// VehicleCommand_Response
func NewVehicleCommand_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleCommand_ResponseSubscriptionCallback) (*VehicleCommand_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleCommand_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleCommand_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleCommand_ResponseSubscription{sub}, nil
}

func (s *VehicleCommand_ResponseSubscription) TakeMessage(out *VehicleCommand_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleCommand_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleCommand_ResponseSlice(dst, src []VehicleCommand_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleCommand_ResponseTypeSupport types.MessageTypeSupport = _VehicleCommand_ResponseTypeSupport{}

type _VehicleCommand_ResponseTypeSupport struct{}

func (t _VehicleCommand_ResponseTypeSupport) New() types.Message {
	return NewVehicleCommand_Response()
}

func (t _VehicleCommand_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__srv__VehicleCommand_Response
	return (unsafe.Pointer)(C.px4_msgs__srv__VehicleCommand_Response__create())
}

func (t _VehicleCommand_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__srv__VehicleCommand_Response__destroy((*C.px4_msgs__srv__VehicleCommand_Response)(pointer_to_free))
}

func (t _VehicleCommand_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleCommand_Response)
	mem := (*C.px4_msgs__srv__VehicleCommand_Response)(dst)
	px4_msgs_msg.VehicleCommandAckTypeSupport.AsCStruct(unsafe.Pointer(&mem.reply), &m.Reply)
}

func (t _VehicleCommand_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleCommand_Response)
	mem := (*C.px4_msgs__srv__VehicleCommand_Response)(ros2_message_buffer)
	px4_msgs_msg.VehicleCommandAckTypeSupport.AsGoStruct(&m.Reply, unsafe.Pointer(&mem.reply))
}

func (t _VehicleCommand_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__srv__VehicleCommand_Response())
}

type CVehicleCommand_Response = C.px4_msgs__srv__VehicleCommand_Response
type CVehicleCommand_Response__Sequence = C.px4_msgs__srv__VehicleCommand_Response__Sequence

func VehicleCommand_Response__Sequence_to_Go(goSlice *[]VehicleCommand_Response, cSlice CVehicleCommand_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleCommand_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleCommand_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleCommand_Response__Sequence_to_C(cSlice *CVehicleCommand_Response__Sequence, goSlice []VehicleCommand_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__srv__VehicleCommand_Response)(C.malloc(C.sizeof_struct_px4_msgs__srv__VehicleCommand_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleCommand_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleCommand_Response__Array_to_Go(goSlice []VehicleCommand_Response, cSlice []CVehicleCommand_Response) {
	for i := 0; i < len(cSlice); i++ {
		VehicleCommand_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleCommand_Response__Array_to_C(cSlice []CVehicleCommand_Response, goSlice []VehicleCommand_Response) {
	for i := 0; i < len(goSlice); i++ {
		VehicleCommand_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
