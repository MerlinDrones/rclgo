// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/follow_target.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/FollowTarget", FollowTargetTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/FollowTarget", FollowTargetTypeSupport)
}

type FollowTarget struct {
	Timestamp uint64  `yaml:"timestamp"` // time since system start (microseconds)
	Lat       float64 `yaml:"lat"`       // target position (deg * 1e7)
	Lon       float64 `yaml:"lon"`       // target position (deg * 1e7)
	Alt       float32 `yaml:"alt"`       // target position
	Vy        float32 `yaml:"vy"`        // target vel in y
	Vx        float32 `yaml:"vx"`        // target vel in x
	Vz        float32 `yaml:"vz"`        // target vel in z
	EstCap    uint8   `yaml:"est_cap"`   // target reporting capabilities
}

// NewFollowTarget creates a new FollowTarget with default values.
func NewFollowTarget() *FollowTarget {
	self := FollowTarget{}
	self.SetDefaults()
	return &self
}

func (t *FollowTarget) Clone() *FollowTarget {
	c := &FollowTarget{}
	c.Timestamp = t.Timestamp
	c.Lat = t.Lat
	c.Lon = t.Lon
	c.Alt = t.Alt
	c.Vy = t.Vy
	c.Vx = t.Vx
	c.Vz = t.Vz
	c.EstCap = t.EstCap
	return c
}

func (t *FollowTarget) CloneMsg() types.Message {
	return t.Clone()
}

func (t *FollowTarget) SetDefaults() {
	t.Timestamp = 0
	t.Lat = 0
	t.Lon = 0
	t.Alt = 0
	t.Vy = 0
	t.Vx = 0
	t.Vz = 0
	t.EstCap = 0
}

func (t *FollowTarget) GetTypeSupport() types.MessageTypeSupport {
	return FollowTargetTypeSupport
}

// FollowTargetPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FollowTargetPublisher struct {
	*rclgo.Publisher
}

// NewFollowTargetPublisher creates and returns a new publisher for the
// FollowTarget
func NewFollowTargetPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FollowTargetPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FollowTargetTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowTargetPublisher{pub}, nil
}

func (p *FollowTargetPublisher) Publish(msg *FollowTarget) error {
	return p.Publisher.Publish(msg)
}

// FollowTargetSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FollowTargetSubscription struct {
	*rclgo.Subscription
}

// FollowTargetSubscriptionCallback type is used to provide a subscription
// handler function for a FollowTargetSubscription.
type FollowTargetSubscriptionCallback func(msg *FollowTarget, info *rclgo.MessageInfo, err error)

// NewFollowTargetSubscription creates and returns a new subscription for the
// FollowTarget
func NewFollowTargetSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FollowTargetSubscriptionCallback) (*FollowTargetSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg FollowTarget
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FollowTargetTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowTargetSubscription{sub}, nil
}

func (s *FollowTargetSubscription) TakeMessage(out *FollowTarget) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowTargetSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowTargetSlice(dst, src []FollowTarget) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowTargetTypeSupport types.MessageTypeSupport = _FollowTargetTypeSupport{}

type _FollowTargetTypeSupport struct{}

func (t _FollowTargetTypeSupport) New() types.Message {
	return NewFollowTarget()
}

func (t _FollowTargetTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__FollowTarget
	return (unsafe.Pointer)(C.px4_msgs__msg__FollowTarget__create())
}

func (t _FollowTargetTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__FollowTarget__destroy((*C.px4_msgs__msg__FollowTarget)(pointer_to_free))
}

func (t _FollowTargetTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*FollowTarget)
	mem := (*C.px4_msgs__msg__FollowTarget)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.lat = C.double(m.Lat)
	mem.lon = C.double(m.Lon)
	mem.alt = C.float(m.Alt)
	mem.vy = C.float(m.Vy)
	mem.vx = C.float(m.Vx)
	mem.vz = C.float(m.Vz)
	mem.est_cap = C.uint8_t(m.EstCap)
}

func (t _FollowTargetTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowTarget)
	mem := (*C.px4_msgs__msg__FollowTarget)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Lat = float64(mem.lat)
	m.Lon = float64(mem.lon)
	m.Alt = float32(mem.alt)
	m.Vy = float32(mem.vy)
	m.Vx = float32(mem.vx)
	m.Vz = float32(mem.vz)
	m.EstCap = uint8(mem.est_cap)
}

func (t _FollowTargetTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__FollowTarget())
}

type CFollowTarget = C.px4_msgs__msg__FollowTarget
type CFollowTarget__Sequence = C.px4_msgs__msg__FollowTarget__Sequence

func FollowTarget__Sequence_to_Go(goSlice *[]FollowTarget, cSlice CFollowTarget__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowTarget, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowTargetTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func FollowTarget__Sequence_to_C(cSlice *CFollowTarget__Sequence, goSlice []FollowTarget) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__FollowTarget)(C.malloc(C.sizeof_struct_px4_msgs__msg__FollowTarget * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowTargetTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func FollowTarget__Array_to_Go(goSlice []FollowTarget, cSlice []CFollowTarget) {
	for i := 0; i < len(cSlice); i++ {
		FollowTargetTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func FollowTarget__Array_to_C(cSlice []CFollowTarget, goSlice []FollowTarget) {
	for i := 0; i < len(goSlice); i++ {
		FollowTargetTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
