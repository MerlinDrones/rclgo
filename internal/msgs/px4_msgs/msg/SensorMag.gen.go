// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_mag.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorMag", SensorMagTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SensorMag", SensorMagTypeSupport)
}

const (
	SensorMag_ORB_QUEUE_LENGTH uint8 = 4
)

type SensorMag struct {
	Timestamp       uint64  `yaml:"timestamp"` // time since system start (microseconds)
	TimestampSample uint64  `yaml:"timestamp_sample"`
	DeviceId        uint32  `yaml:"device_id"`   // unique device ID for the sensor that does not change between power cycles
	X               float32 `yaml:"x"`           // magnetic field in the FRD board frame X-axis in Gauss
	Y               float32 `yaml:"y"`           // magnetic field in the FRD board frame Y-axis in Gauss
	Z               float32 `yaml:"z"`           // magnetic field in the FRD board frame Z-axis in Gauss
	Temperature     float32 `yaml:"temperature"` // temperature in degrees Celsius
	ErrorCount      uint32  `yaml:"error_count"`
}

// NewSensorMag creates a new SensorMag with default values.
func NewSensorMag() *SensorMag {
	self := SensorMag{}
	self.SetDefaults()
	return &self
}

func (t *SensorMag) Clone() *SensorMag {
	c := &SensorMag{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.DeviceId = t.DeviceId
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	c.Temperature = t.Temperature
	c.ErrorCount = t.ErrorCount
	return c
}

func (t *SensorMag) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorMag) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.DeviceId = 0
	t.X = 0
	t.Y = 0
	t.Z = 0
	t.Temperature = 0
	t.ErrorCount = 0
}

func (t *SensorMag) GetTypeSupport() types.MessageTypeSupport {
	return SensorMagTypeSupport
}

// SensorMagPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorMagPublisher struct {
	*rclgo.Publisher
}

// NewSensorMagPublisher creates and returns a new publisher for the
// SensorMag
func NewSensorMagPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorMagPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorMagTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorMagPublisher{pub}, nil
}

func (p *SensorMagPublisher) Publish(msg *SensorMag) error {
	return p.Publisher.Publish(msg)
}

// SensorMagSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorMagSubscription struct {
	*rclgo.Subscription
}

// SensorMagSubscriptionCallback type is used to provide a subscription
// handler function for a SensorMagSubscription.
type SensorMagSubscriptionCallback func(msg *SensorMag, info *rclgo.MessageInfo, err error)

// NewSensorMagSubscription creates and returns a new subscription for the
// SensorMag
func NewSensorMagSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorMagSubscriptionCallback) (*SensorMagSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorMag
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorMagTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorMagSubscription{sub}, nil
}

func (s *SensorMagSubscription) TakeMessage(out *SensorMag) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorMagSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorMagSlice(dst, src []SensorMag) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorMagTypeSupport types.MessageTypeSupport = _SensorMagTypeSupport{}

type _SensorMagTypeSupport struct{}

func (t _SensorMagTypeSupport) New() types.Message {
	return NewSensorMag()
}

func (t _SensorMagTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorMag
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorMag__create())
}

func (t _SensorMagTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorMag__destroy((*C.px4_msgs__msg__SensorMag)(pointer_to_free))
}

func (t _SensorMagTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorMag)
	mem := (*C.px4_msgs__msg__SensorMag)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.x = C.float(m.X)
	mem.y = C.float(m.Y)
	mem.z = C.float(m.Z)
	mem.temperature = C.float(m.Temperature)
	mem.error_count = C.uint32_t(m.ErrorCount)
}

func (t _SensorMagTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorMag)
	mem := (*C.px4_msgs__msg__SensorMag)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.DeviceId = uint32(mem.device_id)
	m.X = float32(mem.x)
	m.Y = float32(mem.y)
	m.Z = float32(mem.z)
	m.Temperature = float32(mem.temperature)
	m.ErrorCount = uint32(mem.error_count)
}

func (t _SensorMagTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorMag())
}

type CSensorMag = C.px4_msgs__msg__SensorMag
type CSensorMag__Sequence = C.px4_msgs__msg__SensorMag__Sequence

func SensorMag__Sequence_to_Go(goSlice *[]SensorMag, cSlice CSensorMag__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorMag, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorMagTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorMag__Sequence_to_C(cSlice *CSensorMag__Sequence, goSlice []SensorMag) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorMag)(C.malloc(C.sizeof_struct_px4_msgs__msg__SensorMag * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorMagTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorMag__Array_to_Go(goSlice []SensorMag, cSlice []CSensorMag) {
	for i := 0; i < len(cSlice); i++ {
		SensorMagTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorMag__Array_to_C(cSlice []CSensorMag, goSlice []SensorMag) {
	for i := 0; i < len(goSlice); i++ {
		SensorMagTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
