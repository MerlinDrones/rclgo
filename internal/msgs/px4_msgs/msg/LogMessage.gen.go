// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/log_message.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/LogMessage", LogMessageTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/LogMessage", LogMessageTypeSupport)
}

const (
	LogMessage_ORB_QUEUE_LENGTH uint8 = 4
)

type LogMessage struct {
	Timestamp uint64    `yaml:"timestamp"` // time since system start (microseconds)
	Severity  uint8     `yaml:"severity"`  // log level (same as in the linux kernel, starting with 0)
	Text      [127]byte `yaml:"text"`
}

// NewLogMessage creates a new LogMessage with default values.
func NewLogMessage() *LogMessage {
	self := LogMessage{}
	self.SetDefaults()
	return &self
}

func (t *LogMessage) Clone() *LogMessage {
	c := &LogMessage{}
	c.Timestamp = t.Timestamp
	c.Severity = t.Severity
	c.Text = t.Text
	return c
}

func (t *LogMessage) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LogMessage) SetDefaults() {
	t.Timestamp = 0
	t.Severity = 0
	t.Text = [127]byte{}
}

func (t *LogMessage) GetTypeSupport() types.MessageTypeSupport {
	return LogMessageTypeSupport
}

// LogMessagePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LogMessagePublisher struct {
	*rclgo.Publisher
}

// NewLogMessagePublisher creates and returns a new publisher for the
// LogMessage
func NewLogMessagePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LogMessagePublisher, error) {
	pub, err := node.NewPublisher(topic_name, LogMessageTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LogMessagePublisher{pub}, nil
}

func (p *LogMessagePublisher) Publish(msg *LogMessage) error {
	return p.Publisher.Publish(msg)
}

// LogMessageSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LogMessageSubscription struct {
	*rclgo.Subscription
}

// LogMessageSubscriptionCallback type is used to provide a subscription
// handler function for a LogMessageSubscription.
type LogMessageSubscriptionCallback func(msg *LogMessage, info *rclgo.MessageInfo, err error)

// NewLogMessageSubscription creates and returns a new subscription for the
// LogMessage
func NewLogMessageSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LogMessageSubscriptionCallback) (*LogMessageSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LogMessage
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LogMessageTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LogMessageSubscription{sub}, nil
}

func (s *LogMessageSubscription) TakeMessage(out *LogMessage) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLogMessageSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLogMessageSlice(dst, src []LogMessage) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LogMessageTypeSupport types.MessageTypeSupport = _LogMessageTypeSupport{}

type _LogMessageTypeSupport struct{}

func (t _LogMessageTypeSupport) New() types.Message {
	return NewLogMessage()
}

func (t _LogMessageTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__LogMessage
	return (unsafe.Pointer)(C.px4_msgs__msg__LogMessage__create())
}

func (t _LogMessageTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__LogMessage__destroy((*C.px4_msgs__msg__LogMessage)(pointer_to_free))
}

func (t _LogMessageTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LogMessage)
	mem := (*C.px4_msgs__msg__LogMessage)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.severity = C.uint8_t(m.Severity)
	cSlice_text := mem.text[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_text)), m.Text[:])
}

func (t _LogMessageTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LogMessage)
	mem := (*C.px4_msgs__msg__LogMessage)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Severity = uint8(mem.severity)
	cSlice_text := mem.text[:]
	primitives.Char__Array_to_Go(m.Text[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_text)))
}

func (t _LogMessageTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__LogMessage())
}

type CLogMessage = C.px4_msgs__msg__LogMessage
type CLogMessage__Sequence = C.px4_msgs__msg__LogMessage__Sequence

func LogMessage__Sequence_to_Go(goSlice *[]LogMessage, cSlice CLogMessage__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LogMessage, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LogMessageTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LogMessage__Sequence_to_C(cSlice *CLogMessage__Sequence, goSlice []LogMessage) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__LogMessage)(C.malloc(C.sizeof_struct_px4_msgs__msg__LogMessage * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LogMessageTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LogMessage__Array_to_Go(goSlice []LogMessage, cSlice []CLogMessage) {
	for i := 0; i < len(cSlice); i++ {
		LogMessageTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LogMessage__Array_to_C(cSlice []CLogMessage, goSlice []LogMessage) {
	for i := 0; i < len(goSlice); i++ {
		LogMessageTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
