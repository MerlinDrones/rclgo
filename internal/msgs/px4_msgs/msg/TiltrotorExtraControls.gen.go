// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/tiltrotor_extra_controls.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TiltrotorExtraControls", TiltrotorExtraControlsTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/TiltrotorExtraControls", TiltrotorExtraControlsTypeSupport)
}

type TiltrotorExtraControls struct {
	Timestamp                          uint64  `yaml:"timestamp"`                             // time since system start (microseconds)
	CollectiveTiltNormalizedSetpoint   float32 `yaml:"collective_tilt_normalized_setpoint"`   // Collective tilt angle of motors of tiltrotor, 0: vertical, 1: horizontal [0, 1]
	CollectiveThrustNormalizedSetpoint float32 `yaml:"collective_thrust_normalized_setpoint"` // Collective thrust setpoint [0, 1]
}

// NewTiltrotorExtraControls creates a new TiltrotorExtraControls with default values.
func NewTiltrotorExtraControls() *TiltrotorExtraControls {
	self := TiltrotorExtraControls{}
	self.SetDefaults()
	return &self
}

func (t *TiltrotorExtraControls) Clone() *TiltrotorExtraControls {
	c := &TiltrotorExtraControls{}
	c.Timestamp = t.Timestamp
	c.CollectiveTiltNormalizedSetpoint = t.CollectiveTiltNormalizedSetpoint
	c.CollectiveThrustNormalizedSetpoint = t.CollectiveThrustNormalizedSetpoint
	return c
}

func (t *TiltrotorExtraControls) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TiltrotorExtraControls) SetDefaults() {
	t.Timestamp = 0
	t.CollectiveTiltNormalizedSetpoint = 0
	t.CollectiveThrustNormalizedSetpoint = 0
}

func (t *TiltrotorExtraControls) GetTypeSupport() types.MessageTypeSupport {
	return TiltrotorExtraControlsTypeSupport
}

// TiltrotorExtraControlsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TiltrotorExtraControlsPublisher struct {
	*rclgo.Publisher
}

// NewTiltrotorExtraControlsPublisher creates and returns a new publisher for the
// TiltrotorExtraControls
func NewTiltrotorExtraControlsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TiltrotorExtraControlsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TiltrotorExtraControlsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TiltrotorExtraControlsPublisher{pub}, nil
}

func (p *TiltrotorExtraControlsPublisher) Publish(msg *TiltrotorExtraControls) error {
	return p.Publisher.Publish(msg)
}

// TiltrotorExtraControlsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TiltrotorExtraControlsSubscription struct {
	*rclgo.Subscription
}

// TiltrotorExtraControlsSubscriptionCallback type is used to provide a subscription
// handler function for a TiltrotorExtraControlsSubscription.
type TiltrotorExtraControlsSubscriptionCallback func(msg *TiltrotorExtraControls, info *rclgo.MessageInfo, err error)

// NewTiltrotorExtraControlsSubscription creates and returns a new subscription for the
// TiltrotorExtraControls
func NewTiltrotorExtraControlsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TiltrotorExtraControlsSubscriptionCallback) (*TiltrotorExtraControlsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TiltrotorExtraControls
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TiltrotorExtraControlsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TiltrotorExtraControlsSubscription{sub}, nil
}

func (s *TiltrotorExtraControlsSubscription) TakeMessage(out *TiltrotorExtraControls) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTiltrotorExtraControlsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTiltrotorExtraControlsSlice(dst, src []TiltrotorExtraControls) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TiltrotorExtraControlsTypeSupport types.MessageTypeSupport = _TiltrotorExtraControlsTypeSupport{}

type _TiltrotorExtraControlsTypeSupport struct{}

func (t _TiltrotorExtraControlsTypeSupport) New() types.Message {
	return NewTiltrotorExtraControls()
}

func (t _TiltrotorExtraControlsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TiltrotorExtraControls
	return (unsafe.Pointer)(C.px4_msgs__msg__TiltrotorExtraControls__create())
}

func (t _TiltrotorExtraControlsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TiltrotorExtraControls__destroy((*C.px4_msgs__msg__TiltrotorExtraControls)(pointer_to_free))
}

func (t _TiltrotorExtraControlsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TiltrotorExtraControls)
	mem := (*C.px4_msgs__msg__TiltrotorExtraControls)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.collective_tilt_normalized_setpoint = C.float(m.CollectiveTiltNormalizedSetpoint)
	mem.collective_thrust_normalized_setpoint = C.float(m.CollectiveThrustNormalizedSetpoint)
}

func (t _TiltrotorExtraControlsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TiltrotorExtraControls)
	mem := (*C.px4_msgs__msg__TiltrotorExtraControls)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.CollectiveTiltNormalizedSetpoint = float32(mem.collective_tilt_normalized_setpoint)
	m.CollectiveThrustNormalizedSetpoint = float32(mem.collective_thrust_normalized_setpoint)
}

func (t _TiltrotorExtraControlsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TiltrotorExtraControls())
}

type CTiltrotorExtraControls = C.px4_msgs__msg__TiltrotorExtraControls
type CTiltrotorExtraControls__Sequence = C.px4_msgs__msg__TiltrotorExtraControls__Sequence

func TiltrotorExtraControls__Sequence_to_Go(goSlice *[]TiltrotorExtraControls, cSlice CTiltrotorExtraControls__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TiltrotorExtraControls, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TiltrotorExtraControlsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TiltrotorExtraControls__Sequence_to_C(cSlice *CTiltrotorExtraControls__Sequence, goSlice []TiltrotorExtraControls) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TiltrotorExtraControls)(C.malloc(C.sizeof_struct_px4_msgs__msg__TiltrotorExtraControls * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TiltrotorExtraControlsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TiltrotorExtraControls__Array_to_Go(goSlice []TiltrotorExtraControls, cSlice []CTiltrotorExtraControls) {
	for i := 0; i < len(cSlice); i++ {
		TiltrotorExtraControlsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TiltrotorExtraControls__Array_to_C(cSlice []CTiltrotorExtraControls, goSlice []TiltrotorExtraControls) {
	for i := 0; i < len(goSlice); i++ {
		TiltrotorExtraControlsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
