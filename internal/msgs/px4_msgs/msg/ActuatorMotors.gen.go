// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/actuator_motors.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ActuatorMotors", ActuatorMotorsTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ActuatorMotors", ActuatorMotorsTypeSupport)
}

const (
	ActuatorMotors_ACTUATOR_FUNCTION_MOTOR1 uint8 = 101
	ActuatorMotors_NUM_CONTROLS             uint8 = 12
)

type ActuatorMotors struct {
	Timestamp       uint64      `yaml:"timestamp"`        // time since system start (microseconds). Motor control message
	TimestampSample uint64      `yaml:"timestamp_sample"` // the timestamp the data this control response is based on was sampled
	ReversibleFlags uint16      `yaml:"reversible_flags"` // bitset which motors are configured to be reversible
	Control         [12]float32 `yaml:"control"`          // range: [-1, 1], where 1 means maximum positive thrust,
}

// NewActuatorMotors creates a new ActuatorMotors with default values.
func NewActuatorMotors() *ActuatorMotors {
	self := ActuatorMotors{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorMotors) Clone() *ActuatorMotors {
	c := &ActuatorMotors{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.ReversibleFlags = t.ReversibleFlags
	c.Control = t.Control
	return c
}

func (t *ActuatorMotors) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorMotors) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.ReversibleFlags = 0
	t.Control = [12]float32{}
}

func (t *ActuatorMotors) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorMotorsTypeSupport
}

// ActuatorMotorsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorMotorsPublisher struct {
	*rclgo.Publisher
}

// NewActuatorMotorsPublisher creates and returns a new publisher for the
// ActuatorMotors
func NewActuatorMotorsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorMotorsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorMotorsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorMotorsPublisher{pub}, nil
}

func (p *ActuatorMotorsPublisher) Publish(msg *ActuatorMotors) error {
	return p.Publisher.Publish(msg)
}

// ActuatorMotorsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorMotorsSubscription struct {
	*rclgo.Subscription
}

// ActuatorMotorsSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorMotorsSubscription.
type ActuatorMotorsSubscriptionCallback func(msg *ActuatorMotors, info *rclgo.MessageInfo, err error)

// NewActuatorMotorsSubscription creates and returns a new subscription for the
// ActuatorMotors
func NewActuatorMotorsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorMotorsSubscriptionCallback) (*ActuatorMotorsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorMotors
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorMotorsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorMotorsSubscription{sub}, nil
}

func (s *ActuatorMotorsSubscription) TakeMessage(out *ActuatorMotors) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorMotorsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorMotorsSlice(dst, src []ActuatorMotors) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorMotorsTypeSupport types.MessageTypeSupport = _ActuatorMotorsTypeSupport{}

type _ActuatorMotorsTypeSupport struct{}

func (t _ActuatorMotorsTypeSupport) New() types.Message {
	return NewActuatorMotors()
}

func (t _ActuatorMotorsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ActuatorMotors
	return (unsafe.Pointer)(C.px4_msgs__msg__ActuatorMotors__create())
}

func (t _ActuatorMotorsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ActuatorMotors__destroy((*C.px4_msgs__msg__ActuatorMotors)(pointer_to_free))
}

func (t _ActuatorMotorsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorMotors)
	mem := (*C.px4_msgs__msg__ActuatorMotors)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.reversible_flags = C.uint16_t(m.ReversibleFlags)
	cSlice_control := mem.control[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_control)), m.Control[:])
}

func (t _ActuatorMotorsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorMotors)
	mem := (*C.px4_msgs__msg__ActuatorMotors)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.ReversibleFlags = uint16(mem.reversible_flags)
	cSlice_control := mem.control[:]
	primitives.Float32__Array_to_Go(m.Control[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_control)))
}

func (t _ActuatorMotorsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ActuatorMotors())
}

type CActuatorMotors = C.px4_msgs__msg__ActuatorMotors
type CActuatorMotors__Sequence = C.px4_msgs__msg__ActuatorMotors__Sequence

func ActuatorMotors__Sequence_to_Go(goSlice *[]ActuatorMotors, cSlice CActuatorMotors__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorMotors, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorMotorsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorMotors__Sequence_to_C(cSlice *CActuatorMotors__Sequence, goSlice []ActuatorMotors) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ActuatorMotors)(C.malloc(C.sizeof_struct_px4_msgs__msg__ActuatorMotors * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorMotorsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorMotors__Array_to_Go(goSlice []ActuatorMotors, cSlice []CActuatorMotors) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorMotorsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorMotors__Array_to_C(cSlice []CActuatorMotors, goSlice []ActuatorMotors) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorMotorsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
