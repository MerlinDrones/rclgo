// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/camera_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/CameraStatus", CameraStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/CameraStatus", CameraStatusTypeSupport)
}

type CameraStatus struct {
	Timestamp    uint64 `yaml:"timestamp"`      // time since system start (microseconds)
	ActiveSysId  uint8  `yaml:"active_sys_id"`  // mavlink system id of the currently active camera
	ActiveCompId uint8  `yaml:"active_comp_id"` // mavlink component id of currently active camera
}

// NewCameraStatus creates a new CameraStatus with default values.
func NewCameraStatus() *CameraStatus {
	self := CameraStatus{}
	self.SetDefaults()
	return &self
}

func (t *CameraStatus) Clone() *CameraStatus {
	c := &CameraStatus{}
	c.Timestamp = t.Timestamp
	c.ActiveSysId = t.ActiveSysId
	c.ActiveCompId = t.ActiveCompId
	return c
}

func (t *CameraStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CameraStatus) SetDefaults() {
	t.Timestamp = 0
	t.ActiveSysId = 0
	t.ActiveCompId = 0
}

func (t *CameraStatus) GetTypeSupport() types.MessageTypeSupport {
	return CameraStatusTypeSupport
}

// CameraStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CameraStatusPublisher struct {
	*rclgo.Publisher
}

// NewCameraStatusPublisher creates and returns a new publisher for the
// CameraStatus
func NewCameraStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CameraStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CameraStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CameraStatusPublisher{pub}, nil
}

func (p *CameraStatusPublisher) Publish(msg *CameraStatus) error {
	return p.Publisher.Publish(msg)
}

// CameraStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CameraStatusSubscription struct {
	*rclgo.Subscription
}

// CameraStatusSubscriptionCallback type is used to provide a subscription
// handler function for a CameraStatusSubscription.
type CameraStatusSubscriptionCallback func(msg *CameraStatus, info *rclgo.MessageInfo, err error)

// NewCameraStatusSubscription creates and returns a new subscription for the
// CameraStatus
func NewCameraStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CameraStatusSubscriptionCallback) (*CameraStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CameraStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CameraStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CameraStatusSubscription{sub}, nil
}

func (s *CameraStatusSubscription) TakeMessage(out *CameraStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCameraStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCameraStatusSlice(dst, src []CameraStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CameraStatusTypeSupport types.MessageTypeSupport = _CameraStatusTypeSupport{}

type _CameraStatusTypeSupport struct{}

func (t _CameraStatusTypeSupport) New() types.Message {
	return NewCameraStatus()
}

func (t _CameraStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__CameraStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__CameraStatus__create())
}

func (t _CameraStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__CameraStatus__destroy((*C.px4_msgs__msg__CameraStatus)(pointer_to_free))
}

func (t _CameraStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CameraStatus)
	mem := (*C.px4_msgs__msg__CameraStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.active_sys_id = C.uint8_t(m.ActiveSysId)
	mem.active_comp_id = C.uint8_t(m.ActiveCompId)
}

func (t _CameraStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CameraStatus)
	mem := (*C.px4_msgs__msg__CameraStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.ActiveSysId = uint8(mem.active_sys_id)
	m.ActiveCompId = uint8(mem.active_comp_id)
}

func (t _CameraStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__CameraStatus())
}

type CCameraStatus = C.px4_msgs__msg__CameraStatus
type CCameraStatus__Sequence = C.px4_msgs__msg__CameraStatus__Sequence

func CameraStatus__Sequence_to_Go(goSlice *[]CameraStatus, cSlice CCameraStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CameraStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CameraStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CameraStatus__Sequence_to_C(cSlice *CCameraStatus__Sequence, goSlice []CameraStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__CameraStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__CameraStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CameraStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CameraStatus__Array_to_Go(goSlice []CameraStatus, cSlice []CCameraStatus) {
	for i := 0; i < len(cSlice); i++ {
		CameraStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CameraStatus__Array_to_C(cSlice []CCameraStatus, goSlice []CameraStatus) {
	for i := 0; i < len(goSlice); i++ {
		CameraStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
