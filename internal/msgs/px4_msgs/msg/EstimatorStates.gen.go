// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/estimator_states.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/EstimatorStates", EstimatorStatesTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/EstimatorStates", EstimatorStatesTypeSupport)
}

type EstimatorStates struct {
	Timestamp       uint64      `yaml:"timestamp"`        // time since system start (microseconds)
	TimestampSample uint64      `yaml:"timestamp_sample"` // the timestamp of the raw data (microseconds)
	States          [25]float32 `yaml:"states"`           // Internal filter states
	NStates         uint8       `yaml:"n_states"`         // Number of states effectively used
	Covariances     [24]float32 `yaml:"covariances"`      // Diagonal Elements of Covariance Matrix
}

// NewEstimatorStates creates a new EstimatorStates with default values.
func NewEstimatorStates() *EstimatorStates {
	self := EstimatorStates{}
	self.SetDefaults()
	return &self
}

func (t *EstimatorStates) Clone() *EstimatorStates {
	c := &EstimatorStates{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.States = t.States
	c.NStates = t.NStates
	c.Covariances = t.Covariances
	return c
}

func (t *EstimatorStates) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EstimatorStates) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.States = [25]float32{}
	t.NStates = 0
	t.Covariances = [24]float32{}
}

func (t *EstimatorStates) GetTypeSupport() types.MessageTypeSupport {
	return EstimatorStatesTypeSupport
}

// EstimatorStatesPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EstimatorStatesPublisher struct {
	*rclgo.Publisher
}

// NewEstimatorStatesPublisher creates and returns a new publisher for the
// EstimatorStates
func NewEstimatorStatesPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EstimatorStatesPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EstimatorStatesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EstimatorStatesPublisher{pub}, nil
}

func (p *EstimatorStatesPublisher) Publish(msg *EstimatorStates) error {
	return p.Publisher.Publish(msg)
}

// EstimatorStatesSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EstimatorStatesSubscription struct {
	*rclgo.Subscription
}

// EstimatorStatesSubscriptionCallback type is used to provide a subscription
// handler function for a EstimatorStatesSubscription.
type EstimatorStatesSubscriptionCallback func(msg *EstimatorStates, info *rclgo.MessageInfo, err error)

// NewEstimatorStatesSubscription creates and returns a new subscription for the
// EstimatorStates
func NewEstimatorStatesSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EstimatorStatesSubscriptionCallback) (*EstimatorStatesSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg EstimatorStates
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EstimatorStatesTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EstimatorStatesSubscription{sub}, nil
}

func (s *EstimatorStatesSubscription) TakeMessage(out *EstimatorStates) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEstimatorStatesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEstimatorStatesSlice(dst, src []EstimatorStates) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EstimatorStatesTypeSupport types.MessageTypeSupport = _EstimatorStatesTypeSupport{}

type _EstimatorStatesTypeSupport struct{}

func (t _EstimatorStatesTypeSupport) New() types.Message {
	return NewEstimatorStates()
}

func (t _EstimatorStatesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorStates
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorStates__create())
}

func (t _EstimatorStatesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorStates__destroy((*C.px4_msgs__msg__EstimatorStates)(pointer_to_free))
}

func (t _EstimatorStatesTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EstimatorStates)
	mem := (*C.px4_msgs__msg__EstimatorStates)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	cSlice_states := mem.states[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_states)), m.States[:])
	mem.n_states = C.uint8_t(m.NStates)
	cSlice_covariances := mem.covariances[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_covariances)), m.Covariances[:])
}

func (t _EstimatorStatesTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EstimatorStates)
	mem := (*C.px4_msgs__msg__EstimatorStates)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	cSlice_states := mem.states[:]
	primitives.Float32__Array_to_Go(m.States[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_states)))
	m.NStates = uint8(mem.n_states)
	cSlice_covariances := mem.covariances[:]
	primitives.Float32__Array_to_Go(m.Covariances[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_covariances)))
}

func (t _EstimatorStatesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorStates())
}

type CEstimatorStates = C.px4_msgs__msg__EstimatorStates
type CEstimatorStates__Sequence = C.px4_msgs__msg__EstimatorStates__Sequence

func EstimatorStates__Sequence_to_Go(goSlice *[]EstimatorStates, cSlice CEstimatorStates__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorStates, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EstimatorStatesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func EstimatorStates__Sequence_to_C(cSlice *CEstimatorStates__Sequence, goSlice []EstimatorStates) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorStates)(C.malloc(C.sizeof_struct_px4_msgs__msg__EstimatorStates * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EstimatorStatesTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func EstimatorStates__Array_to_Go(goSlice []EstimatorStates, cSlice []CEstimatorStates) {
	for i := 0; i < len(cSlice); i++ {
		EstimatorStatesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorStates__Array_to_C(cSlice []CEstimatorStates, goSlice []EstimatorStates) {
	for i := 0; i < len(goSlice); i++ {
		EstimatorStatesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
