// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/parameter_set_used_request.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ParameterSetUsedRequest", ParameterSetUsedRequestTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ParameterSetUsedRequest", ParameterSetUsedRequestTypeSupport)
}

const (
	ParameterSetUsedRequest_ORB_QUEUE_LENGTH uint8 = 64
)

type ParameterSetUsedRequest struct {
	Timestamp      uint64 `yaml:"timestamp"`
	ParameterIndex uint16 `yaml:"parameter_index"`
}

// NewParameterSetUsedRequest creates a new ParameterSetUsedRequest with default values.
func NewParameterSetUsedRequest() *ParameterSetUsedRequest {
	self := ParameterSetUsedRequest{}
	self.SetDefaults()
	return &self
}

func (t *ParameterSetUsedRequest) Clone() *ParameterSetUsedRequest {
	c := &ParameterSetUsedRequest{}
	c.Timestamp = t.Timestamp
	c.ParameterIndex = t.ParameterIndex
	return c
}

func (t *ParameterSetUsedRequest) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParameterSetUsedRequest) SetDefaults() {
	t.Timestamp = 0
	t.ParameterIndex = 0
}

func (t *ParameterSetUsedRequest) GetTypeSupport() types.MessageTypeSupport {
	return ParameterSetUsedRequestTypeSupport
}

// ParameterSetUsedRequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParameterSetUsedRequestPublisher struct {
	*rclgo.Publisher
}

// NewParameterSetUsedRequestPublisher creates and returns a new publisher for the
// ParameterSetUsedRequest
func NewParameterSetUsedRequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParameterSetUsedRequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParameterSetUsedRequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParameterSetUsedRequestPublisher{pub}, nil
}

func (p *ParameterSetUsedRequestPublisher) Publish(msg *ParameterSetUsedRequest) error {
	return p.Publisher.Publish(msg)
}

// ParameterSetUsedRequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParameterSetUsedRequestSubscription struct {
	*rclgo.Subscription
}

// ParameterSetUsedRequestSubscriptionCallback type is used to provide a subscription
// handler function for a ParameterSetUsedRequestSubscription.
type ParameterSetUsedRequestSubscriptionCallback func(msg *ParameterSetUsedRequest, info *rclgo.MessageInfo, err error)

// NewParameterSetUsedRequestSubscription creates and returns a new subscription for the
// ParameterSetUsedRequest
func NewParameterSetUsedRequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParameterSetUsedRequestSubscriptionCallback) (*ParameterSetUsedRequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParameterSetUsedRequest
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParameterSetUsedRequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParameterSetUsedRequestSubscription{sub}, nil
}

func (s *ParameterSetUsedRequestSubscription) TakeMessage(out *ParameterSetUsedRequest) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParameterSetUsedRequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParameterSetUsedRequestSlice(dst, src []ParameterSetUsedRequest) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParameterSetUsedRequestTypeSupport types.MessageTypeSupport = _ParameterSetUsedRequestTypeSupport{}

type _ParameterSetUsedRequestTypeSupport struct{}

func (t _ParameterSetUsedRequestTypeSupport) New() types.Message {
	return NewParameterSetUsedRequest()
}

func (t _ParameterSetUsedRequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ParameterSetUsedRequest
	return (unsafe.Pointer)(C.px4_msgs__msg__ParameterSetUsedRequest__create())
}

func (t _ParameterSetUsedRequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ParameterSetUsedRequest__destroy((*C.px4_msgs__msg__ParameterSetUsedRequest)(pointer_to_free))
}

func (t _ParameterSetUsedRequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParameterSetUsedRequest)
	mem := (*C.px4_msgs__msg__ParameterSetUsedRequest)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.parameter_index = C.uint16_t(m.ParameterIndex)
}

func (t _ParameterSetUsedRequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParameterSetUsedRequest)
	mem := (*C.px4_msgs__msg__ParameterSetUsedRequest)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.ParameterIndex = uint16(mem.parameter_index)
}

func (t _ParameterSetUsedRequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ParameterSetUsedRequest())
}

type CParameterSetUsedRequest = C.px4_msgs__msg__ParameterSetUsedRequest
type CParameterSetUsedRequest__Sequence = C.px4_msgs__msg__ParameterSetUsedRequest__Sequence

func ParameterSetUsedRequest__Sequence_to_Go(goSlice *[]ParameterSetUsedRequest, cSlice CParameterSetUsedRequest__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParameterSetUsedRequest, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParameterSetUsedRequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParameterSetUsedRequest__Sequence_to_C(cSlice *CParameterSetUsedRequest__Sequence, goSlice []ParameterSetUsedRequest) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ParameterSetUsedRequest)(C.malloc(C.sizeof_struct_px4_msgs__msg__ParameterSetUsedRequest * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParameterSetUsedRequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParameterSetUsedRequest__Array_to_Go(goSlice []ParameterSetUsedRequest, cSlice []CParameterSetUsedRequest) {
	for i := 0; i < len(cSlice); i++ {
		ParameterSetUsedRequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParameterSetUsedRequest__Array_to_C(cSlice []CParameterSetUsedRequest, goSlice []ParameterSetUsedRequest) {
	for i := 0; i < len(goSlice); i++ {
		ParameterSetUsedRequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
