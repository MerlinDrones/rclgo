// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rover_differential_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RoverDifferentialStatus", RoverDifferentialStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RoverDifferentialStatus", RoverDifferentialStatusTypeSupport)
}

type RoverDifferentialStatus struct {
	Timestamp              uint64  `yaml:"timestamp"`                // time since system start (microseconds)
	ActualSpeed            float32 `yaml:"actual_speed"`             // [m/s] Actual forward speed of the rover
	ActualYaw              float32 `yaml:"actual_yaw"`               // [rad] Actual yaw of the rover
	ActualYawRate          float32 `yaml:"actual_yaw_rate"`          // [rad/s] Actual yaw rate of the rover
	DesiredYawRate         float32 `yaml:"desired_yaw_rate"`         // [rad/s] Yaw rate setpoint for the closed loop yaw rate controller
	ForwardSpeedNormalized float32 `yaml:"forward_speed_normalized"` // [-1, 1] Normalized forward speed setpoint
	SpeedDiffNormalized    float32 `yaml:"speed_diff_normalized"`    // [-1, 1] Normalized speed difference setpoint between the left and right motor
	PidYawIntegral         float32 `yaml:"pid_yaw_integral"`         // Integral of the PID for the closed loop yaw controller
	PidYawRateIntegral     float32 `yaml:"pid_yaw_rate_integral"`    // Integral of the PID for the closed loop yaw rate controller
	PidThrottleIntegral    float32 `yaml:"pid_throttle_integral"`    // Integral of the PID for the closed loop speed controller
}

// NewRoverDifferentialStatus creates a new RoverDifferentialStatus with default values.
func NewRoverDifferentialStatus() *RoverDifferentialStatus {
	self := RoverDifferentialStatus{}
	self.SetDefaults()
	return &self
}

func (t *RoverDifferentialStatus) Clone() *RoverDifferentialStatus {
	c := &RoverDifferentialStatus{}
	c.Timestamp = t.Timestamp
	c.ActualSpeed = t.ActualSpeed
	c.ActualYaw = t.ActualYaw
	c.ActualYawRate = t.ActualYawRate
	c.DesiredYawRate = t.DesiredYawRate
	c.ForwardSpeedNormalized = t.ForwardSpeedNormalized
	c.SpeedDiffNormalized = t.SpeedDiffNormalized
	c.PidYawIntegral = t.PidYawIntegral
	c.PidYawRateIntegral = t.PidYawRateIntegral
	c.PidThrottleIntegral = t.PidThrottleIntegral
	return c
}

func (t *RoverDifferentialStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RoverDifferentialStatus) SetDefaults() {
	t.Timestamp = 0
	t.ActualSpeed = 0
	t.ActualYaw = 0
	t.ActualYawRate = 0
	t.DesiredYawRate = 0
	t.ForwardSpeedNormalized = 0
	t.SpeedDiffNormalized = 0
	t.PidYawIntegral = 0
	t.PidYawRateIntegral = 0
	t.PidThrottleIntegral = 0
}

func (t *RoverDifferentialStatus) GetTypeSupport() types.MessageTypeSupport {
	return RoverDifferentialStatusTypeSupport
}

// RoverDifferentialStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RoverDifferentialStatusPublisher struct {
	*rclgo.Publisher
}

// NewRoverDifferentialStatusPublisher creates and returns a new publisher for the
// RoverDifferentialStatus
func NewRoverDifferentialStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RoverDifferentialStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RoverDifferentialStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RoverDifferentialStatusPublisher{pub}, nil
}

func (p *RoverDifferentialStatusPublisher) Publish(msg *RoverDifferentialStatus) error {
	return p.Publisher.Publish(msg)
}

// RoverDifferentialStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RoverDifferentialStatusSubscription struct {
	*rclgo.Subscription
}

// RoverDifferentialStatusSubscriptionCallback type is used to provide a subscription
// handler function for a RoverDifferentialStatusSubscription.
type RoverDifferentialStatusSubscriptionCallback func(msg *RoverDifferentialStatus, info *rclgo.MessageInfo, err error)

// NewRoverDifferentialStatusSubscription creates and returns a new subscription for the
// RoverDifferentialStatus
func NewRoverDifferentialStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RoverDifferentialStatusSubscriptionCallback) (*RoverDifferentialStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RoverDifferentialStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RoverDifferentialStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RoverDifferentialStatusSubscription{sub}, nil
}

func (s *RoverDifferentialStatusSubscription) TakeMessage(out *RoverDifferentialStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRoverDifferentialStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRoverDifferentialStatusSlice(dst, src []RoverDifferentialStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RoverDifferentialStatusTypeSupport types.MessageTypeSupport = _RoverDifferentialStatusTypeSupport{}

type _RoverDifferentialStatusTypeSupport struct{}

func (t _RoverDifferentialStatusTypeSupport) New() types.Message {
	return NewRoverDifferentialStatus()
}

func (t _RoverDifferentialStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RoverDifferentialStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__RoverDifferentialStatus__create())
}

func (t _RoverDifferentialStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RoverDifferentialStatus__destroy((*C.px4_msgs__msg__RoverDifferentialStatus)(pointer_to_free))
}

func (t _RoverDifferentialStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RoverDifferentialStatus)
	mem := (*C.px4_msgs__msg__RoverDifferentialStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.actual_speed = C.float(m.ActualSpeed)
	mem.actual_yaw = C.float(m.ActualYaw)
	mem.actual_yaw_rate = C.float(m.ActualYawRate)
	mem.desired_yaw_rate = C.float(m.DesiredYawRate)
	mem.forward_speed_normalized = C.float(m.ForwardSpeedNormalized)
	mem.speed_diff_normalized = C.float(m.SpeedDiffNormalized)
	mem.pid_yaw_integral = C.float(m.PidYawIntegral)
	mem.pid_yaw_rate_integral = C.float(m.PidYawRateIntegral)
	mem.pid_throttle_integral = C.float(m.PidThrottleIntegral)
}

func (t _RoverDifferentialStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RoverDifferentialStatus)
	mem := (*C.px4_msgs__msg__RoverDifferentialStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.ActualSpeed = float32(mem.actual_speed)
	m.ActualYaw = float32(mem.actual_yaw)
	m.ActualYawRate = float32(mem.actual_yaw_rate)
	m.DesiredYawRate = float32(mem.desired_yaw_rate)
	m.ForwardSpeedNormalized = float32(mem.forward_speed_normalized)
	m.SpeedDiffNormalized = float32(mem.speed_diff_normalized)
	m.PidYawIntegral = float32(mem.pid_yaw_integral)
	m.PidYawRateIntegral = float32(mem.pid_yaw_rate_integral)
	m.PidThrottleIntegral = float32(mem.pid_throttle_integral)
}

func (t _RoverDifferentialStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RoverDifferentialStatus())
}

type CRoverDifferentialStatus = C.px4_msgs__msg__RoverDifferentialStatus
type CRoverDifferentialStatus__Sequence = C.px4_msgs__msg__RoverDifferentialStatus__Sequence

func RoverDifferentialStatus__Sequence_to_Go(goSlice *[]RoverDifferentialStatus, cSlice CRoverDifferentialStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RoverDifferentialStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RoverDifferentialStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RoverDifferentialStatus__Sequence_to_C(cSlice *CRoverDifferentialStatus__Sequence, goSlice []RoverDifferentialStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RoverDifferentialStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__RoverDifferentialStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RoverDifferentialStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RoverDifferentialStatus__Array_to_Go(goSlice []RoverDifferentialStatus, cSlice []CRoverDifferentialStatus) {
	for i := 0; i < len(cSlice); i++ {
		RoverDifferentialStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RoverDifferentialStatus__Array_to_C(cSlice []CRoverDifferentialStatus, goSlice []RoverDifferentialStatus) {
	for i := 0; i < len(goSlice); i++ {
		RoverDifferentialStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
