// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/landing_gear_wheel.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/LandingGearWheel", LandingGearWheelTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/LandingGearWheel", LandingGearWheelTypeSupport)
}

type LandingGearWheel struct {
	Timestamp               uint64  `yaml:"timestamp"`                 // time since system start (microseconds)
	NormalizedWheelSetpoint float32 `yaml:"normalized_wheel_setpoint"` // negative is turning left, positive turning right [-1, 1]
}

// NewLandingGearWheel creates a new LandingGearWheel with default values.
func NewLandingGearWheel() *LandingGearWheel {
	self := LandingGearWheel{}
	self.SetDefaults()
	return &self
}

func (t *LandingGearWheel) Clone() *LandingGearWheel {
	c := &LandingGearWheel{}
	c.Timestamp = t.Timestamp
	c.NormalizedWheelSetpoint = t.NormalizedWheelSetpoint
	return c
}

func (t *LandingGearWheel) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LandingGearWheel) SetDefaults() {
	t.Timestamp = 0
	t.NormalizedWheelSetpoint = 0
}

func (t *LandingGearWheel) GetTypeSupport() types.MessageTypeSupport {
	return LandingGearWheelTypeSupport
}

// LandingGearWheelPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LandingGearWheelPublisher struct {
	*rclgo.Publisher
}

// NewLandingGearWheelPublisher creates and returns a new publisher for the
// LandingGearWheel
func NewLandingGearWheelPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LandingGearWheelPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LandingGearWheelTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LandingGearWheelPublisher{pub}, nil
}

func (p *LandingGearWheelPublisher) Publish(msg *LandingGearWheel) error {
	return p.Publisher.Publish(msg)
}

// LandingGearWheelSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LandingGearWheelSubscription struct {
	*rclgo.Subscription
}

// LandingGearWheelSubscriptionCallback type is used to provide a subscription
// handler function for a LandingGearWheelSubscription.
type LandingGearWheelSubscriptionCallback func(msg *LandingGearWheel, info *rclgo.MessageInfo, err error)

// NewLandingGearWheelSubscription creates and returns a new subscription for the
// LandingGearWheel
func NewLandingGearWheelSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LandingGearWheelSubscriptionCallback) (*LandingGearWheelSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LandingGearWheel
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LandingGearWheelTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LandingGearWheelSubscription{sub}, nil
}

func (s *LandingGearWheelSubscription) TakeMessage(out *LandingGearWheel) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLandingGearWheelSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLandingGearWheelSlice(dst, src []LandingGearWheel) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LandingGearWheelTypeSupport types.MessageTypeSupport = _LandingGearWheelTypeSupport{}

type _LandingGearWheelTypeSupport struct{}

func (t _LandingGearWheelTypeSupport) New() types.Message {
	return NewLandingGearWheel()
}

func (t _LandingGearWheelTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__LandingGearWheel
	return (unsafe.Pointer)(C.px4_msgs__msg__LandingGearWheel__create())
}

func (t _LandingGearWheelTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__LandingGearWheel__destroy((*C.px4_msgs__msg__LandingGearWheel)(pointer_to_free))
}

func (t _LandingGearWheelTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LandingGearWheel)
	mem := (*C.px4_msgs__msg__LandingGearWheel)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.normalized_wheel_setpoint = C.float(m.NormalizedWheelSetpoint)
}

func (t _LandingGearWheelTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LandingGearWheel)
	mem := (*C.px4_msgs__msg__LandingGearWheel)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.NormalizedWheelSetpoint = float32(mem.normalized_wheel_setpoint)
}

func (t _LandingGearWheelTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__LandingGearWheel())
}

type CLandingGearWheel = C.px4_msgs__msg__LandingGearWheel
type CLandingGearWheel__Sequence = C.px4_msgs__msg__LandingGearWheel__Sequence

func LandingGearWheel__Sequence_to_Go(goSlice *[]LandingGearWheel, cSlice CLandingGearWheel__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LandingGearWheel, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LandingGearWheelTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LandingGearWheel__Sequence_to_C(cSlice *CLandingGearWheel__Sequence, goSlice []LandingGearWheel) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__LandingGearWheel)(C.malloc(C.sizeof_struct_px4_msgs__msg__LandingGearWheel * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LandingGearWheelTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LandingGearWheel__Array_to_Go(goSlice []LandingGearWheel, cSlice []CLandingGearWheel) {
	for i := 0; i < len(cSlice); i++ {
		LandingGearWheelTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LandingGearWheel__Array_to_C(cSlice []CLandingGearWheel, goSlice []LandingGearWheel) {
	for i := 0; i < len(goSlice); i++ {
		LandingGearWheelTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
