// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/launch_detection_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/LaunchDetectionStatus", LaunchDetectionStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/LaunchDetectionStatus", LaunchDetectionStatusTypeSupport)
}

const (
	LaunchDetectionStatus_STATE_WAITING_FOR_LAUNCH             uint8 = 0 // waiting for launch
	LaunchDetectionStatus_STATE_LAUNCH_DETECTED_DISABLED_MOTOR uint8 = 1 // launch detected, but keep motor(s) disabled (e.g. because it can't spin freely while on catapult)
	LaunchDetectionStatus_STATE_FLYING                         uint8 = 2 // launch detected, use normal takeoff/flying configuration
)

type LaunchDetectionStatus struct {
	Timestamp            uint64 `yaml:"timestamp"` // time since system start (microseconds)
	LaunchDetectionState uint8  `yaml:"launch_detection_state"`
}

// NewLaunchDetectionStatus creates a new LaunchDetectionStatus with default values.
func NewLaunchDetectionStatus() *LaunchDetectionStatus {
	self := LaunchDetectionStatus{}
	self.SetDefaults()
	return &self
}

func (t *LaunchDetectionStatus) Clone() *LaunchDetectionStatus {
	c := &LaunchDetectionStatus{}
	c.Timestamp = t.Timestamp
	c.LaunchDetectionState = t.LaunchDetectionState
	return c
}

func (t *LaunchDetectionStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LaunchDetectionStatus) SetDefaults() {
	t.Timestamp = 0
	t.LaunchDetectionState = 0
}

func (t *LaunchDetectionStatus) GetTypeSupport() types.MessageTypeSupport {
	return LaunchDetectionStatusTypeSupport
}

// LaunchDetectionStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LaunchDetectionStatusPublisher struct {
	*rclgo.Publisher
}

// NewLaunchDetectionStatusPublisher creates and returns a new publisher for the
// LaunchDetectionStatus
func NewLaunchDetectionStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LaunchDetectionStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LaunchDetectionStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LaunchDetectionStatusPublisher{pub}, nil
}

func (p *LaunchDetectionStatusPublisher) Publish(msg *LaunchDetectionStatus) error {
	return p.Publisher.Publish(msg)
}

// LaunchDetectionStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LaunchDetectionStatusSubscription struct {
	*rclgo.Subscription
}

// LaunchDetectionStatusSubscriptionCallback type is used to provide a subscription
// handler function for a LaunchDetectionStatusSubscription.
type LaunchDetectionStatusSubscriptionCallback func(msg *LaunchDetectionStatus, info *rclgo.MessageInfo, err error)

// NewLaunchDetectionStatusSubscription creates and returns a new subscription for the
// LaunchDetectionStatus
func NewLaunchDetectionStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LaunchDetectionStatusSubscriptionCallback) (*LaunchDetectionStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LaunchDetectionStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LaunchDetectionStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LaunchDetectionStatusSubscription{sub}, nil
}

func (s *LaunchDetectionStatusSubscription) TakeMessage(out *LaunchDetectionStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLaunchDetectionStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLaunchDetectionStatusSlice(dst, src []LaunchDetectionStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LaunchDetectionStatusTypeSupport types.MessageTypeSupport = _LaunchDetectionStatusTypeSupport{}

type _LaunchDetectionStatusTypeSupport struct{}

func (t _LaunchDetectionStatusTypeSupport) New() types.Message {
	return NewLaunchDetectionStatus()
}

func (t _LaunchDetectionStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__LaunchDetectionStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__LaunchDetectionStatus__create())
}

func (t _LaunchDetectionStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__LaunchDetectionStatus__destroy((*C.px4_msgs__msg__LaunchDetectionStatus)(pointer_to_free))
}

func (t _LaunchDetectionStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LaunchDetectionStatus)
	mem := (*C.px4_msgs__msg__LaunchDetectionStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.launch_detection_state = C.uint8_t(m.LaunchDetectionState)
}

func (t _LaunchDetectionStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LaunchDetectionStatus)
	mem := (*C.px4_msgs__msg__LaunchDetectionStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.LaunchDetectionState = uint8(mem.launch_detection_state)
}

func (t _LaunchDetectionStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__LaunchDetectionStatus())
}

type CLaunchDetectionStatus = C.px4_msgs__msg__LaunchDetectionStatus
type CLaunchDetectionStatus__Sequence = C.px4_msgs__msg__LaunchDetectionStatus__Sequence

func LaunchDetectionStatus__Sequence_to_Go(goSlice *[]LaunchDetectionStatus, cSlice CLaunchDetectionStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LaunchDetectionStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LaunchDetectionStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LaunchDetectionStatus__Sequence_to_C(cSlice *CLaunchDetectionStatus__Sequence, goSlice []LaunchDetectionStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__LaunchDetectionStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__LaunchDetectionStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LaunchDetectionStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LaunchDetectionStatus__Array_to_Go(goSlice []LaunchDetectionStatus, cSlice []CLaunchDetectionStatus) {
	for i := 0; i < len(cSlice); i++ {
		LaunchDetectionStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LaunchDetectionStatus__Array_to_C(cSlice []CLaunchDetectionStatus, goSlice []LaunchDetectionStatus) {
	for i := 0; i < len(goSlice); i++ {
		LaunchDetectionStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
