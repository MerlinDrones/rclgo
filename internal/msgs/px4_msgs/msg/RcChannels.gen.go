// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rc_channels.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RcChannels", RcChannelsTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RcChannels", RcChannelsTypeSupport)
}

const (
	RcChannels_FUNCTION_THROTTLE          uint8 = 0
	RcChannels_FUNCTION_ROLL              uint8 = 1
	RcChannels_FUNCTION_PITCH             uint8 = 2
	RcChannels_FUNCTION_YAW               uint8 = 3
	RcChannels_FUNCTION_RETURN            uint8 = 4
	RcChannels_FUNCTION_LOITER            uint8 = 5
	RcChannels_FUNCTION_OFFBOARD          uint8 = 6
	RcChannels_FUNCTION_FLAPS             uint8 = 7
	RcChannels_FUNCTION_AUX_1             uint8 = 8
	RcChannels_FUNCTION_AUX_2             uint8 = 9
	RcChannels_FUNCTION_AUX_3             uint8 = 10
	RcChannels_FUNCTION_AUX_4             uint8 = 11
	RcChannels_FUNCTION_AUX_5             uint8 = 12
	RcChannels_FUNCTION_AUX_6             uint8 = 13
	RcChannels_FUNCTION_PARAM_1           uint8 = 14
	RcChannels_FUNCTION_PARAM_2           uint8 = 15
	RcChannels_FUNCTION_PARAM_3_5         uint8 = 16
	RcChannels_FUNCTION_KILLSWITCH        uint8 = 17
	RcChannels_FUNCTION_TRANSITION        uint8 = 18
	RcChannels_FUNCTION_GEAR              uint8 = 19
	RcChannels_FUNCTION_ARMSWITCH         uint8 = 20
	RcChannels_FUNCTION_FLTBTN_SLOT_1     uint8 = 21
	RcChannels_FUNCTION_FLTBTN_SLOT_2     uint8 = 22
	RcChannels_FUNCTION_FLTBTN_SLOT_3     uint8 = 23
	RcChannels_FUNCTION_FLTBTN_SLOT_4     uint8 = 24
	RcChannels_FUNCTION_FLTBTN_SLOT_5     uint8 = 25
	RcChannels_FUNCTION_FLTBTN_SLOT_6     uint8 = 26
	RcChannels_FUNCTION_ENGAGE_MAIN_MOTOR uint8 = 27
	RcChannels_FUNCTION_FLTBTN_SLOT_COUNT uint8 = 6
)

type RcChannels struct {
	Timestamp          uint64      `yaml:"timestamp"`            // time since system start (microseconds)
	TimestampLastValid uint64      `yaml:"timestamp_last_valid"` // Timestamp of last valid RC signal
	Channels           [18]float32 `yaml:"channels"`             // Scaled to -1..1 (throttle: 0..1)
	ChannelCount       uint8       `yaml:"channel_count"`        // Number of valid channels
	Function           [28]int8    `yaml:"function"`             // Functions mapping
	Rssi               uint8       `yaml:"rssi"`                 // Receive signal strength index
	SignalLost         bool        `yaml:"signal_lost"`          // Control signal lost, should be checked together with topic timeout
	FrameDropCount     uint32      `yaml:"frame_drop_count"`     // Number of dropped frames
}

// NewRcChannels creates a new RcChannels with default values.
func NewRcChannels() *RcChannels {
	self := RcChannels{}
	self.SetDefaults()
	return &self
}

func (t *RcChannels) Clone() *RcChannels {
	c := &RcChannels{}
	c.Timestamp = t.Timestamp
	c.TimestampLastValid = t.TimestampLastValid
	c.Channels = t.Channels
	c.ChannelCount = t.ChannelCount
	c.Function = t.Function
	c.Rssi = t.Rssi
	c.SignalLost = t.SignalLost
	c.FrameDropCount = t.FrameDropCount
	return c
}

func (t *RcChannels) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RcChannels) SetDefaults() {
	t.Timestamp = 0
	t.TimestampLastValid = 0
	t.Channels = [18]float32{}
	t.ChannelCount = 0
	t.Function = [28]int8{}
	t.Rssi = 0
	t.SignalLost = false
	t.FrameDropCount = 0
}

func (t *RcChannels) GetTypeSupport() types.MessageTypeSupport {
	return RcChannelsTypeSupport
}

// RcChannelsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RcChannelsPublisher struct {
	*rclgo.Publisher
}

// NewRcChannelsPublisher creates and returns a new publisher for the
// RcChannels
func NewRcChannelsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RcChannelsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RcChannelsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RcChannelsPublisher{pub}, nil
}

func (p *RcChannelsPublisher) Publish(msg *RcChannels) error {
	return p.Publisher.Publish(msg)
}

// RcChannelsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RcChannelsSubscription struct {
	*rclgo.Subscription
}

// RcChannelsSubscriptionCallback type is used to provide a subscription
// handler function for a RcChannelsSubscription.
type RcChannelsSubscriptionCallback func(msg *RcChannels, info *rclgo.MessageInfo, err error)

// NewRcChannelsSubscription creates and returns a new subscription for the
// RcChannels
func NewRcChannelsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RcChannelsSubscriptionCallback) (*RcChannelsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RcChannels
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RcChannelsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RcChannelsSubscription{sub}, nil
}

func (s *RcChannelsSubscription) TakeMessage(out *RcChannels) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRcChannelsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRcChannelsSlice(dst, src []RcChannels) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RcChannelsTypeSupport types.MessageTypeSupport = _RcChannelsTypeSupport{}

type _RcChannelsTypeSupport struct{}

func (t _RcChannelsTypeSupport) New() types.Message {
	return NewRcChannels()
}

func (t _RcChannelsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RcChannels
	return (unsafe.Pointer)(C.px4_msgs__msg__RcChannels__create())
}

func (t _RcChannelsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RcChannels__destroy((*C.px4_msgs__msg__RcChannels)(pointer_to_free))
}

func (t _RcChannelsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RcChannels)
	mem := (*C.px4_msgs__msg__RcChannels)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_last_valid = C.uint64_t(m.TimestampLastValid)
	cSlice_channels := mem.channels[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_channels)), m.Channels[:])
	mem.channel_count = C.uint8_t(m.ChannelCount)
	cSlice_function := mem.function[:]
	primitives.Int8__Array_to_C(*(*[]primitives.CInt8)(unsafe.Pointer(&cSlice_function)), m.Function[:])
	mem.rssi = C.uint8_t(m.Rssi)
	mem.signal_lost = C.bool(m.SignalLost)
	mem.frame_drop_count = C.uint32_t(m.FrameDropCount)
}

func (t _RcChannelsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RcChannels)
	mem := (*C.px4_msgs__msg__RcChannels)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampLastValid = uint64(mem.timestamp_last_valid)
	cSlice_channels := mem.channels[:]
	primitives.Float32__Array_to_Go(m.Channels[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_channels)))
	m.ChannelCount = uint8(mem.channel_count)
	cSlice_function := mem.function[:]
	primitives.Int8__Array_to_Go(m.Function[:], *(*[]primitives.CInt8)(unsafe.Pointer(&cSlice_function)))
	m.Rssi = uint8(mem.rssi)
	m.SignalLost = bool(mem.signal_lost)
	m.FrameDropCount = uint32(mem.frame_drop_count)
}

func (t _RcChannelsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RcChannels())
}

type CRcChannels = C.px4_msgs__msg__RcChannels
type CRcChannels__Sequence = C.px4_msgs__msg__RcChannels__Sequence

func RcChannels__Sequence_to_Go(goSlice *[]RcChannels, cSlice CRcChannels__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RcChannels, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RcChannelsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RcChannels__Sequence_to_C(cSlice *CRcChannels__Sequence, goSlice []RcChannels) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RcChannels)(C.malloc(C.sizeof_struct_px4_msgs__msg__RcChannels * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RcChannelsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RcChannels__Array_to_Go(goSlice []RcChannels, cSlice []CRcChannels) {
	for i := 0; i < len(cSlice); i++ {
		RcChannelsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RcChannels__Array_to_C(cSlice []CRcChannels, goSlice []RcChannels) {
	for i := 0; i < len(goSlice); i++ {
		RcChannelsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
