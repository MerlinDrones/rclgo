// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/geofence_result.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GeofenceResult", GeofenceResultTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GeofenceResult", GeofenceResultTypeSupport)
}

const (
	GeofenceResult_GF_ACTION_NONE      uint8 = 0 // no action on geofence violation
	GeofenceResult_GF_ACTION_WARN      uint8 = 1 // critical mavlink message
	GeofenceResult_GF_ACTION_LOITER    uint8 = 2 // switch to AUTO|LOITER
	GeofenceResult_GF_ACTION_RTL       uint8 = 3 // switch to AUTO|RTL
	GeofenceResult_GF_ACTION_TERMINATE uint8 = 4 // flight termination
	GeofenceResult_GF_ACTION_LAND      uint8 = 5 // switch to AUTO|LAND
)

type GeofenceResult struct {
	Timestamp                    uint64 `yaml:"timestamp"`                       // time since system start (microseconds)
	GeofenceMaxDistTriggered     bool   `yaml:"geofence_max_dist_triggered"`     // true the check for max distance from Home is triggered
	GeofenceMaxAltTriggered      bool   `yaml:"geofence_max_alt_triggered"`      // true the check for max altitude above Home is triggered
	GeofenceCustomFenceTriggered bool   `yaml:"geofence_custom_fence_triggered"` // true the check for custom inclusion/exclusion geofence(s) is triggered
	GeofenceAction               uint8  `yaml:"geofence_action"`                 // action to take when the geofence is breached
}

// NewGeofenceResult creates a new GeofenceResult with default values.
func NewGeofenceResult() *GeofenceResult {
	self := GeofenceResult{}
	self.SetDefaults()
	return &self
}

func (t *GeofenceResult) Clone() *GeofenceResult {
	c := &GeofenceResult{}
	c.Timestamp = t.Timestamp
	c.GeofenceMaxDistTriggered = t.GeofenceMaxDistTriggered
	c.GeofenceMaxAltTriggered = t.GeofenceMaxAltTriggered
	c.GeofenceCustomFenceTriggered = t.GeofenceCustomFenceTriggered
	c.GeofenceAction = t.GeofenceAction
	return c
}

func (t *GeofenceResult) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GeofenceResult) SetDefaults() {
	t.Timestamp = 0
	t.GeofenceMaxDistTriggered = false
	t.GeofenceMaxAltTriggered = false
	t.GeofenceCustomFenceTriggered = false
	t.GeofenceAction = 0
}

func (t *GeofenceResult) GetTypeSupport() types.MessageTypeSupport {
	return GeofenceResultTypeSupport
}

// GeofenceResultPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GeofenceResultPublisher struct {
	*rclgo.Publisher
}

// NewGeofenceResultPublisher creates and returns a new publisher for the
// GeofenceResult
func NewGeofenceResultPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GeofenceResultPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GeofenceResultTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeofenceResultPublisher{pub}, nil
}

func (p *GeofenceResultPublisher) Publish(msg *GeofenceResult) error {
	return p.Publisher.Publish(msg)
}

// GeofenceResultSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GeofenceResultSubscription struct {
	*rclgo.Subscription
}

// GeofenceResultSubscriptionCallback type is used to provide a subscription
// handler function for a GeofenceResultSubscription.
type GeofenceResultSubscriptionCallback func(msg *GeofenceResult, info *rclgo.MessageInfo, err error)

// NewGeofenceResultSubscription creates and returns a new subscription for the
// GeofenceResult
func NewGeofenceResultSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GeofenceResultSubscriptionCallback) (*GeofenceResultSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GeofenceResult
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GeofenceResultTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeofenceResultSubscription{sub}, nil
}

func (s *GeofenceResultSubscription) TakeMessage(out *GeofenceResult) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeofenceResultSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeofenceResultSlice(dst, src []GeofenceResult) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeofenceResultTypeSupport types.MessageTypeSupport = _GeofenceResultTypeSupport{}

type _GeofenceResultTypeSupport struct{}

func (t _GeofenceResultTypeSupport) New() types.Message {
	return NewGeofenceResult()
}

func (t _GeofenceResultTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GeofenceResult
	return (unsafe.Pointer)(C.px4_msgs__msg__GeofenceResult__create())
}

func (t _GeofenceResultTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GeofenceResult__destroy((*C.px4_msgs__msg__GeofenceResult)(pointer_to_free))
}

func (t _GeofenceResultTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GeofenceResult)
	mem := (*C.px4_msgs__msg__GeofenceResult)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.geofence_max_dist_triggered = C.bool(m.GeofenceMaxDistTriggered)
	mem.geofence_max_alt_triggered = C.bool(m.GeofenceMaxAltTriggered)
	mem.geofence_custom_fence_triggered = C.bool(m.GeofenceCustomFenceTriggered)
	mem.geofence_action = C.uint8_t(m.GeofenceAction)
}

func (t _GeofenceResultTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeofenceResult)
	mem := (*C.px4_msgs__msg__GeofenceResult)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.GeofenceMaxDistTriggered = bool(mem.geofence_max_dist_triggered)
	m.GeofenceMaxAltTriggered = bool(mem.geofence_max_alt_triggered)
	m.GeofenceCustomFenceTriggered = bool(mem.geofence_custom_fence_triggered)
	m.GeofenceAction = uint8(mem.geofence_action)
}

func (t _GeofenceResultTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GeofenceResult())
}

type CGeofenceResult = C.px4_msgs__msg__GeofenceResult
type CGeofenceResult__Sequence = C.px4_msgs__msg__GeofenceResult__Sequence

func GeofenceResult__Sequence_to_Go(goSlice *[]GeofenceResult, cSlice CGeofenceResult__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeofenceResult, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeofenceResultTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GeofenceResult__Sequence_to_C(cSlice *CGeofenceResult__Sequence, goSlice []GeofenceResult) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GeofenceResult)(C.malloc(C.sizeof_struct_px4_msgs__msg__GeofenceResult * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeofenceResultTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GeofenceResult__Array_to_Go(goSlice []GeofenceResult, cSlice []CGeofenceResult) {
	for i := 0; i < len(cSlice); i++ {
		GeofenceResultTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GeofenceResult__Array_to_C(cSlice []CGeofenceResult, goSlice []GeofenceResult) {
	for i := 0; i < len(goSlice); i++ {
		GeofenceResultTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
