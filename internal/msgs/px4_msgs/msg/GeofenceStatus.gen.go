// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/geofence_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GeofenceStatus", GeofenceStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GeofenceStatus", GeofenceStatusTypeSupport)
}

const (
	GeofenceStatus_GF_STATUS_LOADING uint8 = 0
	GeofenceStatus_GF_STATUS_READY   uint8 = 1
)

type GeofenceStatus struct {
	Timestamp  uint64 `yaml:"timestamp"`   // time since system start (microseconds)
	GeofenceId uint32 `yaml:"geofence_id"` // loaded geofence id
	Status     uint8  `yaml:"status"`      // Current geofence status
}

// NewGeofenceStatus creates a new GeofenceStatus with default values.
func NewGeofenceStatus() *GeofenceStatus {
	self := GeofenceStatus{}
	self.SetDefaults()
	return &self
}

func (t *GeofenceStatus) Clone() *GeofenceStatus {
	c := &GeofenceStatus{}
	c.Timestamp = t.Timestamp
	c.GeofenceId = t.GeofenceId
	c.Status = t.Status
	return c
}

func (t *GeofenceStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GeofenceStatus) SetDefaults() {
	t.Timestamp = 0
	t.GeofenceId = 0
	t.Status = 0
}

func (t *GeofenceStatus) GetTypeSupport() types.MessageTypeSupport {
	return GeofenceStatusTypeSupport
}

// GeofenceStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GeofenceStatusPublisher struct {
	*rclgo.Publisher
}

// NewGeofenceStatusPublisher creates and returns a new publisher for the
// GeofenceStatus
func NewGeofenceStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GeofenceStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GeofenceStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GeofenceStatusPublisher{pub}, nil
}

func (p *GeofenceStatusPublisher) Publish(msg *GeofenceStatus) error {
	return p.Publisher.Publish(msg)
}

// GeofenceStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GeofenceStatusSubscription struct {
	*rclgo.Subscription
}

// GeofenceStatusSubscriptionCallback type is used to provide a subscription
// handler function for a GeofenceStatusSubscription.
type GeofenceStatusSubscriptionCallback func(msg *GeofenceStatus, info *rclgo.MessageInfo, err error)

// NewGeofenceStatusSubscription creates and returns a new subscription for the
// GeofenceStatus
func NewGeofenceStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GeofenceStatusSubscriptionCallback) (*GeofenceStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GeofenceStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GeofenceStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GeofenceStatusSubscription{sub}, nil
}

func (s *GeofenceStatusSubscription) TakeMessage(out *GeofenceStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGeofenceStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGeofenceStatusSlice(dst, src []GeofenceStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GeofenceStatusTypeSupport types.MessageTypeSupport = _GeofenceStatusTypeSupport{}

type _GeofenceStatusTypeSupport struct{}

func (t _GeofenceStatusTypeSupport) New() types.Message {
	return NewGeofenceStatus()
}

func (t _GeofenceStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GeofenceStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__GeofenceStatus__create())
}

func (t _GeofenceStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GeofenceStatus__destroy((*C.px4_msgs__msg__GeofenceStatus)(pointer_to_free))
}

func (t _GeofenceStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GeofenceStatus)
	mem := (*C.px4_msgs__msg__GeofenceStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.geofence_id = C.uint32_t(m.GeofenceId)
	mem.status = C.uint8_t(m.Status)
}

func (t _GeofenceStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GeofenceStatus)
	mem := (*C.px4_msgs__msg__GeofenceStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.GeofenceId = uint32(mem.geofence_id)
	m.Status = uint8(mem.status)
}

func (t _GeofenceStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GeofenceStatus())
}

type CGeofenceStatus = C.px4_msgs__msg__GeofenceStatus
type CGeofenceStatus__Sequence = C.px4_msgs__msg__GeofenceStatus__Sequence

func GeofenceStatus__Sequence_to_Go(goSlice *[]GeofenceStatus, cSlice CGeofenceStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GeofenceStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GeofenceStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GeofenceStatus__Sequence_to_C(cSlice *CGeofenceStatus__Sequence, goSlice []GeofenceStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GeofenceStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__GeofenceStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GeofenceStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GeofenceStatus__Array_to_Go(goSlice []GeofenceStatus, cSlice []CGeofenceStatus) {
	for i := 0; i < len(cSlice); i++ {
		GeofenceStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GeofenceStatus__Array_to_C(cSlice []CGeofenceStatus, goSlice []GeofenceStatus) {
	for i := 0; i < len(goSlice); i++ {
		GeofenceStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
