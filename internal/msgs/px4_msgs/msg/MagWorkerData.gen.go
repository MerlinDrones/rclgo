// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/mag_worker_data.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/MagWorkerData", MagWorkerDataTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/MagWorkerData", MagWorkerDataTypeSupport)
}

const (
	MagWorkerData_MAX_MAGS uint8 = 4
)

type MagWorkerData struct {
	Timestamp                    uint64     `yaml:"timestamp"` // time since system start (microseconds)
	TimestampSample              uint64     `yaml:"timestamp_sample"`
	DoneCount                    uint32     `yaml:"done_count"`
	CalibrationPointsPerside     uint32     `yaml:"calibration_points_perside"`
	CalibrationIntervalPersideUs uint64     `yaml:"calibration_interval_perside_us"`
	CalibrationCounterTotal      [4]uint32  `yaml:"calibration_counter_total"`
	SideDataCollected            [4]bool    `yaml:"side_data_collected"`
	X                            [4]float32 `yaml:"x"`
	Y                            [4]float32 `yaml:"y"`
	Z                            [4]float32 `yaml:"z"`
}

// NewMagWorkerData creates a new MagWorkerData with default values.
func NewMagWorkerData() *MagWorkerData {
	self := MagWorkerData{}
	self.SetDefaults()
	return &self
}

func (t *MagWorkerData) Clone() *MagWorkerData {
	c := &MagWorkerData{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.DoneCount = t.DoneCount
	c.CalibrationPointsPerside = t.CalibrationPointsPerside
	c.CalibrationIntervalPersideUs = t.CalibrationIntervalPersideUs
	c.CalibrationCounterTotal = t.CalibrationCounterTotal
	c.SideDataCollected = t.SideDataCollected
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	return c
}

func (t *MagWorkerData) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MagWorkerData) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.DoneCount = 0
	t.CalibrationPointsPerside = 0
	t.CalibrationIntervalPersideUs = 0
	t.CalibrationCounterTotal = [4]uint32{}
	t.SideDataCollected = [4]bool{}
	t.X = [4]float32{}
	t.Y = [4]float32{}
	t.Z = [4]float32{}
}

func (t *MagWorkerData) GetTypeSupport() types.MessageTypeSupport {
	return MagWorkerDataTypeSupport
}

// MagWorkerDataPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MagWorkerDataPublisher struct {
	*rclgo.Publisher
}

// NewMagWorkerDataPublisher creates and returns a new publisher for the
// MagWorkerData
func NewMagWorkerDataPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MagWorkerDataPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MagWorkerDataTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MagWorkerDataPublisher{pub}, nil
}

func (p *MagWorkerDataPublisher) Publish(msg *MagWorkerData) error {
	return p.Publisher.Publish(msg)
}

// MagWorkerDataSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MagWorkerDataSubscription struct {
	*rclgo.Subscription
}

// MagWorkerDataSubscriptionCallback type is used to provide a subscription
// handler function for a MagWorkerDataSubscription.
type MagWorkerDataSubscriptionCallback func(msg *MagWorkerData, info *rclgo.MessageInfo, err error)

// NewMagWorkerDataSubscription creates and returns a new subscription for the
// MagWorkerData
func NewMagWorkerDataSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MagWorkerDataSubscriptionCallback) (*MagWorkerDataSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MagWorkerData
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MagWorkerDataTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MagWorkerDataSubscription{sub}, nil
}

func (s *MagWorkerDataSubscription) TakeMessage(out *MagWorkerData) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMagWorkerDataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMagWorkerDataSlice(dst, src []MagWorkerData) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MagWorkerDataTypeSupport types.MessageTypeSupport = _MagWorkerDataTypeSupport{}

type _MagWorkerDataTypeSupport struct{}

func (t _MagWorkerDataTypeSupport) New() types.Message {
	return NewMagWorkerData()
}

func (t _MagWorkerDataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__MagWorkerData
	return (unsafe.Pointer)(C.px4_msgs__msg__MagWorkerData__create())
}

func (t _MagWorkerDataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__MagWorkerData__destroy((*C.px4_msgs__msg__MagWorkerData)(pointer_to_free))
}

func (t _MagWorkerDataTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MagWorkerData)
	mem := (*C.px4_msgs__msg__MagWorkerData)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.done_count = C.uint32_t(m.DoneCount)
	mem.calibration_points_perside = C.uint32_t(m.CalibrationPointsPerside)
	mem.calibration_interval_perside_us = C.uint64_t(m.CalibrationIntervalPersideUs)
	cSlice_calibration_counter_total := mem.calibration_counter_total[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_calibration_counter_total)), m.CalibrationCounterTotal[:])
	cSlice_side_data_collected := mem.side_data_collected[:]
	primitives.Bool__Array_to_C(*(*[]primitives.CBool)(unsafe.Pointer(&cSlice_side_data_collected)), m.SideDataCollected[:])
	cSlice_x := mem.x[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_x)), m.X[:])
	cSlice_y := mem.y[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_y)), m.Y[:])
	cSlice_z := mem.z[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_z)), m.Z[:])
}

func (t _MagWorkerDataTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MagWorkerData)
	mem := (*C.px4_msgs__msg__MagWorkerData)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.DoneCount = uint32(mem.done_count)
	m.CalibrationPointsPerside = uint32(mem.calibration_points_perside)
	m.CalibrationIntervalPersideUs = uint64(mem.calibration_interval_perside_us)
	cSlice_calibration_counter_total := mem.calibration_counter_total[:]
	primitives.Uint32__Array_to_Go(m.CalibrationCounterTotal[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_calibration_counter_total)))
	cSlice_side_data_collected := mem.side_data_collected[:]
	primitives.Bool__Array_to_Go(m.SideDataCollected[:], *(*[]primitives.CBool)(unsafe.Pointer(&cSlice_side_data_collected)))
	cSlice_x := mem.x[:]
	primitives.Float32__Array_to_Go(m.X[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_x)))
	cSlice_y := mem.y[:]
	primitives.Float32__Array_to_Go(m.Y[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_y)))
	cSlice_z := mem.z[:]
	primitives.Float32__Array_to_Go(m.Z[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_z)))
}

func (t _MagWorkerDataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__MagWorkerData())
}

type CMagWorkerData = C.px4_msgs__msg__MagWorkerData
type CMagWorkerData__Sequence = C.px4_msgs__msg__MagWorkerData__Sequence

func MagWorkerData__Sequence_to_Go(goSlice *[]MagWorkerData, cSlice CMagWorkerData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MagWorkerData, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MagWorkerDataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MagWorkerData__Sequence_to_C(cSlice *CMagWorkerData__Sequence, goSlice []MagWorkerData) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__MagWorkerData)(C.malloc(C.sizeof_struct_px4_msgs__msg__MagWorkerData * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MagWorkerDataTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MagWorkerData__Array_to_Go(goSlice []MagWorkerData, cSlice []CMagWorkerData) {
	for i := 0; i < len(cSlice); i++ {
		MagWorkerDataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MagWorkerData__Array_to_C(cSlice []CMagWorkerData, goSlice []MagWorkerData) {
	for i := 0; i < len(goSlice); i++ {
		MagWorkerDataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
