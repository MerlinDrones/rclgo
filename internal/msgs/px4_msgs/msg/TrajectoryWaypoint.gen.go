// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/trajectory_waypoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TrajectoryWaypoint", TrajectoryWaypointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/TrajectoryWaypoint", TrajectoryWaypointTypeSupport)
}

type TrajectoryWaypoint struct {
	Timestamp    uint64     `yaml:"timestamp"` // time since system start (microseconds)
	Position     [3]float32 `yaml:"position"`
	Velocity     [3]float32 `yaml:"velocity"`
	Acceleration [3]float32 `yaml:"acceleration"`
	Yaw          float32    `yaml:"yaw"`
	YawSpeed     float32    `yaml:"yaw_speed"`
	PointValid   bool       `yaml:"point_valid"`
	Type         uint8      `yaml:"type"`
}

// NewTrajectoryWaypoint creates a new TrajectoryWaypoint with default values.
func NewTrajectoryWaypoint() *TrajectoryWaypoint {
	self := TrajectoryWaypoint{}
	self.SetDefaults()
	return &self
}

func (t *TrajectoryWaypoint) Clone() *TrajectoryWaypoint {
	c := &TrajectoryWaypoint{}
	c.Timestamp = t.Timestamp
	c.Position = t.Position
	c.Velocity = t.Velocity
	c.Acceleration = t.Acceleration
	c.Yaw = t.Yaw
	c.YawSpeed = t.YawSpeed
	c.PointValid = t.PointValid
	c.Type = t.Type
	return c
}

func (t *TrajectoryWaypoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TrajectoryWaypoint) SetDefaults() {
	t.Timestamp = 0
	t.Position = [3]float32{}
	t.Velocity = [3]float32{}
	t.Acceleration = [3]float32{}
	t.Yaw = 0
	t.YawSpeed = 0
	t.PointValid = false
	t.Type = 0
}

func (t *TrajectoryWaypoint) GetTypeSupport() types.MessageTypeSupport {
	return TrajectoryWaypointTypeSupport
}

// TrajectoryWaypointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TrajectoryWaypointPublisher struct {
	*rclgo.Publisher
}

// NewTrajectoryWaypointPublisher creates and returns a new publisher for the
// TrajectoryWaypoint
func NewTrajectoryWaypointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TrajectoryWaypointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TrajectoryWaypointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TrajectoryWaypointPublisher{pub}, nil
}

func (p *TrajectoryWaypointPublisher) Publish(msg *TrajectoryWaypoint) error {
	return p.Publisher.Publish(msg)
}

// TrajectoryWaypointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TrajectoryWaypointSubscription struct {
	*rclgo.Subscription
}

// TrajectoryWaypointSubscriptionCallback type is used to provide a subscription
// handler function for a TrajectoryWaypointSubscription.
type TrajectoryWaypointSubscriptionCallback func(msg *TrajectoryWaypoint, info *rclgo.MessageInfo, err error)

// NewTrajectoryWaypointSubscription creates and returns a new subscription for the
// TrajectoryWaypoint
func NewTrajectoryWaypointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TrajectoryWaypointSubscriptionCallback) (*TrajectoryWaypointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TrajectoryWaypoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TrajectoryWaypointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TrajectoryWaypointSubscription{sub}, nil
}

func (s *TrajectoryWaypointSubscription) TakeMessage(out *TrajectoryWaypoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrajectoryWaypointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajectoryWaypointSlice(dst, src []TrajectoryWaypoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajectoryWaypointTypeSupport types.MessageTypeSupport = _TrajectoryWaypointTypeSupport{}

type _TrajectoryWaypointTypeSupport struct{}

func (t _TrajectoryWaypointTypeSupport) New() types.Message {
	return NewTrajectoryWaypoint()
}

func (t _TrajectoryWaypointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TrajectoryWaypoint
	return (unsafe.Pointer)(C.px4_msgs__msg__TrajectoryWaypoint__create())
}

func (t _TrajectoryWaypointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TrajectoryWaypoint__destroy((*C.px4_msgs__msg__TrajectoryWaypoint)(pointer_to_free))
}

func (t _TrajectoryWaypointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TrajectoryWaypoint)
	mem := (*C.px4_msgs__msg__TrajectoryWaypoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)), m.Position[:])
	cSlice_velocity := mem.velocity[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity)), m.Velocity[:])
	cSlice_acceleration := mem.acceleration[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_acceleration)), m.Acceleration[:])
	mem.yaw = C.float(m.Yaw)
	mem.yaw_speed = C.float(m.YawSpeed)
	mem.point_valid = C.bool(m.PointValid)
	mem._type = C.uint8_t(m.Type)
}

func (t _TrajectoryWaypointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TrajectoryWaypoint)
	mem := (*C.px4_msgs__msg__TrajectoryWaypoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_Go(m.Position[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)))
	cSlice_velocity := mem.velocity[:]
	primitives.Float32__Array_to_Go(m.Velocity[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity)))
	cSlice_acceleration := mem.acceleration[:]
	primitives.Float32__Array_to_Go(m.Acceleration[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_acceleration)))
	m.Yaw = float32(mem.yaw)
	m.YawSpeed = float32(mem.yaw_speed)
	m.PointValid = bool(mem.point_valid)
	m.Type = uint8(mem._type)
}

func (t _TrajectoryWaypointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TrajectoryWaypoint())
}

type CTrajectoryWaypoint = C.px4_msgs__msg__TrajectoryWaypoint
type CTrajectoryWaypoint__Sequence = C.px4_msgs__msg__TrajectoryWaypoint__Sequence

func TrajectoryWaypoint__Sequence_to_Go(goSlice *[]TrajectoryWaypoint, cSlice CTrajectoryWaypoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrajectoryWaypoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TrajectoryWaypointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TrajectoryWaypoint__Sequence_to_C(cSlice *CTrajectoryWaypoint__Sequence, goSlice []TrajectoryWaypoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TrajectoryWaypoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__TrajectoryWaypoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TrajectoryWaypointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TrajectoryWaypoint__Array_to_Go(goSlice []TrajectoryWaypoint, cSlice []CTrajectoryWaypoint) {
	for i := 0; i < len(cSlice); i++ {
		TrajectoryWaypointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TrajectoryWaypoint__Array_to_C(cSlice []CTrajectoryWaypoint, goSlice []TrajectoryWaypoint) {
	for i := 0; i < len(goSlice); i++ {
		TrajectoryWaypointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
