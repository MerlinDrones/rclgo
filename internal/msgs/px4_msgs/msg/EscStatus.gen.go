// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/esc_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/EscStatus", EscStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/EscStatus", EscStatusTypeSupport)
}

const (
	EscStatus_CONNECTED_ESC_MAX           uint8 = 8 // The number of ESCs supported. Current (Q2/2013) we support 8 ESCs
	EscStatus_ESC_CONNECTION_TYPE_PPM     uint8 = 0 // Traditional PPM ESC
	EscStatus_ESC_CONNECTION_TYPE_SERIAL  uint8 = 1 // Serial Bus connected ESC
	EscStatus_ESC_CONNECTION_TYPE_ONESHOT uint8 = 2 // One Shot PPM
	EscStatus_ESC_CONNECTION_TYPE_I2C     uint8 = 3 // I2C
	EscStatus_ESC_CONNECTION_TYPE_CAN     uint8 = 4 // CAN-Bus
	EscStatus_ESC_CONNECTION_TYPE_DSHOT   uint8 = 5 // DShot
)

type EscStatus struct {
	Timestamp         uint64       `yaml:"timestamp"`          // time since system start (microseconds)
	Counter           uint16       `yaml:"counter"`            // incremented by the writing thread everytime new data is stored
	EscCount          uint8        `yaml:"esc_count"`          // number of connected ESCs
	EscConnectiontype uint8        `yaml:"esc_connectiontype"` // how ESCs connected to the system
	EscOnlineFlags    uint8        `yaml:"esc_online_flags"`   // Bitmask indicating which ESC is online/offline
	EscArmedFlags     uint8        `yaml:"esc_armed_flags"`    // Bitmask indicating which ESC is armed. For ESC's where the arming state is not known (returned by the ESC), the arming bits should always be set.
	Esc               [8]EscReport `yaml:"esc"`
}

// NewEscStatus creates a new EscStatus with default values.
func NewEscStatus() *EscStatus {
	self := EscStatus{}
	self.SetDefaults()
	return &self
}

func (t *EscStatus) Clone() *EscStatus {
	c := &EscStatus{}
	c.Timestamp = t.Timestamp
	c.Counter = t.Counter
	c.EscCount = t.EscCount
	c.EscConnectiontype = t.EscConnectiontype
	c.EscOnlineFlags = t.EscOnlineFlags
	c.EscArmedFlags = t.EscArmedFlags
	CloneEscReportSlice(c.Esc[:], t.Esc[:])
	return c
}

func (t *EscStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EscStatus) SetDefaults() {
	t.Timestamp = 0
	t.Counter = 0
	t.EscCount = 0
	t.EscConnectiontype = 0
	t.EscOnlineFlags = 0
	t.EscArmedFlags = 0
	for i := range t.Esc {
		t.Esc[i].SetDefaults()
	}
}

func (t *EscStatus) GetTypeSupport() types.MessageTypeSupport {
	return EscStatusTypeSupport
}

// EscStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EscStatusPublisher struct {
	*rclgo.Publisher
}

// NewEscStatusPublisher creates and returns a new publisher for the
// EscStatus
func NewEscStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EscStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EscStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EscStatusPublisher{pub}, nil
}

func (p *EscStatusPublisher) Publish(msg *EscStatus) error {
	return p.Publisher.Publish(msg)
}

// EscStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EscStatusSubscription struct {
	*rclgo.Subscription
}

// EscStatusSubscriptionCallback type is used to provide a subscription
// handler function for a EscStatusSubscription.
type EscStatusSubscriptionCallback func(msg *EscStatus, info *rclgo.MessageInfo, err error)

// NewEscStatusSubscription creates and returns a new subscription for the
// EscStatus
func NewEscStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EscStatusSubscriptionCallback) (*EscStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg EscStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EscStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EscStatusSubscription{sub}, nil
}

func (s *EscStatusSubscription) TakeMessage(out *EscStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEscStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEscStatusSlice(dst, src []EscStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EscStatusTypeSupport types.MessageTypeSupport = _EscStatusTypeSupport{}

type _EscStatusTypeSupport struct{}

func (t _EscStatusTypeSupport) New() types.Message {
	return NewEscStatus()
}

func (t _EscStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EscStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__EscStatus__create())
}

func (t _EscStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EscStatus__destroy((*C.px4_msgs__msg__EscStatus)(pointer_to_free))
}

func (t _EscStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EscStatus)
	mem := (*C.px4_msgs__msg__EscStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.counter = C.uint16_t(m.Counter)
	mem.esc_count = C.uint8_t(m.EscCount)
	mem.esc_connectiontype = C.uint8_t(m.EscConnectiontype)
	mem.esc_online_flags = C.uint8_t(m.EscOnlineFlags)
	mem.esc_armed_flags = C.uint8_t(m.EscArmedFlags)
	EscReport__Array_to_C(mem.esc[:], m.Esc[:])
}

func (t _EscStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EscStatus)
	mem := (*C.px4_msgs__msg__EscStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Counter = uint16(mem.counter)
	m.EscCount = uint8(mem.esc_count)
	m.EscConnectiontype = uint8(mem.esc_connectiontype)
	m.EscOnlineFlags = uint8(mem.esc_online_flags)
	m.EscArmedFlags = uint8(mem.esc_armed_flags)
	EscReport__Array_to_Go(m.Esc[:], mem.esc[:])
}

func (t _EscStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EscStatus())
}

type CEscStatus = C.px4_msgs__msg__EscStatus
type CEscStatus__Sequence = C.px4_msgs__msg__EscStatus__Sequence

func EscStatus__Sequence_to_Go(goSlice *[]EscStatus, cSlice CEscStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EscStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EscStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func EscStatus__Sequence_to_C(cSlice *CEscStatus__Sequence, goSlice []EscStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EscStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__EscStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EscStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func EscStatus__Array_to_Go(goSlice []EscStatus, cSlice []CEscStatus) {
	for i := 0; i < len(cSlice); i++ {
		EscStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EscStatus__Array_to_C(cSlice []CEscStatus, goSlice []EscStatus) {
	for i := 0; i < len(goSlice); i++ {
		EscStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
