// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/figure_eight_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/FigureEightStatus", FigureEightStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/FigureEightStatus", FigureEightStatusTypeSupport)
}

type FigureEightStatus struct {
	Timestamp   uint64  `yaml:"timestamp"`    // time since system start (microseconds)
	MajorRadius float32 `yaml:"major_radius"` // Major axis radius of the figure eight [m]. Positive values orbit clockwise, negative values orbit counter-clockwise.
	MinorRadius float32 `yaml:"minor_radius"` // Minor axis radius of the figure eight [m].
	Orientation float32 `yaml:"orientation"`  // Orientation of the major axis of the figure eight [rad].
	Frame       uint8   `yaml:"frame"`        // The coordinate system of the fields: x, y, z.
	X           int32   `yaml:"x"`            // X coordinate of center point. Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.
	Y           int32   `yaml:"y"`            // Y coordinate of center point. Coordinate system depends on frame field: local = y position in meters * 1e4, global = latitude in degrees * 1e7.
	Z           float32 `yaml:"z"`            // Altitude of center point. Coordinate system depends on frame field.
}

// NewFigureEightStatus creates a new FigureEightStatus with default values.
func NewFigureEightStatus() *FigureEightStatus {
	self := FigureEightStatus{}
	self.SetDefaults()
	return &self
}

func (t *FigureEightStatus) Clone() *FigureEightStatus {
	c := &FigureEightStatus{}
	c.Timestamp = t.Timestamp
	c.MajorRadius = t.MajorRadius
	c.MinorRadius = t.MinorRadius
	c.Orientation = t.Orientation
	c.Frame = t.Frame
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	return c
}

func (t *FigureEightStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *FigureEightStatus) SetDefaults() {
	t.Timestamp = 0
	t.MajorRadius = 0
	t.MinorRadius = 0
	t.Orientation = 0
	t.Frame = 0
	t.X = 0
	t.Y = 0
	t.Z = 0
}

func (t *FigureEightStatus) GetTypeSupport() types.MessageTypeSupport {
	return FigureEightStatusTypeSupport
}

// FigureEightStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FigureEightStatusPublisher struct {
	*rclgo.Publisher
}

// NewFigureEightStatusPublisher creates and returns a new publisher for the
// FigureEightStatus
func NewFigureEightStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FigureEightStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FigureEightStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FigureEightStatusPublisher{pub}, nil
}

func (p *FigureEightStatusPublisher) Publish(msg *FigureEightStatus) error {
	return p.Publisher.Publish(msg)
}

// FigureEightStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FigureEightStatusSubscription struct {
	*rclgo.Subscription
}

// FigureEightStatusSubscriptionCallback type is used to provide a subscription
// handler function for a FigureEightStatusSubscription.
type FigureEightStatusSubscriptionCallback func(msg *FigureEightStatus, info *rclgo.MessageInfo, err error)

// NewFigureEightStatusSubscription creates and returns a new subscription for the
// FigureEightStatus
func NewFigureEightStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FigureEightStatusSubscriptionCallback) (*FigureEightStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg FigureEightStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FigureEightStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FigureEightStatusSubscription{sub}, nil
}

func (s *FigureEightStatusSubscription) TakeMessage(out *FigureEightStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFigureEightStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFigureEightStatusSlice(dst, src []FigureEightStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FigureEightStatusTypeSupport types.MessageTypeSupport = _FigureEightStatusTypeSupport{}

type _FigureEightStatusTypeSupport struct{}

func (t _FigureEightStatusTypeSupport) New() types.Message {
	return NewFigureEightStatus()
}

func (t _FigureEightStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__FigureEightStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__FigureEightStatus__create())
}

func (t _FigureEightStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__FigureEightStatus__destroy((*C.px4_msgs__msg__FigureEightStatus)(pointer_to_free))
}

func (t _FigureEightStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*FigureEightStatus)
	mem := (*C.px4_msgs__msg__FigureEightStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.major_radius = C.float(m.MajorRadius)
	mem.minor_radius = C.float(m.MinorRadius)
	mem.orientation = C.float(m.Orientation)
	mem.frame = C.uint8_t(m.Frame)
	mem.x = C.int32_t(m.X)
	mem.y = C.int32_t(m.Y)
	mem.z = C.float(m.Z)
}

func (t _FigureEightStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FigureEightStatus)
	mem := (*C.px4_msgs__msg__FigureEightStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.MajorRadius = float32(mem.major_radius)
	m.MinorRadius = float32(mem.minor_radius)
	m.Orientation = float32(mem.orientation)
	m.Frame = uint8(mem.frame)
	m.X = int32(mem.x)
	m.Y = int32(mem.y)
	m.Z = float32(mem.z)
}

func (t _FigureEightStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__FigureEightStatus())
}

type CFigureEightStatus = C.px4_msgs__msg__FigureEightStatus
type CFigureEightStatus__Sequence = C.px4_msgs__msg__FigureEightStatus__Sequence

func FigureEightStatus__Sequence_to_Go(goSlice *[]FigureEightStatus, cSlice CFigureEightStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FigureEightStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FigureEightStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func FigureEightStatus__Sequence_to_C(cSlice *CFigureEightStatus__Sequence, goSlice []FigureEightStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__FigureEightStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__FigureEightStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FigureEightStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func FigureEightStatus__Array_to_Go(goSlice []FigureEightStatus, cSlice []CFigureEightStatus) {
	for i := 0; i < len(cSlice); i++ {
		FigureEightStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func FigureEightStatus__Array_to_C(cSlice []CFigureEightStatus, goSlice []FigureEightStatus) {
	for i := 0; i < len(goSlice); i++ {
		FigureEightStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
