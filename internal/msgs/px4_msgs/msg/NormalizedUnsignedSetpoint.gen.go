// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/normalized_unsigned_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/NormalizedUnsignedSetpoint", NormalizedUnsignedSetpointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/NormalizedUnsignedSetpoint", NormalizedUnsignedSetpointTypeSupport)
}

type NormalizedUnsignedSetpoint struct {
	Timestamp          uint64  `yaml:"timestamp"`           // time since system start (microseconds)
	NormalizedSetpoint float32 `yaml:"normalized_setpoint"` // [0, 1]
}

// NewNormalizedUnsignedSetpoint creates a new NormalizedUnsignedSetpoint with default values.
func NewNormalizedUnsignedSetpoint() *NormalizedUnsignedSetpoint {
	self := NormalizedUnsignedSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *NormalizedUnsignedSetpoint) Clone() *NormalizedUnsignedSetpoint {
	c := &NormalizedUnsignedSetpoint{}
	c.Timestamp = t.Timestamp
	c.NormalizedSetpoint = t.NormalizedSetpoint
	return c
}

func (t *NormalizedUnsignedSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *NormalizedUnsignedSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.NormalizedSetpoint = 0
}

func (t *NormalizedUnsignedSetpoint) GetTypeSupport() types.MessageTypeSupport {
	return NormalizedUnsignedSetpointTypeSupport
}

// NormalizedUnsignedSetpointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type NormalizedUnsignedSetpointPublisher struct {
	*rclgo.Publisher
}

// NewNormalizedUnsignedSetpointPublisher creates and returns a new publisher for the
// NormalizedUnsignedSetpoint
func NewNormalizedUnsignedSetpointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*NormalizedUnsignedSetpointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, NormalizedUnsignedSetpointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NormalizedUnsignedSetpointPublisher{pub}, nil
}

func (p *NormalizedUnsignedSetpointPublisher) Publish(msg *NormalizedUnsignedSetpoint) error {
	return p.Publisher.Publish(msg)
}

// NormalizedUnsignedSetpointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type NormalizedUnsignedSetpointSubscription struct {
	*rclgo.Subscription
}

// NormalizedUnsignedSetpointSubscriptionCallback type is used to provide a subscription
// handler function for a NormalizedUnsignedSetpointSubscription.
type NormalizedUnsignedSetpointSubscriptionCallback func(msg *NormalizedUnsignedSetpoint, info *rclgo.MessageInfo, err error)

// NewNormalizedUnsignedSetpointSubscription creates and returns a new subscription for the
// NormalizedUnsignedSetpoint
func NewNormalizedUnsignedSetpointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback NormalizedUnsignedSetpointSubscriptionCallback) (*NormalizedUnsignedSetpointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg NormalizedUnsignedSetpoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, NormalizedUnsignedSetpointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &NormalizedUnsignedSetpointSubscription{sub}, nil
}

func (s *NormalizedUnsignedSetpointSubscription) TakeMessage(out *NormalizedUnsignedSetpoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneNormalizedUnsignedSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNormalizedUnsignedSetpointSlice(dst, src []NormalizedUnsignedSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NormalizedUnsignedSetpointTypeSupport types.MessageTypeSupport = _NormalizedUnsignedSetpointTypeSupport{}

type _NormalizedUnsignedSetpointTypeSupport struct{}

func (t _NormalizedUnsignedSetpointTypeSupport) New() types.Message {
	return NewNormalizedUnsignedSetpoint()
}

func (t _NormalizedUnsignedSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__NormalizedUnsignedSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__NormalizedUnsignedSetpoint__create())
}

func (t _NormalizedUnsignedSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__NormalizedUnsignedSetpoint__destroy((*C.px4_msgs__msg__NormalizedUnsignedSetpoint)(pointer_to_free))
}

func (t _NormalizedUnsignedSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*NormalizedUnsignedSetpoint)
	mem := (*C.px4_msgs__msg__NormalizedUnsignedSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.normalized_setpoint = C.float(m.NormalizedSetpoint)
}

func (t _NormalizedUnsignedSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NormalizedUnsignedSetpoint)
	mem := (*C.px4_msgs__msg__NormalizedUnsignedSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.NormalizedSetpoint = float32(mem.normalized_setpoint)
}

func (t _NormalizedUnsignedSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__NormalizedUnsignedSetpoint())
}

type CNormalizedUnsignedSetpoint = C.px4_msgs__msg__NormalizedUnsignedSetpoint
type CNormalizedUnsignedSetpoint__Sequence = C.px4_msgs__msg__NormalizedUnsignedSetpoint__Sequence

func NormalizedUnsignedSetpoint__Sequence_to_Go(goSlice *[]NormalizedUnsignedSetpoint, cSlice CNormalizedUnsignedSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NormalizedUnsignedSetpoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		NormalizedUnsignedSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func NormalizedUnsignedSetpoint__Sequence_to_C(cSlice *CNormalizedUnsignedSetpoint__Sequence, goSlice []NormalizedUnsignedSetpoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__NormalizedUnsignedSetpoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__NormalizedUnsignedSetpoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		NormalizedUnsignedSetpointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func NormalizedUnsignedSetpoint__Array_to_Go(goSlice []NormalizedUnsignedSetpoint, cSlice []CNormalizedUnsignedSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		NormalizedUnsignedSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func NormalizedUnsignedSetpoint__Array_to_C(cSlice []CNormalizedUnsignedSetpoint, goSlice []NormalizedUnsignedSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		NormalizedUnsignedSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
