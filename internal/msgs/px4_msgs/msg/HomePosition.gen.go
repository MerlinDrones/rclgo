// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/home_position.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/HomePosition", HomePositionTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/HomePosition", HomePositionTypeSupport)
}

type HomePosition struct {
	Timestamp   uint64  `yaml:"timestamp"`    // time since system start (microseconds)
	Lat         float64 `yaml:"lat"`          // Latitude in degrees
	Lon         float64 `yaml:"lon"`          // Longitude in degrees
	Alt         float32 `yaml:"alt"`          // Altitude in meters (AMSL)
	X           float32 `yaml:"x"`            // X coordinate in meters
	Y           float32 `yaml:"y"`            // Y coordinate in meters
	Z           float32 `yaml:"z"`            // Z coordinate in meters
	Yaw         float32 `yaml:"yaw"`          // Yaw angle in radians
	ValidAlt    bool    `yaml:"valid_alt"`    // true when the altitude has been set
	ValidHpos   bool    `yaml:"valid_hpos"`   // true when the latitude and longitude have been set
	ValidLpos   bool    `yaml:"valid_lpos"`   // true when the local position (xyz) has been set
	ManualHome  bool    `yaml:"manual_home"`  // true when home position was set manually
	UpdateCount uint32  `yaml:"update_count"` // update counter of the home position
}

// NewHomePosition creates a new HomePosition with default values.
func NewHomePosition() *HomePosition {
	self := HomePosition{}
	self.SetDefaults()
	return &self
}

func (t *HomePosition) Clone() *HomePosition {
	c := &HomePosition{}
	c.Timestamp = t.Timestamp
	c.Lat = t.Lat
	c.Lon = t.Lon
	c.Alt = t.Alt
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	c.Yaw = t.Yaw
	c.ValidAlt = t.ValidAlt
	c.ValidHpos = t.ValidHpos
	c.ValidLpos = t.ValidLpos
	c.ManualHome = t.ManualHome
	c.UpdateCount = t.UpdateCount
	return c
}

func (t *HomePosition) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HomePosition) SetDefaults() {
	t.Timestamp = 0
	t.Lat = 0
	t.Lon = 0
	t.Alt = 0
	t.X = 0
	t.Y = 0
	t.Z = 0
	t.Yaw = 0
	t.ValidAlt = false
	t.ValidHpos = false
	t.ValidLpos = false
	t.ManualHome = false
	t.UpdateCount = 0
}

func (t *HomePosition) GetTypeSupport() types.MessageTypeSupport {
	return HomePositionTypeSupport
}

// HomePositionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HomePositionPublisher struct {
	*rclgo.Publisher
}

// NewHomePositionPublisher creates and returns a new publisher for the
// HomePosition
func NewHomePositionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HomePositionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, HomePositionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HomePositionPublisher{pub}, nil
}

func (p *HomePositionPublisher) Publish(msg *HomePosition) error {
	return p.Publisher.Publish(msg)
}

// HomePositionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HomePositionSubscription struct {
	*rclgo.Subscription
}

// HomePositionSubscriptionCallback type is used to provide a subscription
// handler function for a HomePositionSubscription.
type HomePositionSubscriptionCallback func(msg *HomePosition, info *rclgo.MessageInfo, err error)

// NewHomePositionSubscription creates and returns a new subscription for the
// HomePosition
func NewHomePositionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HomePositionSubscriptionCallback) (*HomePositionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HomePosition
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HomePositionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HomePositionSubscription{sub}, nil
}

func (s *HomePositionSubscription) TakeMessage(out *HomePosition) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHomePositionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHomePositionSlice(dst, src []HomePosition) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HomePositionTypeSupport types.MessageTypeSupport = _HomePositionTypeSupport{}

type _HomePositionTypeSupport struct{}

func (t _HomePositionTypeSupport) New() types.Message {
	return NewHomePosition()
}

func (t _HomePositionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__HomePosition
	return (unsafe.Pointer)(C.px4_msgs__msg__HomePosition__create())
}

func (t _HomePositionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__HomePosition__destroy((*C.px4_msgs__msg__HomePosition)(pointer_to_free))
}

func (t _HomePositionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HomePosition)
	mem := (*C.px4_msgs__msg__HomePosition)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.lat = C.double(m.Lat)
	mem.lon = C.double(m.Lon)
	mem.alt = C.float(m.Alt)
	mem.x = C.float(m.X)
	mem.y = C.float(m.Y)
	mem.z = C.float(m.Z)
	mem.yaw = C.float(m.Yaw)
	mem.valid_alt = C.bool(m.ValidAlt)
	mem.valid_hpos = C.bool(m.ValidHpos)
	mem.valid_lpos = C.bool(m.ValidLpos)
	mem.manual_home = C.bool(m.ManualHome)
	mem.update_count = C.uint32_t(m.UpdateCount)
}

func (t _HomePositionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HomePosition)
	mem := (*C.px4_msgs__msg__HomePosition)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Lat = float64(mem.lat)
	m.Lon = float64(mem.lon)
	m.Alt = float32(mem.alt)
	m.X = float32(mem.x)
	m.Y = float32(mem.y)
	m.Z = float32(mem.z)
	m.Yaw = float32(mem.yaw)
	m.ValidAlt = bool(mem.valid_alt)
	m.ValidHpos = bool(mem.valid_hpos)
	m.ValidLpos = bool(mem.valid_lpos)
	m.ManualHome = bool(mem.manual_home)
	m.UpdateCount = uint32(mem.update_count)
}

func (t _HomePositionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__HomePosition())
}

type CHomePosition = C.px4_msgs__msg__HomePosition
type CHomePosition__Sequence = C.px4_msgs__msg__HomePosition__Sequence

func HomePosition__Sequence_to_Go(goSlice *[]HomePosition, cSlice CHomePosition__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HomePosition, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HomePositionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HomePosition__Sequence_to_C(cSlice *CHomePosition__Sequence, goSlice []HomePosition) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__HomePosition)(C.malloc(C.sizeof_struct_px4_msgs__msg__HomePosition * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HomePositionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HomePosition__Array_to_Go(goSlice []HomePosition, cSlice []CHomePosition) {
	for i := 0; i < len(cSlice); i++ {
		HomePositionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HomePosition__Array_to_C(cSlice []CHomePosition, goSlice []HomePosition) {
	for i := 0; i < len(goSlice); i++ {
		HomePositionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
