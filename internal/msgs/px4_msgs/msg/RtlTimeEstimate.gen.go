// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rtl_time_estimate.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RtlTimeEstimate", RtlTimeEstimateTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RtlTimeEstimate", RtlTimeEstimateTypeSupport)
}

type RtlTimeEstimate struct {
	Timestamp        uint64  `yaml:"timestamp"`          // time since system start (microseconds)
	Valid            bool    `yaml:"valid"`              // Flag indicating whether the time estiamtes are valid
	TimeEstimate     float32 `yaml:"time_estimate"`      // [s] Estimated time for RTL
	SafeTimeEstimate float32 `yaml:"safe_time_estimate"` // [s] Same as time_estimate, but with safety factor and safety margin included (factor*t + margin)
}

// NewRtlTimeEstimate creates a new RtlTimeEstimate with default values.
func NewRtlTimeEstimate() *RtlTimeEstimate {
	self := RtlTimeEstimate{}
	self.SetDefaults()
	return &self
}

func (t *RtlTimeEstimate) Clone() *RtlTimeEstimate {
	c := &RtlTimeEstimate{}
	c.Timestamp = t.Timestamp
	c.Valid = t.Valid
	c.TimeEstimate = t.TimeEstimate
	c.SafeTimeEstimate = t.SafeTimeEstimate
	return c
}

func (t *RtlTimeEstimate) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RtlTimeEstimate) SetDefaults() {
	t.Timestamp = 0
	t.Valid = false
	t.TimeEstimate = 0
	t.SafeTimeEstimate = 0
}

func (t *RtlTimeEstimate) GetTypeSupport() types.MessageTypeSupport {
	return RtlTimeEstimateTypeSupport
}

// RtlTimeEstimatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RtlTimeEstimatePublisher struct {
	*rclgo.Publisher
}

// NewRtlTimeEstimatePublisher creates and returns a new publisher for the
// RtlTimeEstimate
func NewRtlTimeEstimatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RtlTimeEstimatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, RtlTimeEstimateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RtlTimeEstimatePublisher{pub}, nil
}

func (p *RtlTimeEstimatePublisher) Publish(msg *RtlTimeEstimate) error {
	return p.Publisher.Publish(msg)
}

// RtlTimeEstimateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RtlTimeEstimateSubscription struct {
	*rclgo.Subscription
}

// RtlTimeEstimateSubscriptionCallback type is used to provide a subscription
// handler function for a RtlTimeEstimateSubscription.
type RtlTimeEstimateSubscriptionCallback func(msg *RtlTimeEstimate, info *rclgo.MessageInfo, err error)

// NewRtlTimeEstimateSubscription creates and returns a new subscription for the
// RtlTimeEstimate
func NewRtlTimeEstimateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RtlTimeEstimateSubscriptionCallback) (*RtlTimeEstimateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RtlTimeEstimate
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RtlTimeEstimateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RtlTimeEstimateSubscription{sub}, nil
}

func (s *RtlTimeEstimateSubscription) TakeMessage(out *RtlTimeEstimate) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRtlTimeEstimateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRtlTimeEstimateSlice(dst, src []RtlTimeEstimate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RtlTimeEstimateTypeSupport types.MessageTypeSupport = _RtlTimeEstimateTypeSupport{}

type _RtlTimeEstimateTypeSupport struct{}

func (t _RtlTimeEstimateTypeSupport) New() types.Message {
	return NewRtlTimeEstimate()
}

func (t _RtlTimeEstimateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RtlTimeEstimate
	return (unsafe.Pointer)(C.px4_msgs__msg__RtlTimeEstimate__create())
}

func (t _RtlTimeEstimateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RtlTimeEstimate__destroy((*C.px4_msgs__msg__RtlTimeEstimate)(pointer_to_free))
}

func (t _RtlTimeEstimateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RtlTimeEstimate)
	mem := (*C.px4_msgs__msg__RtlTimeEstimate)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.valid = C.bool(m.Valid)
	mem.time_estimate = C.float(m.TimeEstimate)
	mem.safe_time_estimate = C.float(m.SafeTimeEstimate)
}

func (t _RtlTimeEstimateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RtlTimeEstimate)
	mem := (*C.px4_msgs__msg__RtlTimeEstimate)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Valid = bool(mem.valid)
	m.TimeEstimate = float32(mem.time_estimate)
	m.SafeTimeEstimate = float32(mem.safe_time_estimate)
}

func (t _RtlTimeEstimateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RtlTimeEstimate())
}

type CRtlTimeEstimate = C.px4_msgs__msg__RtlTimeEstimate
type CRtlTimeEstimate__Sequence = C.px4_msgs__msg__RtlTimeEstimate__Sequence

func RtlTimeEstimate__Sequence_to_Go(goSlice *[]RtlTimeEstimate, cSlice CRtlTimeEstimate__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RtlTimeEstimate, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RtlTimeEstimateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RtlTimeEstimate__Sequence_to_C(cSlice *CRtlTimeEstimate__Sequence, goSlice []RtlTimeEstimate) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RtlTimeEstimate)(C.malloc(C.sizeof_struct_px4_msgs__msg__RtlTimeEstimate * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RtlTimeEstimateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RtlTimeEstimate__Array_to_Go(goSlice []RtlTimeEstimate, cSlice []CRtlTimeEstimate) {
	for i := 0; i < len(cSlice); i++ {
		RtlTimeEstimateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RtlTimeEstimate__Array_to_C(cSlice []CRtlTimeEstimate, goSlice []RtlTimeEstimate) {
	for i := 0; i < len(goSlice); i++ {
		RtlTimeEstimateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
