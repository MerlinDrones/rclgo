// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_rates_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleRatesSetpoint", VehicleRatesSetpointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleRatesSetpoint", VehicleRatesSetpointTypeSupport)
}

type VehicleRatesSetpoint struct {
	Timestamp     uint64     `yaml:"timestamp"`      // time since system start (microseconds)
	Roll          float32    `yaml:"roll"`           // [rad/s] roll rate setpoint. body angular rates in FRD frame
	Pitch         float32    `yaml:"pitch"`          // [rad/s] pitch rate setpoint
	Yaw           float32    `yaml:"yaw"`            // [rad/s] yaw rate setpoint
	ThrustBody    [3]float32 `yaml:"thrust_body"`    // Normalized thrust command in body NED frame [-1,1]. For clarification: For multicopters thrust_body[0] and thrust[1] are usually 0 and thrust[2] is the negative throttle demand.For fixed wings thrust_x is the throttle demand and thrust_y, thrust_z will usually be zero.
	ResetIntegral bool       `yaml:"reset_integral"` // Reset roll/pitch/yaw integrals (navigation logic change)
}

// NewVehicleRatesSetpoint creates a new VehicleRatesSetpoint with default values.
func NewVehicleRatesSetpoint() *VehicleRatesSetpoint {
	self := VehicleRatesSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *VehicleRatesSetpoint) Clone() *VehicleRatesSetpoint {
	c := &VehicleRatesSetpoint{}
	c.Timestamp = t.Timestamp
	c.Roll = t.Roll
	c.Pitch = t.Pitch
	c.Yaw = t.Yaw
	c.ThrustBody = t.ThrustBody
	c.ResetIntegral = t.ResetIntegral
	return c
}

func (t *VehicleRatesSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleRatesSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.Roll = 0
	t.Pitch = 0
	t.Yaw = 0
	t.ThrustBody = [3]float32{}
	t.ResetIntegral = false
}

func (t *VehicleRatesSetpoint) GetTypeSupport() types.MessageTypeSupport {
	return VehicleRatesSetpointTypeSupport
}

// VehicleRatesSetpointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleRatesSetpointPublisher struct {
	*rclgo.Publisher
}

// NewVehicleRatesSetpointPublisher creates and returns a new publisher for the
// VehicleRatesSetpoint
func NewVehicleRatesSetpointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleRatesSetpointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleRatesSetpointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleRatesSetpointPublisher{pub}, nil
}

func (p *VehicleRatesSetpointPublisher) Publish(msg *VehicleRatesSetpoint) error {
	return p.Publisher.Publish(msg)
}

// VehicleRatesSetpointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleRatesSetpointSubscription struct {
	*rclgo.Subscription
}

// VehicleRatesSetpointSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleRatesSetpointSubscription.
type VehicleRatesSetpointSubscriptionCallback func(msg *VehicleRatesSetpoint, info *rclgo.MessageInfo, err error)

// NewVehicleRatesSetpointSubscription creates and returns a new subscription for the
// VehicleRatesSetpoint
func NewVehicleRatesSetpointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleRatesSetpointSubscriptionCallback) (*VehicleRatesSetpointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleRatesSetpoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleRatesSetpointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleRatesSetpointSubscription{sub}, nil
}

func (s *VehicleRatesSetpointSubscription) TakeMessage(out *VehicleRatesSetpoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleRatesSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleRatesSetpointSlice(dst, src []VehicleRatesSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleRatesSetpointTypeSupport types.MessageTypeSupport = _VehicleRatesSetpointTypeSupport{}

type _VehicleRatesSetpointTypeSupport struct{}

func (t _VehicleRatesSetpointTypeSupport) New() types.Message {
	return NewVehicleRatesSetpoint()
}

func (t _VehicleRatesSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleRatesSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleRatesSetpoint__create())
}

func (t _VehicleRatesSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleRatesSetpoint__destroy((*C.px4_msgs__msg__VehicleRatesSetpoint)(pointer_to_free))
}

func (t _VehicleRatesSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleRatesSetpoint)
	mem := (*C.px4_msgs__msg__VehicleRatesSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.roll = C.float(m.Roll)
	mem.pitch = C.float(m.Pitch)
	mem.yaw = C.float(m.Yaw)
	cSlice_thrust_body := mem.thrust_body[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_thrust_body)), m.ThrustBody[:])
	mem.reset_integral = C.bool(m.ResetIntegral)
}

func (t _VehicleRatesSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleRatesSetpoint)
	mem := (*C.px4_msgs__msg__VehicleRatesSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Roll = float32(mem.roll)
	m.Pitch = float32(mem.pitch)
	m.Yaw = float32(mem.yaw)
	cSlice_thrust_body := mem.thrust_body[:]
	primitives.Float32__Array_to_Go(m.ThrustBody[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_thrust_body)))
	m.ResetIntegral = bool(mem.reset_integral)
}

func (t _VehicleRatesSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleRatesSetpoint())
}

type CVehicleRatesSetpoint = C.px4_msgs__msg__VehicleRatesSetpoint
type CVehicleRatesSetpoint__Sequence = C.px4_msgs__msg__VehicleRatesSetpoint__Sequence

func VehicleRatesSetpoint__Sequence_to_Go(goSlice *[]VehicleRatesSetpoint, cSlice CVehicleRatesSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleRatesSetpoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleRatesSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleRatesSetpoint__Sequence_to_C(cSlice *CVehicleRatesSetpoint__Sequence, goSlice []VehicleRatesSetpoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleRatesSetpoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleRatesSetpoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleRatesSetpointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleRatesSetpoint__Array_to_Go(goSlice []VehicleRatesSetpoint, cSlice []CVehicleRatesSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		VehicleRatesSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleRatesSetpoint__Array_to_C(cSlice []CVehicleRatesSetpoint, goSlice []VehicleRatesSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		VehicleRatesSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
