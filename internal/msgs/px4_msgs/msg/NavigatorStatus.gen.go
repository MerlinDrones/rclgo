// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/navigator_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/NavigatorStatus", NavigatorStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/NavigatorStatus", NavigatorStatusTypeSupport)
}

const (
	NavigatorStatus_FAILURE_NONE uint8 = 0
	NavigatorStatus_FAILURE_HAGL uint8 = 1 // Target altitude exceeds maximum height above ground
)

type NavigatorStatus struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds). Current status of a Navigator modeThe possible values of nav_state are defined in the VehicleStatus msg.
	NavState  uint8  `yaml:"nav_state"` // Source mode (values in VehicleStatus)
	Failure   uint8  `yaml:"failure"`   // Navigator failure enum
}

// NewNavigatorStatus creates a new NavigatorStatus with default values.
func NewNavigatorStatus() *NavigatorStatus {
	self := NavigatorStatus{}
	self.SetDefaults()
	return &self
}

func (t *NavigatorStatus) Clone() *NavigatorStatus {
	c := &NavigatorStatus{}
	c.Timestamp = t.Timestamp
	c.NavState = t.NavState
	c.Failure = t.Failure
	return c
}

func (t *NavigatorStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *NavigatorStatus) SetDefaults() {
	t.Timestamp = 0
	t.NavState = 0
	t.Failure = 0
}

func (t *NavigatorStatus) GetTypeSupport() types.MessageTypeSupport {
	return NavigatorStatusTypeSupport
}

// NavigatorStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type NavigatorStatusPublisher struct {
	*rclgo.Publisher
}

// NewNavigatorStatusPublisher creates and returns a new publisher for the
// NavigatorStatus
func NewNavigatorStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*NavigatorStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, NavigatorStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &NavigatorStatusPublisher{pub}, nil
}

func (p *NavigatorStatusPublisher) Publish(msg *NavigatorStatus) error {
	return p.Publisher.Publish(msg)
}

// NavigatorStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type NavigatorStatusSubscription struct {
	*rclgo.Subscription
}

// NavigatorStatusSubscriptionCallback type is used to provide a subscription
// handler function for a NavigatorStatusSubscription.
type NavigatorStatusSubscriptionCallback func(msg *NavigatorStatus, info *rclgo.MessageInfo, err error)

// NewNavigatorStatusSubscription creates and returns a new subscription for the
// NavigatorStatus
func NewNavigatorStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback NavigatorStatusSubscriptionCallback) (*NavigatorStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg NavigatorStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, NavigatorStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &NavigatorStatusSubscription{sub}, nil
}

func (s *NavigatorStatusSubscription) TakeMessage(out *NavigatorStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneNavigatorStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneNavigatorStatusSlice(dst, src []NavigatorStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var NavigatorStatusTypeSupport types.MessageTypeSupport = _NavigatorStatusTypeSupport{}

type _NavigatorStatusTypeSupport struct{}

func (t _NavigatorStatusTypeSupport) New() types.Message {
	return NewNavigatorStatus()
}

func (t _NavigatorStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__NavigatorStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__NavigatorStatus__create())
}

func (t _NavigatorStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__NavigatorStatus__destroy((*C.px4_msgs__msg__NavigatorStatus)(pointer_to_free))
}

func (t _NavigatorStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*NavigatorStatus)
	mem := (*C.px4_msgs__msg__NavigatorStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.nav_state = C.uint8_t(m.NavState)
	mem.failure = C.uint8_t(m.Failure)
}

func (t _NavigatorStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*NavigatorStatus)
	mem := (*C.px4_msgs__msg__NavigatorStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.NavState = uint8(mem.nav_state)
	m.Failure = uint8(mem.failure)
}

func (t _NavigatorStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__NavigatorStatus())
}

type CNavigatorStatus = C.px4_msgs__msg__NavigatorStatus
type CNavigatorStatus__Sequence = C.px4_msgs__msg__NavigatorStatus__Sequence

func NavigatorStatus__Sequence_to_Go(goSlice *[]NavigatorStatus, cSlice CNavigatorStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]NavigatorStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		NavigatorStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func NavigatorStatus__Sequence_to_C(cSlice *CNavigatorStatus__Sequence, goSlice []NavigatorStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__NavigatorStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__NavigatorStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		NavigatorStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func NavigatorStatus__Array_to_Go(goSlice []NavigatorStatus, cSlice []CNavigatorStatus) {
	for i := 0; i < len(cSlice); i++ {
		NavigatorStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func NavigatorStatus__Array_to_C(cSlice []CNavigatorStatus, goSlice []NavigatorStatus) {
	for i := 0; i < len(goSlice); i++ {
		NavigatorStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
