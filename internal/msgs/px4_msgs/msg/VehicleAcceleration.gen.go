// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_acceleration.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleAcceleration", VehicleAccelerationTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleAcceleration", VehicleAccelerationTypeSupport)
}

type VehicleAcceleration struct {
	Timestamp       uint64     `yaml:"timestamp"`        // time since system start (microseconds)
	TimestampSample uint64     `yaml:"timestamp_sample"` // the timestamp of the raw data (microseconds)
	Xyz             [3]float32 `yaml:"xyz"`              // Bias corrected acceleration (including gravity) in the FRD body frame XYZ-axis in m/s^2
}

// NewVehicleAcceleration creates a new VehicleAcceleration with default values.
func NewVehicleAcceleration() *VehicleAcceleration {
	self := VehicleAcceleration{}
	self.SetDefaults()
	return &self
}

func (t *VehicleAcceleration) Clone() *VehicleAcceleration {
	c := &VehicleAcceleration{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.Xyz = t.Xyz
	return c
}

func (t *VehicleAcceleration) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleAcceleration) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.Xyz = [3]float32{}
}

func (t *VehicleAcceleration) GetTypeSupport() types.MessageTypeSupport {
	return VehicleAccelerationTypeSupport
}

// VehicleAccelerationPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleAccelerationPublisher struct {
	*rclgo.Publisher
}

// NewVehicleAccelerationPublisher creates and returns a new publisher for the
// VehicleAcceleration
func NewVehicleAccelerationPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleAccelerationPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleAccelerationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleAccelerationPublisher{pub}, nil
}

func (p *VehicleAccelerationPublisher) Publish(msg *VehicleAcceleration) error {
	return p.Publisher.Publish(msg)
}

// VehicleAccelerationSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleAccelerationSubscription struct {
	*rclgo.Subscription
}

// VehicleAccelerationSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleAccelerationSubscription.
type VehicleAccelerationSubscriptionCallback func(msg *VehicleAcceleration, info *rclgo.MessageInfo, err error)

// NewVehicleAccelerationSubscription creates and returns a new subscription for the
// VehicleAcceleration
func NewVehicleAccelerationSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleAccelerationSubscriptionCallback) (*VehicleAccelerationSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleAcceleration
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleAccelerationTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleAccelerationSubscription{sub}, nil
}

func (s *VehicleAccelerationSubscription) TakeMessage(out *VehicleAcceleration) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleAccelerationSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleAccelerationSlice(dst, src []VehicleAcceleration) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleAccelerationTypeSupport types.MessageTypeSupport = _VehicleAccelerationTypeSupport{}

type _VehicleAccelerationTypeSupport struct{}

func (t _VehicleAccelerationTypeSupport) New() types.Message {
	return NewVehicleAcceleration()
}

func (t _VehicleAccelerationTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleAcceleration
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleAcceleration__create())
}

func (t _VehicleAccelerationTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleAcceleration__destroy((*C.px4_msgs__msg__VehicleAcceleration)(pointer_to_free))
}

func (t _VehicleAccelerationTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleAcceleration)
	mem := (*C.px4_msgs__msg__VehicleAcceleration)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	cSlice_xyz := mem.xyz[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_xyz)), m.Xyz[:])
}

func (t _VehicleAccelerationTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleAcceleration)
	mem := (*C.px4_msgs__msg__VehicleAcceleration)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	cSlice_xyz := mem.xyz[:]
	primitives.Float32__Array_to_Go(m.Xyz[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_xyz)))
}

func (t _VehicleAccelerationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleAcceleration())
}

type CVehicleAcceleration = C.px4_msgs__msg__VehicleAcceleration
type CVehicleAcceleration__Sequence = C.px4_msgs__msg__VehicleAcceleration__Sequence

func VehicleAcceleration__Sequence_to_Go(goSlice *[]VehicleAcceleration, cSlice CVehicleAcceleration__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleAcceleration, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleAccelerationTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleAcceleration__Sequence_to_C(cSlice *CVehicleAcceleration__Sequence, goSlice []VehicleAcceleration) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleAcceleration)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleAcceleration * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleAccelerationTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleAcceleration__Array_to_Go(goSlice []VehicleAcceleration, cSlice []CVehicleAcceleration) {
	for i := 0; i < len(cSlice); i++ {
		VehicleAccelerationTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleAcceleration__Array_to_C(cSlice []CVehicleAcceleration, goSlice []VehicleAcceleration) {
	for i := 0; i < len(goSlice); i++ {
		VehicleAccelerationTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
