// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rover_mecanum_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RoverMecanumSetpoint", RoverMecanumSetpointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RoverMecanumSetpoint", RoverMecanumSetpointTypeSupport)
}

type RoverMecanumSetpoint struct {
	Timestamp                      uint64  `yaml:"timestamp"`                         // time since system start (microseconds)
	ForwardSpeedSetpoint           float32 `yaml:"forward_speed_setpoint"`            // [m/s] Desired forward speed
	ForwardSpeedSetpointNormalized float32 `yaml:"forward_speed_setpoint_normalized"` // [-1, 1] Desired normalized forward speed
	LateralSpeedSetpoint           float32 `yaml:"lateral_speed_setpoint"`            // [m/s] Desired lateral speed
	LateralSpeedSetpointNormalized float32 `yaml:"lateral_speed_setpoint_normalized"` // [-1, 1] Desired normalized lateral speed
	YawRateSetpoint                float32 `yaml:"yaw_rate_setpoint"`                 // [rad/s] Desired yaw rate
	YawRateSetpointNormalized      float32 `yaml:"yaw_rate_setpoint_normalized"`      // [-1, 1] Desired normalized yaw rate
	YawSetpoint                    float32 `yaml:"yaw_setpoint"`                      // [rad] Desired yaw (heading)
}

// NewRoverMecanumSetpoint creates a new RoverMecanumSetpoint with default values.
func NewRoverMecanumSetpoint() *RoverMecanumSetpoint {
	self := RoverMecanumSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *RoverMecanumSetpoint) Clone() *RoverMecanumSetpoint {
	c := &RoverMecanumSetpoint{}
	c.Timestamp = t.Timestamp
	c.ForwardSpeedSetpoint = t.ForwardSpeedSetpoint
	c.ForwardSpeedSetpointNormalized = t.ForwardSpeedSetpointNormalized
	c.LateralSpeedSetpoint = t.LateralSpeedSetpoint
	c.LateralSpeedSetpointNormalized = t.LateralSpeedSetpointNormalized
	c.YawRateSetpoint = t.YawRateSetpoint
	c.YawRateSetpointNormalized = t.YawRateSetpointNormalized
	c.YawSetpoint = t.YawSetpoint
	return c
}

func (t *RoverMecanumSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RoverMecanumSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.ForwardSpeedSetpoint = 0
	t.ForwardSpeedSetpointNormalized = 0
	t.LateralSpeedSetpoint = 0
	t.LateralSpeedSetpointNormalized = 0
	t.YawRateSetpoint = 0
	t.YawRateSetpointNormalized = 0
	t.YawSetpoint = 0
}

func (t *RoverMecanumSetpoint) GetTypeSupport() types.MessageTypeSupport {
	return RoverMecanumSetpointTypeSupport
}

// RoverMecanumSetpointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RoverMecanumSetpointPublisher struct {
	*rclgo.Publisher
}

// NewRoverMecanumSetpointPublisher creates and returns a new publisher for the
// RoverMecanumSetpoint
func NewRoverMecanumSetpointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RoverMecanumSetpointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RoverMecanumSetpointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RoverMecanumSetpointPublisher{pub}, nil
}

func (p *RoverMecanumSetpointPublisher) Publish(msg *RoverMecanumSetpoint) error {
	return p.Publisher.Publish(msg)
}

// RoverMecanumSetpointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RoverMecanumSetpointSubscription struct {
	*rclgo.Subscription
}

// RoverMecanumSetpointSubscriptionCallback type is used to provide a subscription
// handler function for a RoverMecanumSetpointSubscription.
type RoverMecanumSetpointSubscriptionCallback func(msg *RoverMecanumSetpoint, info *rclgo.MessageInfo, err error)

// NewRoverMecanumSetpointSubscription creates and returns a new subscription for the
// RoverMecanumSetpoint
func NewRoverMecanumSetpointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RoverMecanumSetpointSubscriptionCallback) (*RoverMecanumSetpointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RoverMecanumSetpoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RoverMecanumSetpointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RoverMecanumSetpointSubscription{sub}, nil
}

func (s *RoverMecanumSetpointSubscription) TakeMessage(out *RoverMecanumSetpoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRoverMecanumSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRoverMecanumSetpointSlice(dst, src []RoverMecanumSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RoverMecanumSetpointTypeSupport types.MessageTypeSupport = _RoverMecanumSetpointTypeSupport{}

type _RoverMecanumSetpointTypeSupport struct{}

func (t _RoverMecanumSetpointTypeSupport) New() types.Message {
	return NewRoverMecanumSetpoint()
}

func (t _RoverMecanumSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RoverMecanumSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__RoverMecanumSetpoint__create())
}

func (t _RoverMecanumSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RoverMecanumSetpoint__destroy((*C.px4_msgs__msg__RoverMecanumSetpoint)(pointer_to_free))
}

func (t _RoverMecanumSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RoverMecanumSetpoint)
	mem := (*C.px4_msgs__msg__RoverMecanumSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.forward_speed_setpoint = C.float(m.ForwardSpeedSetpoint)
	mem.forward_speed_setpoint_normalized = C.float(m.ForwardSpeedSetpointNormalized)
	mem.lateral_speed_setpoint = C.float(m.LateralSpeedSetpoint)
	mem.lateral_speed_setpoint_normalized = C.float(m.LateralSpeedSetpointNormalized)
	mem.yaw_rate_setpoint = C.float(m.YawRateSetpoint)
	mem.yaw_rate_setpoint_normalized = C.float(m.YawRateSetpointNormalized)
	mem.yaw_setpoint = C.float(m.YawSetpoint)
}

func (t _RoverMecanumSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RoverMecanumSetpoint)
	mem := (*C.px4_msgs__msg__RoverMecanumSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.ForwardSpeedSetpoint = float32(mem.forward_speed_setpoint)
	m.ForwardSpeedSetpointNormalized = float32(mem.forward_speed_setpoint_normalized)
	m.LateralSpeedSetpoint = float32(mem.lateral_speed_setpoint)
	m.LateralSpeedSetpointNormalized = float32(mem.lateral_speed_setpoint_normalized)
	m.YawRateSetpoint = float32(mem.yaw_rate_setpoint)
	m.YawRateSetpointNormalized = float32(mem.yaw_rate_setpoint_normalized)
	m.YawSetpoint = float32(mem.yaw_setpoint)
}

func (t _RoverMecanumSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RoverMecanumSetpoint())
}

type CRoverMecanumSetpoint = C.px4_msgs__msg__RoverMecanumSetpoint
type CRoverMecanumSetpoint__Sequence = C.px4_msgs__msg__RoverMecanumSetpoint__Sequence

func RoverMecanumSetpoint__Sequence_to_Go(goSlice *[]RoverMecanumSetpoint, cSlice CRoverMecanumSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RoverMecanumSetpoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RoverMecanumSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RoverMecanumSetpoint__Sequence_to_C(cSlice *CRoverMecanumSetpoint__Sequence, goSlice []RoverMecanumSetpoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RoverMecanumSetpoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__RoverMecanumSetpoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RoverMecanumSetpointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RoverMecanumSetpoint__Array_to_Go(goSlice []RoverMecanumSetpoint, cSlice []CRoverMecanumSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		RoverMecanumSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RoverMecanumSetpoint__Array_to_C(cSlice []CRoverMecanumSetpoint, goSlice []RoverMecanumSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		RoverMecanumSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
