// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/open_drone_id_arm_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/OpenDroneIdArmStatus", OpenDroneIdArmStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/OpenDroneIdArmStatus", OpenDroneIdArmStatusTypeSupport)
}

type OpenDroneIdArmStatus struct {
	Timestamp uint64   `yaml:"timestamp"`
	Status    uint8    `yaml:"status"`
	Error     [50]byte `yaml:"error"`
}

// NewOpenDroneIdArmStatus creates a new OpenDroneIdArmStatus with default values.
func NewOpenDroneIdArmStatus() *OpenDroneIdArmStatus {
	self := OpenDroneIdArmStatus{}
	self.SetDefaults()
	return &self
}

func (t *OpenDroneIdArmStatus) Clone() *OpenDroneIdArmStatus {
	c := &OpenDroneIdArmStatus{}
	c.Timestamp = t.Timestamp
	c.Status = t.Status
	c.Error = t.Error
	return c
}

func (t *OpenDroneIdArmStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OpenDroneIdArmStatus) SetDefaults() {
	t.Timestamp = 0
	t.Status = 0
	t.Error = [50]byte{}
}

func (t *OpenDroneIdArmStatus) GetTypeSupport() types.MessageTypeSupport {
	return OpenDroneIdArmStatusTypeSupport
}

// OpenDroneIdArmStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OpenDroneIdArmStatusPublisher struct {
	*rclgo.Publisher
}

// NewOpenDroneIdArmStatusPublisher creates and returns a new publisher for the
// OpenDroneIdArmStatus
func NewOpenDroneIdArmStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OpenDroneIdArmStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, OpenDroneIdArmStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OpenDroneIdArmStatusPublisher{pub}, nil
}

func (p *OpenDroneIdArmStatusPublisher) Publish(msg *OpenDroneIdArmStatus) error {
	return p.Publisher.Publish(msg)
}

// OpenDroneIdArmStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OpenDroneIdArmStatusSubscription struct {
	*rclgo.Subscription
}

// OpenDroneIdArmStatusSubscriptionCallback type is used to provide a subscription
// handler function for a OpenDroneIdArmStatusSubscription.
type OpenDroneIdArmStatusSubscriptionCallback func(msg *OpenDroneIdArmStatus, info *rclgo.MessageInfo, err error)

// NewOpenDroneIdArmStatusSubscription creates and returns a new subscription for the
// OpenDroneIdArmStatus
func NewOpenDroneIdArmStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OpenDroneIdArmStatusSubscriptionCallback) (*OpenDroneIdArmStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OpenDroneIdArmStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OpenDroneIdArmStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OpenDroneIdArmStatusSubscription{sub}, nil
}

func (s *OpenDroneIdArmStatusSubscription) TakeMessage(out *OpenDroneIdArmStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOpenDroneIdArmStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOpenDroneIdArmStatusSlice(dst, src []OpenDroneIdArmStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OpenDroneIdArmStatusTypeSupport types.MessageTypeSupport = _OpenDroneIdArmStatusTypeSupport{}

type _OpenDroneIdArmStatusTypeSupport struct{}

func (t _OpenDroneIdArmStatusTypeSupport) New() types.Message {
	return NewOpenDroneIdArmStatus()
}

func (t _OpenDroneIdArmStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__OpenDroneIdArmStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__OpenDroneIdArmStatus__create())
}

func (t _OpenDroneIdArmStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__OpenDroneIdArmStatus__destroy((*C.px4_msgs__msg__OpenDroneIdArmStatus)(pointer_to_free))
}

func (t _OpenDroneIdArmStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OpenDroneIdArmStatus)
	mem := (*C.px4_msgs__msg__OpenDroneIdArmStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.status = C.uint8_t(m.Status)
	cSlice_error := mem.error[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_error)), m.Error[:])
}

func (t _OpenDroneIdArmStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OpenDroneIdArmStatus)
	mem := (*C.px4_msgs__msg__OpenDroneIdArmStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Status = uint8(mem.status)
	cSlice_error := mem.error[:]
	primitives.Char__Array_to_Go(m.Error[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_error)))
}

func (t _OpenDroneIdArmStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__OpenDroneIdArmStatus())
}

type COpenDroneIdArmStatus = C.px4_msgs__msg__OpenDroneIdArmStatus
type COpenDroneIdArmStatus__Sequence = C.px4_msgs__msg__OpenDroneIdArmStatus__Sequence

func OpenDroneIdArmStatus__Sequence_to_Go(goSlice *[]OpenDroneIdArmStatus, cSlice COpenDroneIdArmStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OpenDroneIdArmStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OpenDroneIdArmStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OpenDroneIdArmStatus__Sequence_to_C(cSlice *COpenDroneIdArmStatus__Sequence, goSlice []OpenDroneIdArmStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__OpenDroneIdArmStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__OpenDroneIdArmStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OpenDroneIdArmStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OpenDroneIdArmStatus__Array_to_Go(goSlice []OpenDroneIdArmStatus, cSlice []COpenDroneIdArmStatus) {
	for i := 0; i < len(cSlice); i++ {
		OpenDroneIdArmStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OpenDroneIdArmStatus__Array_to_C(cSlice []COpenDroneIdArmStatus, goSlice []OpenDroneIdArmStatus) {
	for i := 0; i < len(goSlice); i++ {
		OpenDroneIdArmStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
