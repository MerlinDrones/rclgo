// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/actuator_outputs.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ActuatorOutputs", ActuatorOutputsTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ActuatorOutputs", ActuatorOutputsTypeSupport)
}

const (
	ActuatorOutputs_NUM_ACTUATOR_OUTPUTS       uint8 = 16
	ActuatorOutputs_NUM_ACTUATOR_OUTPUT_GROUPS uint8 = 4 // for sanity checking
)

type ActuatorOutputs struct {
	Timestamp uint64      `yaml:"timestamp"` // time since system start (microseconds)
	Noutputs  uint32      `yaml:"noutputs"`  // valid outputs
	Output    [16]float32 `yaml:"output"`    // output data, in natural output units
}

// NewActuatorOutputs creates a new ActuatorOutputs with default values.
func NewActuatorOutputs() *ActuatorOutputs {
	self := ActuatorOutputs{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorOutputs) Clone() *ActuatorOutputs {
	c := &ActuatorOutputs{}
	c.Timestamp = t.Timestamp
	c.Noutputs = t.Noutputs
	c.Output = t.Output
	return c
}

func (t *ActuatorOutputs) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorOutputs) SetDefaults() {
	t.Timestamp = 0
	t.Noutputs = 0
	t.Output = [16]float32{}
}

func (t *ActuatorOutputs) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorOutputsTypeSupport
}

// ActuatorOutputsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorOutputsPublisher struct {
	*rclgo.Publisher
}

// NewActuatorOutputsPublisher creates and returns a new publisher for the
// ActuatorOutputs
func NewActuatorOutputsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorOutputsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorOutputsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorOutputsPublisher{pub}, nil
}

func (p *ActuatorOutputsPublisher) Publish(msg *ActuatorOutputs) error {
	return p.Publisher.Publish(msg)
}

// ActuatorOutputsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorOutputsSubscription struct {
	*rclgo.Subscription
}

// ActuatorOutputsSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorOutputsSubscription.
type ActuatorOutputsSubscriptionCallback func(msg *ActuatorOutputs, info *rclgo.MessageInfo, err error)

// NewActuatorOutputsSubscription creates and returns a new subscription for the
// ActuatorOutputs
func NewActuatorOutputsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorOutputsSubscriptionCallback) (*ActuatorOutputsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorOutputs
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorOutputsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorOutputsSubscription{sub}, nil
}

func (s *ActuatorOutputsSubscription) TakeMessage(out *ActuatorOutputs) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorOutputsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorOutputsSlice(dst, src []ActuatorOutputs) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorOutputsTypeSupport types.MessageTypeSupport = _ActuatorOutputsTypeSupport{}

type _ActuatorOutputsTypeSupport struct{}

func (t _ActuatorOutputsTypeSupport) New() types.Message {
	return NewActuatorOutputs()
}

func (t _ActuatorOutputsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ActuatorOutputs
	return (unsafe.Pointer)(C.px4_msgs__msg__ActuatorOutputs__create())
}

func (t _ActuatorOutputsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ActuatorOutputs__destroy((*C.px4_msgs__msg__ActuatorOutputs)(pointer_to_free))
}

func (t _ActuatorOutputsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorOutputs)
	mem := (*C.px4_msgs__msg__ActuatorOutputs)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.noutputs = C.uint32_t(m.Noutputs)
	cSlice_output := mem.output[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_output)), m.Output[:])
}

func (t _ActuatorOutputsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorOutputs)
	mem := (*C.px4_msgs__msg__ActuatorOutputs)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Noutputs = uint32(mem.noutputs)
	cSlice_output := mem.output[:]
	primitives.Float32__Array_to_Go(m.Output[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_output)))
}

func (t _ActuatorOutputsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ActuatorOutputs())
}

type CActuatorOutputs = C.px4_msgs__msg__ActuatorOutputs
type CActuatorOutputs__Sequence = C.px4_msgs__msg__ActuatorOutputs__Sequence

func ActuatorOutputs__Sequence_to_Go(goSlice *[]ActuatorOutputs, cSlice CActuatorOutputs__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorOutputs, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorOutputsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorOutputs__Sequence_to_C(cSlice *CActuatorOutputs__Sequence, goSlice []ActuatorOutputs) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ActuatorOutputs)(C.malloc(C.sizeof_struct_px4_msgs__msg__ActuatorOutputs * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorOutputsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorOutputs__Array_to_Go(goSlice []ActuatorOutputs, cSlice []CActuatorOutputs) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorOutputsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorOutputs__Array_to_C(cSlice []CActuatorOutputs, goSlice []ActuatorOutputs) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorOutputsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
