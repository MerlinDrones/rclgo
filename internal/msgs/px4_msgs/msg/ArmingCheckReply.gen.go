// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/arming_check_reply.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ArmingCheckReply", ArmingCheckReplyTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ArmingCheckReply", ArmingCheckReplyTypeSupport)
}

const (
	ArmingCheckReply_HEALTH_COMPONENT_INDEX_NONE      uint8 = 0
	ArmingCheckReply_HEALTH_COMPONENT_INDEX_AVOIDANCE uint8 = 19
	ArmingCheckReply_ORB_QUEUE_LENGTH                 uint8 = 4
)

type ArmingCheckReply struct {
	Timestamp                   uint64   `yaml:"timestamp"` // time since system start (microseconds)
	RequestId                   uint8    `yaml:"request_id"`
	RegistrationId              uint8    `yaml:"registration_id"`
	HealthComponentIndex        uint8    `yaml:"health_component_index"` // HEALTH_COMPONENT_INDEX_*
	HealthComponentIsPresent    bool     `yaml:"health_component_is_present"`
	HealthComponentWarning      bool     `yaml:"health_component_warning"`
	HealthComponentError        bool     `yaml:"health_component_error"`
	CanArmAndRun                bool     `yaml:"can_arm_and_run"` // whether arming is possible, and if it's a navigation mode, if it can run
	NumEvents                   uint8    `yaml:"num_events"`
	Events                      [5]Event `yaml:"events"`
	ModeReqAngularVelocity      bool     `yaml:"mode_req_angular_velocity"` // Mode requirements
	ModeReqAttitude             bool     `yaml:"mode_req_attitude"`
	ModeReqLocalAlt             bool     `yaml:"mode_req_local_alt"`
	ModeReqLocalPosition        bool     `yaml:"mode_req_local_position"`
	ModeReqLocalPositionRelaxed bool     `yaml:"mode_req_local_position_relaxed"`
	ModeReqGlobalPosition       bool     `yaml:"mode_req_global_position"`
	ModeReqMission              bool     `yaml:"mode_req_mission"`
	ModeReqHomePosition         bool     `yaml:"mode_req_home_position"`
	ModeReqPreventArming        bool     `yaml:"mode_req_prevent_arming"`
	ModeReqManualControl        bool     `yaml:"mode_req_manual_control"`
}

// NewArmingCheckReply creates a new ArmingCheckReply with default values.
func NewArmingCheckReply() *ArmingCheckReply {
	self := ArmingCheckReply{}
	self.SetDefaults()
	return &self
}

func (t *ArmingCheckReply) Clone() *ArmingCheckReply {
	c := &ArmingCheckReply{}
	c.Timestamp = t.Timestamp
	c.RequestId = t.RequestId
	c.RegistrationId = t.RegistrationId
	c.HealthComponentIndex = t.HealthComponentIndex
	c.HealthComponentIsPresent = t.HealthComponentIsPresent
	c.HealthComponentWarning = t.HealthComponentWarning
	c.HealthComponentError = t.HealthComponentError
	c.CanArmAndRun = t.CanArmAndRun
	c.NumEvents = t.NumEvents
	CloneEventSlice(c.Events[:], t.Events[:])
	c.ModeReqAngularVelocity = t.ModeReqAngularVelocity
	c.ModeReqAttitude = t.ModeReqAttitude
	c.ModeReqLocalAlt = t.ModeReqLocalAlt
	c.ModeReqLocalPosition = t.ModeReqLocalPosition
	c.ModeReqLocalPositionRelaxed = t.ModeReqLocalPositionRelaxed
	c.ModeReqGlobalPosition = t.ModeReqGlobalPosition
	c.ModeReqMission = t.ModeReqMission
	c.ModeReqHomePosition = t.ModeReqHomePosition
	c.ModeReqPreventArming = t.ModeReqPreventArming
	c.ModeReqManualControl = t.ModeReqManualControl
	return c
}

func (t *ArmingCheckReply) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ArmingCheckReply) SetDefaults() {
	t.Timestamp = 0
	t.RequestId = 0
	t.RegistrationId = 0
	t.HealthComponentIndex = 0
	t.HealthComponentIsPresent = false
	t.HealthComponentWarning = false
	t.HealthComponentError = false
	t.CanArmAndRun = false
	t.NumEvents = 0
	for i := range t.Events {
		t.Events[i].SetDefaults()
	}
	t.ModeReqAngularVelocity = false
	t.ModeReqAttitude = false
	t.ModeReqLocalAlt = false
	t.ModeReqLocalPosition = false
	t.ModeReqLocalPositionRelaxed = false
	t.ModeReqGlobalPosition = false
	t.ModeReqMission = false
	t.ModeReqHomePosition = false
	t.ModeReqPreventArming = false
	t.ModeReqManualControl = false
}

func (t *ArmingCheckReply) GetTypeSupport() types.MessageTypeSupport {
	return ArmingCheckReplyTypeSupport
}

// ArmingCheckReplyPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ArmingCheckReplyPublisher struct {
	*rclgo.Publisher
}

// NewArmingCheckReplyPublisher creates and returns a new publisher for the
// ArmingCheckReply
func NewArmingCheckReplyPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ArmingCheckReplyPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ArmingCheckReplyTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ArmingCheckReplyPublisher{pub}, nil
}

func (p *ArmingCheckReplyPublisher) Publish(msg *ArmingCheckReply) error {
	return p.Publisher.Publish(msg)
}

// ArmingCheckReplySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ArmingCheckReplySubscription struct {
	*rclgo.Subscription
}

// ArmingCheckReplySubscriptionCallback type is used to provide a subscription
// handler function for a ArmingCheckReplySubscription.
type ArmingCheckReplySubscriptionCallback func(msg *ArmingCheckReply, info *rclgo.MessageInfo, err error)

// NewArmingCheckReplySubscription creates and returns a new subscription for the
// ArmingCheckReply
func NewArmingCheckReplySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ArmingCheckReplySubscriptionCallback) (*ArmingCheckReplySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ArmingCheckReply
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ArmingCheckReplyTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ArmingCheckReplySubscription{sub}, nil
}

func (s *ArmingCheckReplySubscription) TakeMessage(out *ArmingCheckReply) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneArmingCheckReplySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneArmingCheckReplySlice(dst, src []ArmingCheckReply) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ArmingCheckReplyTypeSupport types.MessageTypeSupport = _ArmingCheckReplyTypeSupport{}

type _ArmingCheckReplyTypeSupport struct{}

func (t _ArmingCheckReplyTypeSupport) New() types.Message {
	return NewArmingCheckReply()
}

func (t _ArmingCheckReplyTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ArmingCheckReply
	return (unsafe.Pointer)(C.px4_msgs__msg__ArmingCheckReply__create())
}

func (t _ArmingCheckReplyTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ArmingCheckReply__destroy((*C.px4_msgs__msg__ArmingCheckReply)(pointer_to_free))
}

func (t _ArmingCheckReplyTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ArmingCheckReply)
	mem := (*C.px4_msgs__msg__ArmingCheckReply)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.request_id = C.uint8_t(m.RequestId)
	mem.registration_id = C.uint8_t(m.RegistrationId)
	mem.health_component_index = C.uint8_t(m.HealthComponentIndex)
	mem.health_component_is_present = C.bool(m.HealthComponentIsPresent)
	mem.health_component_warning = C.bool(m.HealthComponentWarning)
	mem.health_component_error = C.bool(m.HealthComponentError)
	mem.can_arm_and_run = C.bool(m.CanArmAndRun)
	mem.num_events = C.uint8_t(m.NumEvents)
	Event__Array_to_C(mem.events[:], m.Events[:])
	mem.mode_req_angular_velocity = C.bool(m.ModeReqAngularVelocity)
	mem.mode_req_attitude = C.bool(m.ModeReqAttitude)
	mem.mode_req_local_alt = C.bool(m.ModeReqLocalAlt)
	mem.mode_req_local_position = C.bool(m.ModeReqLocalPosition)
	mem.mode_req_local_position_relaxed = C.bool(m.ModeReqLocalPositionRelaxed)
	mem.mode_req_global_position = C.bool(m.ModeReqGlobalPosition)
	mem.mode_req_mission = C.bool(m.ModeReqMission)
	mem.mode_req_home_position = C.bool(m.ModeReqHomePosition)
	mem.mode_req_prevent_arming = C.bool(m.ModeReqPreventArming)
	mem.mode_req_manual_control = C.bool(m.ModeReqManualControl)
}

func (t _ArmingCheckReplyTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ArmingCheckReply)
	mem := (*C.px4_msgs__msg__ArmingCheckReply)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.RequestId = uint8(mem.request_id)
	m.RegistrationId = uint8(mem.registration_id)
	m.HealthComponentIndex = uint8(mem.health_component_index)
	m.HealthComponentIsPresent = bool(mem.health_component_is_present)
	m.HealthComponentWarning = bool(mem.health_component_warning)
	m.HealthComponentError = bool(mem.health_component_error)
	m.CanArmAndRun = bool(mem.can_arm_and_run)
	m.NumEvents = uint8(mem.num_events)
	Event__Array_to_Go(m.Events[:], mem.events[:])
	m.ModeReqAngularVelocity = bool(mem.mode_req_angular_velocity)
	m.ModeReqAttitude = bool(mem.mode_req_attitude)
	m.ModeReqLocalAlt = bool(mem.mode_req_local_alt)
	m.ModeReqLocalPosition = bool(mem.mode_req_local_position)
	m.ModeReqLocalPositionRelaxed = bool(mem.mode_req_local_position_relaxed)
	m.ModeReqGlobalPosition = bool(mem.mode_req_global_position)
	m.ModeReqMission = bool(mem.mode_req_mission)
	m.ModeReqHomePosition = bool(mem.mode_req_home_position)
	m.ModeReqPreventArming = bool(mem.mode_req_prevent_arming)
	m.ModeReqManualControl = bool(mem.mode_req_manual_control)
}

func (t _ArmingCheckReplyTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ArmingCheckReply())
}

type CArmingCheckReply = C.px4_msgs__msg__ArmingCheckReply
type CArmingCheckReply__Sequence = C.px4_msgs__msg__ArmingCheckReply__Sequence

func ArmingCheckReply__Sequence_to_Go(goSlice *[]ArmingCheckReply, cSlice CArmingCheckReply__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ArmingCheckReply, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ArmingCheckReplyTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ArmingCheckReply__Sequence_to_C(cSlice *CArmingCheckReply__Sequence, goSlice []ArmingCheckReply) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ArmingCheckReply)(C.malloc(C.sizeof_struct_px4_msgs__msg__ArmingCheckReply * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ArmingCheckReplyTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ArmingCheckReply__Array_to_Go(goSlice []ArmingCheckReply, cSlice []CArmingCheckReply) {
	for i := 0; i < len(cSlice); i++ {
		ArmingCheckReplyTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ArmingCheckReply__Array_to_C(cSlice []CArmingCheckReply, goSlice []ArmingCheckReply) {
	for i := 0; i < len(goSlice); i++ {
		ArmingCheckReplyTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
