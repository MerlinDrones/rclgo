// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/autotune_attitude_control_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/AutotuneAttitudeControlStatus", AutotuneAttitudeControlStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/AutotuneAttitudeControlStatus", AutotuneAttitudeControlStatusTypeSupport)
}

const (
	AutotuneAttitudeControlStatus_STATE_IDLE            uint8 = 0
	AutotuneAttitudeControlStatus_STATE_INIT            uint8 = 1
	AutotuneAttitudeControlStatus_STATE_ROLL            uint8 = 2
	AutotuneAttitudeControlStatus_STATE_ROLL_PAUSE      uint8 = 3
	AutotuneAttitudeControlStatus_STATE_PITCH           uint8 = 4
	AutotuneAttitudeControlStatus_STATE_PITCH_PAUSE     uint8 = 5
	AutotuneAttitudeControlStatus_STATE_YAW             uint8 = 6
	AutotuneAttitudeControlStatus_STATE_YAW_PAUSE       uint8 = 7
	AutotuneAttitudeControlStatus_STATE_VERIFICATION    uint8 = 8
	AutotuneAttitudeControlStatus_STATE_APPLY           uint8 = 9
	AutotuneAttitudeControlStatus_STATE_TEST            uint8 = 10
	AutotuneAttitudeControlStatus_STATE_COMPLETE        uint8 = 11
	AutotuneAttitudeControlStatus_STATE_FAIL            uint8 = 12
	AutotuneAttitudeControlStatus_STATE_WAIT_FOR_DISARM uint8 = 13
)

type AutotuneAttitudeControlStatus struct {
	Timestamp uint64     `yaml:"timestamp"` // time since system start (microseconds)
	Coeff     [5]float32 `yaml:"coeff"`     // coefficients of the identified discrete-time model
	CoeffVar  [5]float32 `yaml:"coeff_var"` // coefficients' variance of the identified discrete-time model
	Fitness   float32    `yaml:"fitness"`   // fitness of the parameter estimate
	Innov     float32    `yaml:"innov"`
	DtModel   float32    `yaml:"dt_model"`
	Kc        float32    `yaml:"kc"`
	Ki        float32    `yaml:"ki"`
	Kd        float32    `yaml:"kd"`
	Kff       float32    `yaml:"kff"`
	AttP      float32    `yaml:"att_p"`
	RateSp    [3]float32 `yaml:"rate_sp"`
	UFilt     float32    `yaml:"u_filt"`
	YFilt     float32    `yaml:"y_filt"`
	State     uint8      `yaml:"state"`
}

// NewAutotuneAttitudeControlStatus creates a new AutotuneAttitudeControlStatus with default values.
func NewAutotuneAttitudeControlStatus() *AutotuneAttitudeControlStatus {
	self := AutotuneAttitudeControlStatus{}
	self.SetDefaults()
	return &self
}

func (t *AutotuneAttitudeControlStatus) Clone() *AutotuneAttitudeControlStatus {
	c := &AutotuneAttitudeControlStatus{}
	c.Timestamp = t.Timestamp
	c.Coeff = t.Coeff
	c.CoeffVar = t.CoeffVar
	c.Fitness = t.Fitness
	c.Innov = t.Innov
	c.DtModel = t.DtModel
	c.Kc = t.Kc
	c.Ki = t.Ki
	c.Kd = t.Kd
	c.Kff = t.Kff
	c.AttP = t.AttP
	c.RateSp = t.RateSp
	c.UFilt = t.UFilt
	c.YFilt = t.YFilt
	c.State = t.State
	return c
}

func (t *AutotuneAttitudeControlStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *AutotuneAttitudeControlStatus) SetDefaults() {
	t.Timestamp = 0
	t.Coeff = [5]float32{}
	t.CoeffVar = [5]float32{}
	t.Fitness = 0
	t.Innov = 0
	t.DtModel = 0
	t.Kc = 0
	t.Ki = 0
	t.Kd = 0
	t.Kff = 0
	t.AttP = 0
	t.RateSp = [3]float32{}
	t.UFilt = 0
	t.YFilt = 0
	t.State = 0
}

func (t *AutotuneAttitudeControlStatus) GetTypeSupport() types.MessageTypeSupport {
	return AutotuneAttitudeControlStatusTypeSupport
}

// AutotuneAttitudeControlStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AutotuneAttitudeControlStatusPublisher struct {
	*rclgo.Publisher
}

// NewAutotuneAttitudeControlStatusPublisher creates and returns a new publisher for the
// AutotuneAttitudeControlStatus
func NewAutotuneAttitudeControlStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AutotuneAttitudeControlStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, AutotuneAttitudeControlStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AutotuneAttitudeControlStatusPublisher{pub}, nil
}

func (p *AutotuneAttitudeControlStatusPublisher) Publish(msg *AutotuneAttitudeControlStatus) error {
	return p.Publisher.Publish(msg)
}

// AutotuneAttitudeControlStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AutotuneAttitudeControlStatusSubscription struct {
	*rclgo.Subscription
}

// AutotuneAttitudeControlStatusSubscriptionCallback type is used to provide a subscription
// handler function for a AutotuneAttitudeControlStatusSubscription.
type AutotuneAttitudeControlStatusSubscriptionCallback func(msg *AutotuneAttitudeControlStatus, info *rclgo.MessageInfo, err error)

// NewAutotuneAttitudeControlStatusSubscription creates and returns a new subscription for the
// AutotuneAttitudeControlStatus
func NewAutotuneAttitudeControlStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AutotuneAttitudeControlStatusSubscriptionCallback) (*AutotuneAttitudeControlStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg AutotuneAttitudeControlStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AutotuneAttitudeControlStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AutotuneAttitudeControlStatusSubscription{sub}, nil
}

func (s *AutotuneAttitudeControlStatusSubscription) TakeMessage(out *AutotuneAttitudeControlStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAutotuneAttitudeControlStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAutotuneAttitudeControlStatusSlice(dst, src []AutotuneAttitudeControlStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AutotuneAttitudeControlStatusTypeSupport types.MessageTypeSupport = _AutotuneAttitudeControlStatusTypeSupport{}

type _AutotuneAttitudeControlStatusTypeSupport struct{}

func (t _AutotuneAttitudeControlStatusTypeSupport) New() types.Message {
	return NewAutotuneAttitudeControlStatus()
}

func (t _AutotuneAttitudeControlStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__AutotuneAttitudeControlStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__AutotuneAttitudeControlStatus__create())
}

func (t _AutotuneAttitudeControlStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__AutotuneAttitudeControlStatus__destroy((*C.px4_msgs__msg__AutotuneAttitudeControlStatus)(pointer_to_free))
}

func (t _AutotuneAttitudeControlStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*AutotuneAttitudeControlStatus)
	mem := (*C.px4_msgs__msg__AutotuneAttitudeControlStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_coeff := mem.coeff[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_coeff)), m.Coeff[:])
	cSlice_coeff_var := mem.coeff_var[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_coeff_var)), m.CoeffVar[:])
	mem.fitness = C.float(m.Fitness)
	mem.innov = C.float(m.Innov)
	mem.dt_model = C.float(m.DtModel)
	mem.kc = C.float(m.Kc)
	mem.ki = C.float(m.Ki)
	mem.kd = C.float(m.Kd)
	mem.kff = C.float(m.Kff)
	mem.att_p = C.float(m.AttP)
	cSlice_rate_sp := mem.rate_sp[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_rate_sp)), m.RateSp[:])
	mem.u_filt = C.float(m.UFilt)
	mem.y_filt = C.float(m.YFilt)
	mem.state = C.uint8_t(m.State)
}

func (t _AutotuneAttitudeControlStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*AutotuneAttitudeControlStatus)
	mem := (*C.px4_msgs__msg__AutotuneAttitudeControlStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_coeff := mem.coeff[:]
	primitives.Float32__Array_to_Go(m.Coeff[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_coeff)))
	cSlice_coeff_var := mem.coeff_var[:]
	primitives.Float32__Array_to_Go(m.CoeffVar[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_coeff_var)))
	m.Fitness = float32(mem.fitness)
	m.Innov = float32(mem.innov)
	m.DtModel = float32(mem.dt_model)
	m.Kc = float32(mem.kc)
	m.Ki = float32(mem.ki)
	m.Kd = float32(mem.kd)
	m.Kff = float32(mem.kff)
	m.AttP = float32(mem.att_p)
	cSlice_rate_sp := mem.rate_sp[:]
	primitives.Float32__Array_to_Go(m.RateSp[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_rate_sp)))
	m.UFilt = float32(mem.u_filt)
	m.YFilt = float32(mem.y_filt)
	m.State = uint8(mem.state)
}

func (t _AutotuneAttitudeControlStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__AutotuneAttitudeControlStatus())
}

type CAutotuneAttitudeControlStatus = C.px4_msgs__msg__AutotuneAttitudeControlStatus
type CAutotuneAttitudeControlStatus__Sequence = C.px4_msgs__msg__AutotuneAttitudeControlStatus__Sequence

func AutotuneAttitudeControlStatus__Sequence_to_Go(goSlice *[]AutotuneAttitudeControlStatus, cSlice CAutotuneAttitudeControlStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]AutotuneAttitudeControlStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AutotuneAttitudeControlStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func AutotuneAttitudeControlStatus__Sequence_to_C(cSlice *CAutotuneAttitudeControlStatus__Sequence, goSlice []AutotuneAttitudeControlStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__AutotuneAttitudeControlStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__AutotuneAttitudeControlStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AutotuneAttitudeControlStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func AutotuneAttitudeControlStatus__Array_to_Go(goSlice []AutotuneAttitudeControlStatus, cSlice []CAutotuneAttitudeControlStatus) {
	for i := 0; i < len(cSlice); i++ {
		AutotuneAttitudeControlStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func AutotuneAttitudeControlStatus__Array_to_C(cSlice []CAutotuneAttitudeControlStatus, goSlice []AutotuneAttitudeControlStatus) {
	for i := 0; i < len(goSlice); i++ {
		AutotuneAttitudeControlStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
