// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/mission.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Mission", MissionTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/Mission", MissionTypeSupport)
}

type Mission struct {
	Timestamp          uint64 `yaml:"timestamp"`            // time since system start (microseconds)
	MissionDatamanId   uint8  `yaml:"mission_dataman_id"`   // default 0, there are two offboard storage places in the dataman: 0 or 1
	FenceDatamanId     uint8  `yaml:"fence_dataman_id"`     // default 0, there are two offboard storage places in the dataman: 0 or 1
	SafepointDatamanId uint8  `yaml:"safepoint_dataman_id"` // default 0, there are two offboard storage places in the dataman: 0 or 1
	Count              uint16 `yaml:"count"`                // count of the missions stored in the dataman
	CurrentSeq         int32  `yaml:"current_seq"`          // default -1, start at the one changed latest
	LandStartIndex     int32  `yaml:"land_start_index"`     // Index of the land start marker, if unavailable index of the land item, -1 otherwise
	LandIndex          int32  `yaml:"land_index"`           // Index of the land item, -1 otherwise
	MissionId          uint32 `yaml:"mission_id"`           // indicates updates to the mission, reload from dataman if changed
	GeofenceId         uint32 `yaml:"geofence_id"`          // indicates updates to the geofence, reload from dataman if changed
	SafePointsId       uint32 `yaml:"safe_points_id"`       // indicates updates to the safe points, reload from dataman if changed
}

// NewMission creates a new Mission with default values.
func NewMission() *Mission {
	self := Mission{}
	self.SetDefaults()
	return &self
}

func (t *Mission) Clone() *Mission {
	c := &Mission{}
	c.Timestamp = t.Timestamp
	c.MissionDatamanId = t.MissionDatamanId
	c.FenceDatamanId = t.FenceDatamanId
	c.SafepointDatamanId = t.SafepointDatamanId
	c.Count = t.Count
	c.CurrentSeq = t.CurrentSeq
	c.LandStartIndex = t.LandStartIndex
	c.LandIndex = t.LandIndex
	c.MissionId = t.MissionId
	c.GeofenceId = t.GeofenceId
	c.SafePointsId = t.SafePointsId
	return c
}

func (t *Mission) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Mission) SetDefaults() {
	t.Timestamp = 0
	t.MissionDatamanId = 0
	t.FenceDatamanId = 0
	t.SafepointDatamanId = 0
	t.Count = 0
	t.CurrentSeq = 0
	t.LandStartIndex = 0
	t.LandIndex = 0
	t.MissionId = 0
	t.GeofenceId = 0
	t.SafePointsId = 0
}

func (t *Mission) GetTypeSupport() types.MessageTypeSupport {
	return MissionTypeSupport
}

// MissionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MissionPublisher struct {
	*rclgo.Publisher
}

// NewMissionPublisher creates and returns a new publisher for the
// Mission
func NewMissionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MissionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MissionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MissionPublisher{pub}, nil
}

func (p *MissionPublisher) Publish(msg *Mission) error {
	return p.Publisher.Publish(msg)
}

// MissionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MissionSubscription struct {
	*rclgo.Subscription
}

// MissionSubscriptionCallback type is used to provide a subscription
// handler function for a MissionSubscription.
type MissionSubscriptionCallback func(msg *Mission, info *rclgo.MessageInfo, err error)

// NewMissionSubscription creates and returns a new subscription for the
// Mission
func NewMissionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MissionSubscriptionCallback) (*MissionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Mission
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MissionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MissionSubscription{sub}, nil
}

func (s *MissionSubscription) TakeMessage(out *Mission) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMissionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMissionSlice(dst, src []Mission) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MissionTypeSupport types.MessageTypeSupport = _MissionTypeSupport{}

type _MissionTypeSupport struct{}

func (t _MissionTypeSupport) New() types.Message {
	return NewMission()
}

func (t _MissionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Mission
	return (unsafe.Pointer)(C.px4_msgs__msg__Mission__create())
}

func (t _MissionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Mission__destroy((*C.px4_msgs__msg__Mission)(pointer_to_free))
}

func (t _MissionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Mission)
	mem := (*C.px4_msgs__msg__Mission)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.mission_dataman_id = C.uint8_t(m.MissionDatamanId)
	mem.fence_dataman_id = C.uint8_t(m.FenceDatamanId)
	mem.safepoint_dataman_id = C.uint8_t(m.SafepointDatamanId)
	mem.count = C.uint16_t(m.Count)
	mem.current_seq = C.int32_t(m.CurrentSeq)
	mem.land_start_index = C.int32_t(m.LandStartIndex)
	mem.land_index = C.int32_t(m.LandIndex)
	mem.mission_id = C.uint32_t(m.MissionId)
	mem.geofence_id = C.uint32_t(m.GeofenceId)
	mem.safe_points_id = C.uint32_t(m.SafePointsId)
}

func (t _MissionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Mission)
	mem := (*C.px4_msgs__msg__Mission)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.MissionDatamanId = uint8(mem.mission_dataman_id)
	m.FenceDatamanId = uint8(mem.fence_dataman_id)
	m.SafepointDatamanId = uint8(mem.safepoint_dataman_id)
	m.Count = uint16(mem.count)
	m.CurrentSeq = int32(mem.current_seq)
	m.LandStartIndex = int32(mem.land_start_index)
	m.LandIndex = int32(mem.land_index)
	m.MissionId = uint32(mem.mission_id)
	m.GeofenceId = uint32(mem.geofence_id)
	m.SafePointsId = uint32(mem.safe_points_id)
}

func (t _MissionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Mission())
}

type CMission = C.px4_msgs__msg__Mission
type CMission__Sequence = C.px4_msgs__msg__Mission__Sequence

func Mission__Sequence_to_Go(goSlice *[]Mission, cSlice CMission__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Mission, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MissionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Mission__Sequence_to_C(cSlice *CMission__Sequence, goSlice []Mission) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Mission)(C.malloc(C.sizeof_struct_px4_msgs__msg__Mission * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MissionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Mission__Array_to_Go(goSlice []Mission, cSlice []CMission) {
	for i := 0; i < len(cSlice); i++ {
		MissionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Mission__Array_to_C(cSlice []CMission, goSlice []Mission) {
	for i := 0; i < len(goSlice); i++ {
		MissionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
