// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/action_request.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ActionRequest", ActionRequestTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ActionRequest", ActionRequestTypeSupport)
}

const (
	ActionRequest_ACTION_DISARM                         uint8 = 0
	ActionRequest_ACTION_ARM                            uint8 = 1
	ActionRequest_ACTION_TOGGLE_ARMING                  uint8 = 2
	ActionRequest_ACTION_UNKILL                         uint8 = 3
	ActionRequest_ACTION_KILL                           uint8 = 4
	ActionRequest_ACTION_SWITCH_MODE                    uint8 = 5
	ActionRequest_ACTION_VTOL_TRANSITION_TO_MULTICOPTER uint8 = 6
	ActionRequest_ACTION_VTOL_TRANSITION_TO_FIXEDWING   uint8 = 7
	ActionRequest_SOURCE_STICK_GESTURE                  uint8 = 0
	ActionRequest_SOURCE_RC_SWITCH                      uint8 = 1
	ActionRequest_SOURCE_RC_BUTTON                      uint8 = 2
	ActionRequest_SOURCE_RC_MODE_SLOT                   uint8 = 3
)

type ActionRequest struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds)
	Action    uint8  `yaml:"action"`    // what action is requested
	Source    uint8  `yaml:"source"`    // how the request was triggered
	Mode      uint8  `yaml:"mode"`      // for ACTION_SWITCH_MODE what mode is requested according to vehicle_status_s::NAVIGATION_STATE_*
}

// NewActionRequest creates a new ActionRequest with default values.
func NewActionRequest() *ActionRequest {
	self := ActionRequest{}
	self.SetDefaults()
	return &self
}

func (t *ActionRequest) Clone() *ActionRequest {
	c := &ActionRequest{}
	c.Timestamp = t.Timestamp
	c.Action = t.Action
	c.Source = t.Source
	c.Mode = t.Mode
	return c
}

func (t *ActionRequest) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActionRequest) SetDefaults() {
	t.Timestamp = 0
	t.Action = 0
	t.Source = 0
	t.Mode = 0
}

func (t *ActionRequest) GetTypeSupport() types.MessageTypeSupport {
	return ActionRequestTypeSupport
}

// ActionRequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActionRequestPublisher struct {
	*rclgo.Publisher
}

// NewActionRequestPublisher creates and returns a new publisher for the
// ActionRequest
func NewActionRequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActionRequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActionRequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActionRequestPublisher{pub}, nil
}

func (p *ActionRequestPublisher) Publish(msg *ActionRequest) error {
	return p.Publisher.Publish(msg)
}

// ActionRequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActionRequestSubscription struct {
	*rclgo.Subscription
}

// ActionRequestSubscriptionCallback type is used to provide a subscription
// handler function for a ActionRequestSubscription.
type ActionRequestSubscriptionCallback func(msg *ActionRequest, info *rclgo.MessageInfo, err error)

// NewActionRequestSubscription creates and returns a new subscription for the
// ActionRequest
func NewActionRequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActionRequestSubscriptionCallback) (*ActionRequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActionRequest
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActionRequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActionRequestSubscription{sub}, nil
}

func (s *ActionRequestSubscription) TakeMessage(out *ActionRequest) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActionRequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActionRequestSlice(dst, src []ActionRequest) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActionRequestTypeSupport types.MessageTypeSupport = _ActionRequestTypeSupport{}

type _ActionRequestTypeSupport struct{}

func (t _ActionRequestTypeSupport) New() types.Message {
	return NewActionRequest()
}

func (t _ActionRequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ActionRequest
	return (unsafe.Pointer)(C.px4_msgs__msg__ActionRequest__create())
}

func (t _ActionRequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ActionRequest__destroy((*C.px4_msgs__msg__ActionRequest)(pointer_to_free))
}

func (t _ActionRequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActionRequest)
	mem := (*C.px4_msgs__msg__ActionRequest)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.action = C.uint8_t(m.Action)
	mem.source = C.uint8_t(m.Source)
	mem.mode = C.uint8_t(m.Mode)
}

func (t _ActionRequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActionRequest)
	mem := (*C.px4_msgs__msg__ActionRequest)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Action = uint8(mem.action)
	m.Source = uint8(mem.source)
	m.Mode = uint8(mem.mode)
}

func (t _ActionRequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ActionRequest())
}

type CActionRequest = C.px4_msgs__msg__ActionRequest
type CActionRequest__Sequence = C.px4_msgs__msg__ActionRequest__Sequence

func ActionRequest__Sequence_to_Go(goSlice *[]ActionRequest, cSlice CActionRequest__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActionRequest, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActionRequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActionRequest__Sequence_to_C(cSlice *CActionRequest__Sequence, goSlice []ActionRequest) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ActionRequest)(C.malloc(C.sizeof_struct_px4_msgs__msg__ActionRequest * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActionRequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActionRequest__Array_to_Go(goSlice []ActionRequest, cSlice []CActionRequest) {
	for i := 0; i < len(cSlice); i++ {
		ActionRequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActionRequest__Array_to_C(cSlice []CActionRequest, goSlice []ActionRequest) {
	for i := 0; i < len(goSlice); i++ {
		ActionRequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
