// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/position_controller_landing_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/PositionControllerLandingStatus", PositionControllerLandingStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/PositionControllerLandingStatus", PositionControllerLandingStatusTypeSupport)
}

const (
	PositionControllerLandingStatus_NOT_ABORTED             uint8 = 0 // abort reasonsafter the manual operator abort, corresponds to individual bits of param FW_LND_ABORT
	PositionControllerLandingStatus_ABORTED_BY_OPERATOR     uint8 = 1
	PositionControllerLandingStatus_TERRAIN_NOT_FOUND       uint8 = 2 // FW_LND_ABORT (1 << 0)
	PositionControllerLandingStatus_TERRAIN_TIMEOUT         uint8 = 3 // FW_LND_ABORT (1 << 1)
	PositionControllerLandingStatus_UNKNOWN_ABORT_CRITERION uint8 = 4
)

type PositionControllerLandingStatus struct {
	Timestamp              uint64  `yaml:"timestamp"`                // [us] time since system start
	LateralTouchdownOffset float32 `yaml:"lateral_touchdown_offset"` // [m] lateral touchdown position offset manually commanded during landing
	Flaring                bool    `yaml:"flaring"`                  // true if the aircraft is flaring
	AbortStatus            uint8   `yaml:"abort_status"`             // abort status is:0 if not aborted>0 if aborted, with the singular abort criterion which triggered the landing abort enumerated by the following abort reasons
}

// NewPositionControllerLandingStatus creates a new PositionControllerLandingStatus with default values.
func NewPositionControllerLandingStatus() *PositionControllerLandingStatus {
	self := PositionControllerLandingStatus{}
	self.SetDefaults()
	return &self
}

func (t *PositionControllerLandingStatus) Clone() *PositionControllerLandingStatus {
	c := &PositionControllerLandingStatus{}
	c.Timestamp = t.Timestamp
	c.LateralTouchdownOffset = t.LateralTouchdownOffset
	c.Flaring = t.Flaring
	c.AbortStatus = t.AbortStatus
	return c
}

func (t *PositionControllerLandingStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PositionControllerLandingStatus) SetDefaults() {
	t.Timestamp = 0
	t.LateralTouchdownOffset = 0
	t.Flaring = false
	t.AbortStatus = 0
}

func (t *PositionControllerLandingStatus) GetTypeSupport() types.MessageTypeSupport {
	return PositionControllerLandingStatusTypeSupport
}

// PositionControllerLandingStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PositionControllerLandingStatusPublisher struct {
	*rclgo.Publisher
}

// NewPositionControllerLandingStatusPublisher creates and returns a new publisher for the
// PositionControllerLandingStatus
func NewPositionControllerLandingStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PositionControllerLandingStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PositionControllerLandingStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PositionControllerLandingStatusPublisher{pub}, nil
}

func (p *PositionControllerLandingStatusPublisher) Publish(msg *PositionControllerLandingStatus) error {
	return p.Publisher.Publish(msg)
}

// PositionControllerLandingStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PositionControllerLandingStatusSubscription struct {
	*rclgo.Subscription
}

// PositionControllerLandingStatusSubscriptionCallback type is used to provide a subscription
// handler function for a PositionControllerLandingStatusSubscription.
type PositionControllerLandingStatusSubscriptionCallback func(msg *PositionControllerLandingStatus, info *rclgo.MessageInfo, err error)

// NewPositionControllerLandingStatusSubscription creates and returns a new subscription for the
// PositionControllerLandingStatus
func NewPositionControllerLandingStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PositionControllerLandingStatusSubscriptionCallback) (*PositionControllerLandingStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PositionControllerLandingStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PositionControllerLandingStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PositionControllerLandingStatusSubscription{sub}, nil
}

func (s *PositionControllerLandingStatusSubscription) TakeMessage(out *PositionControllerLandingStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePositionControllerLandingStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePositionControllerLandingStatusSlice(dst, src []PositionControllerLandingStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PositionControllerLandingStatusTypeSupport types.MessageTypeSupport = _PositionControllerLandingStatusTypeSupport{}

type _PositionControllerLandingStatusTypeSupport struct{}

func (t _PositionControllerLandingStatusTypeSupport) New() types.Message {
	return NewPositionControllerLandingStatus()
}

func (t _PositionControllerLandingStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__PositionControllerLandingStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__PositionControllerLandingStatus__create())
}

func (t _PositionControllerLandingStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__PositionControllerLandingStatus__destroy((*C.px4_msgs__msg__PositionControllerLandingStatus)(pointer_to_free))
}

func (t _PositionControllerLandingStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PositionControllerLandingStatus)
	mem := (*C.px4_msgs__msg__PositionControllerLandingStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.lateral_touchdown_offset = C.float(m.LateralTouchdownOffset)
	mem.flaring = C.bool(m.Flaring)
	mem.abort_status = C.uint8_t(m.AbortStatus)
}

func (t _PositionControllerLandingStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PositionControllerLandingStatus)
	mem := (*C.px4_msgs__msg__PositionControllerLandingStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.LateralTouchdownOffset = float32(mem.lateral_touchdown_offset)
	m.Flaring = bool(mem.flaring)
	m.AbortStatus = uint8(mem.abort_status)
}

func (t _PositionControllerLandingStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__PositionControllerLandingStatus())
}

type CPositionControllerLandingStatus = C.px4_msgs__msg__PositionControllerLandingStatus
type CPositionControllerLandingStatus__Sequence = C.px4_msgs__msg__PositionControllerLandingStatus__Sequence

func PositionControllerLandingStatus__Sequence_to_Go(goSlice *[]PositionControllerLandingStatus, cSlice CPositionControllerLandingStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PositionControllerLandingStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PositionControllerLandingStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PositionControllerLandingStatus__Sequence_to_C(cSlice *CPositionControllerLandingStatus__Sequence, goSlice []PositionControllerLandingStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__PositionControllerLandingStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__PositionControllerLandingStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PositionControllerLandingStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PositionControllerLandingStatus__Array_to_Go(goSlice []PositionControllerLandingStatus, cSlice []CPositionControllerLandingStatus) {
	for i := 0; i < len(cSlice); i++ {
		PositionControllerLandingStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PositionControllerLandingStatus__Array_to_C(cSlice []CPositionControllerLandingStatus, goSlice []PositionControllerLandingStatus) {
	for i := 0; i < len(goSlice); i++ {
		PositionControllerLandingStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
