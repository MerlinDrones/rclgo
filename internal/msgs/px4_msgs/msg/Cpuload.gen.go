// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/cpuload.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Cpuload", CpuloadTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/Cpuload", CpuloadTypeSupport)
}

type Cpuload struct {
	Timestamp uint64  `yaml:"timestamp"` // time since system start (microseconds)
	Load      float32 `yaml:"load"`      // processor load from 0 to 1
	RamUsage  float32 `yaml:"ram_usage"` // RAM usage from 0 to 1
}

// NewCpuload creates a new Cpuload with default values.
func NewCpuload() *Cpuload {
	self := Cpuload{}
	self.SetDefaults()
	return &self
}

func (t *Cpuload) Clone() *Cpuload {
	c := &Cpuload{}
	c.Timestamp = t.Timestamp
	c.Load = t.Load
	c.RamUsage = t.RamUsage
	return c
}

func (t *Cpuload) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Cpuload) SetDefaults() {
	t.Timestamp = 0
	t.Load = 0
	t.RamUsage = 0
}

func (t *Cpuload) GetTypeSupport() types.MessageTypeSupport {
	return CpuloadTypeSupport
}

// CpuloadPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CpuloadPublisher struct {
	*rclgo.Publisher
}

// NewCpuloadPublisher creates and returns a new publisher for the
// Cpuload
func NewCpuloadPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CpuloadPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CpuloadTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CpuloadPublisher{pub}, nil
}

func (p *CpuloadPublisher) Publish(msg *Cpuload) error {
	return p.Publisher.Publish(msg)
}

// CpuloadSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CpuloadSubscription struct {
	*rclgo.Subscription
}

// CpuloadSubscriptionCallback type is used to provide a subscription
// handler function for a CpuloadSubscription.
type CpuloadSubscriptionCallback func(msg *Cpuload, info *rclgo.MessageInfo, err error)

// NewCpuloadSubscription creates and returns a new subscription for the
// Cpuload
func NewCpuloadSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CpuloadSubscriptionCallback) (*CpuloadSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Cpuload
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CpuloadTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CpuloadSubscription{sub}, nil
}

func (s *CpuloadSubscription) TakeMessage(out *Cpuload) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCpuloadSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCpuloadSlice(dst, src []Cpuload) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CpuloadTypeSupport types.MessageTypeSupport = _CpuloadTypeSupport{}

type _CpuloadTypeSupport struct{}

func (t _CpuloadTypeSupport) New() types.Message {
	return NewCpuload()
}

func (t _CpuloadTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Cpuload
	return (unsafe.Pointer)(C.px4_msgs__msg__Cpuload__create())
}

func (t _CpuloadTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Cpuload__destroy((*C.px4_msgs__msg__Cpuload)(pointer_to_free))
}

func (t _CpuloadTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Cpuload)
	mem := (*C.px4_msgs__msg__Cpuload)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.load = C.float(m.Load)
	mem.ram_usage = C.float(m.RamUsage)
}

func (t _CpuloadTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Cpuload)
	mem := (*C.px4_msgs__msg__Cpuload)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Load = float32(mem.load)
	m.RamUsage = float32(mem.ram_usage)
}

func (t _CpuloadTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Cpuload())
}

type CCpuload = C.px4_msgs__msg__Cpuload
type CCpuload__Sequence = C.px4_msgs__msg__Cpuload__Sequence

func Cpuload__Sequence_to_Go(goSlice *[]Cpuload, cSlice CCpuload__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Cpuload, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CpuloadTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Cpuload__Sequence_to_C(cSlice *CCpuload__Sequence, goSlice []Cpuload) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Cpuload)(C.malloc(C.sizeof_struct_px4_msgs__msg__Cpuload * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CpuloadTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Cpuload__Array_to_Go(goSlice []Cpuload, cSlice []CCpuload) {
	for i := 0; i < len(cSlice); i++ {
		CpuloadTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Cpuload__Array_to_C(cSlice []CCpuload, goSlice []Cpuload) {
	for i := 0; i < len(goSlice); i++ {
		CpuloadTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
