// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/goto_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GotoSetpoint", GotoSetpointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GotoSetpoint", GotoSetpointTypeSupport)
}

type GotoSetpoint struct {
	Timestamp                 uint64     `yaml:"timestamp"`                     // time since system start (microseconds)
	Position                  [3]float32 `yaml:"position"`                      // [m] NED local world frame. setpoints
	FlagControlHeading        bool       `yaml:"flag_control_heading"`          // true if heading is to be controlled
	Heading                   float32    `yaml:"heading"`                       // (optional) [rad] [-pi,pi] from North
	FlagSetMaxHorizontalSpeed bool       `yaml:"flag_set_max_horizontal_speed"` // true if setting a non-default horizontal speed limit. constraints
	MaxHorizontalSpeed        float32    `yaml:"max_horizontal_speed"`          // (optional) [m/s] maximum speed (absolute) in the NE-plane
	FlagSetMaxVerticalSpeed   bool       `yaml:"flag_set_max_vertical_speed"`   // true if setting a non-default vertical speed limit
	MaxVerticalSpeed          float32    `yaml:"max_vertical_speed"`            // (optional) [m/s] maximum speed (absolute) in the D-axis
	FlagSetMaxHeadingRate     bool       `yaml:"flag_set_max_heading_rate"`     // true if setting a non-default heading rate limit
	MaxHeadingRate            float32    `yaml:"max_heading_rate"`              // (optional) [rad/s] maximum heading rate (absolute)
}

// NewGotoSetpoint creates a new GotoSetpoint with default values.
func NewGotoSetpoint() *GotoSetpoint {
	self := GotoSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *GotoSetpoint) Clone() *GotoSetpoint {
	c := &GotoSetpoint{}
	c.Timestamp = t.Timestamp
	c.Position = t.Position
	c.FlagControlHeading = t.FlagControlHeading
	c.Heading = t.Heading
	c.FlagSetMaxHorizontalSpeed = t.FlagSetMaxHorizontalSpeed
	c.MaxHorizontalSpeed = t.MaxHorizontalSpeed
	c.FlagSetMaxVerticalSpeed = t.FlagSetMaxVerticalSpeed
	c.MaxVerticalSpeed = t.MaxVerticalSpeed
	c.FlagSetMaxHeadingRate = t.FlagSetMaxHeadingRate
	c.MaxHeadingRate = t.MaxHeadingRate
	return c
}

func (t *GotoSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GotoSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.Position = [3]float32{}
	t.FlagControlHeading = false
	t.Heading = 0
	t.FlagSetMaxHorizontalSpeed = false
	t.MaxHorizontalSpeed = 0
	t.FlagSetMaxVerticalSpeed = false
	t.MaxVerticalSpeed = 0
	t.FlagSetMaxHeadingRate = false
	t.MaxHeadingRate = 0
}

func (t *GotoSetpoint) GetTypeSupport() types.MessageTypeSupport {
	return GotoSetpointTypeSupport
}

// GotoSetpointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GotoSetpointPublisher struct {
	*rclgo.Publisher
}

// NewGotoSetpointPublisher creates and returns a new publisher for the
// GotoSetpoint
func NewGotoSetpointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GotoSetpointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GotoSetpointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GotoSetpointPublisher{pub}, nil
}

func (p *GotoSetpointPublisher) Publish(msg *GotoSetpoint) error {
	return p.Publisher.Publish(msg)
}

// GotoSetpointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GotoSetpointSubscription struct {
	*rclgo.Subscription
}

// GotoSetpointSubscriptionCallback type is used to provide a subscription
// handler function for a GotoSetpointSubscription.
type GotoSetpointSubscriptionCallback func(msg *GotoSetpoint, info *rclgo.MessageInfo, err error)

// NewGotoSetpointSubscription creates and returns a new subscription for the
// GotoSetpoint
func NewGotoSetpointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GotoSetpointSubscriptionCallback) (*GotoSetpointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GotoSetpoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GotoSetpointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GotoSetpointSubscription{sub}, nil
}

func (s *GotoSetpointSubscription) TakeMessage(out *GotoSetpoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGotoSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGotoSetpointSlice(dst, src []GotoSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GotoSetpointTypeSupport types.MessageTypeSupport = _GotoSetpointTypeSupport{}

type _GotoSetpointTypeSupport struct{}

func (t _GotoSetpointTypeSupport) New() types.Message {
	return NewGotoSetpoint()
}

func (t _GotoSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GotoSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__GotoSetpoint__create())
}

func (t _GotoSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GotoSetpoint__destroy((*C.px4_msgs__msg__GotoSetpoint)(pointer_to_free))
}

func (t _GotoSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GotoSetpoint)
	mem := (*C.px4_msgs__msg__GotoSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)), m.Position[:])
	mem.flag_control_heading = C.bool(m.FlagControlHeading)
	mem.heading = C.float(m.Heading)
	mem.flag_set_max_horizontal_speed = C.bool(m.FlagSetMaxHorizontalSpeed)
	mem.max_horizontal_speed = C.float(m.MaxHorizontalSpeed)
	mem.flag_set_max_vertical_speed = C.bool(m.FlagSetMaxVerticalSpeed)
	mem.max_vertical_speed = C.float(m.MaxVerticalSpeed)
	mem.flag_set_max_heading_rate = C.bool(m.FlagSetMaxHeadingRate)
	mem.max_heading_rate = C.float(m.MaxHeadingRate)
}

func (t _GotoSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GotoSetpoint)
	mem := (*C.px4_msgs__msg__GotoSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_Go(m.Position[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)))
	m.FlagControlHeading = bool(mem.flag_control_heading)
	m.Heading = float32(mem.heading)
	m.FlagSetMaxHorizontalSpeed = bool(mem.flag_set_max_horizontal_speed)
	m.MaxHorizontalSpeed = float32(mem.max_horizontal_speed)
	m.FlagSetMaxVerticalSpeed = bool(mem.flag_set_max_vertical_speed)
	m.MaxVerticalSpeed = float32(mem.max_vertical_speed)
	m.FlagSetMaxHeadingRate = bool(mem.flag_set_max_heading_rate)
	m.MaxHeadingRate = float32(mem.max_heading_rate)
}

func (t _GotoSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GotoSetpoint())
}

type CGotoSetpoint = C.px4_msgs__msg__GotoSetpoint
type CGotoSetpoint__Sequence = C.px4_msgs__msg__GotoSetpoint__Sequence

func GotoSetpoint__Sequence_to_Go(goSlice *[]GotoSetpoint, cSlice CGotoSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GotoSetpoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GotoSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GotoSetpoint__Sequence_to_C(cSlice *CGotoSetpoint__Sequence, goSlice []GotoSetpoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GotoSetpoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__GotoSetpoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GotoSetpointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GotoSetpoint__Array_to_Go(goSlice []GotoSetpoint, cSlice []CGotoSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		GotoSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GotoSetpoint__Array_to_C(cSlice []CGotoSetpoint, goSlice []GotoSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		GotoSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
