// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/flight_phase_estimation.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/FlightPhaseEstimation", FlightPhaseEstimationTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/FlightPhaseEstimation", FlightPhaseEstimationTypeSupport)
}

const (
	FlightPhaseEstimation_FLIGHT_PHASE_UNKNOWN uint8 = 0 // vehicle flight phase is unknown
	FlightPhaseEstimation_FLIGHT_PHASE_LEVEL   uint8 = 1 // Vehicle is in level flight
	FlightPhaseEstimation_FLIGHT_PHASE_DESCEND uint8 = 2 // vehicle is in descend
	FlightPhaseEstimation_FLIGHT_PHASE_CLIMB   uint8 = 3 // vehicle is climbing
)

type FlightPhaseEstimation struct {
	Timestamp   uint64 `yaml:"timestamp"`    // time since system start (microseconds)
	FlightPhase uint8  `yaml:"flight_phase"` // Estimate of current flight phase
}

// NewFlightPhaseEstimation creates a new FlightPhaseEstimation with default values.
func NewFlightPhaseEstimation() *FlightPhaseEstimation {
	self := FlightPhaseEstimation{}
	self.SetDefaults()
	return &self
}

func (t *FlightPhaseEstimation) Clone() *FlightPhaseEstimation {
	c := &FlightPhaseEstimation{}
	c.Timestamp = t.Timestamp
	c.FlightPhase = t.FlightPhase
	return c
}

func (t *FlightPhaseEstimation) CloneMsg() types.Message {
	return t.Clone()
}

func (t *FlightPhaseEstimation) SetDefaults() {
	t.Timestamp = 0
	t.FlightPhase = 0
}

func (t *FlightPhaseEstimation) GetTypeSupport() types.MessageTypeSupport {
	return FlightPhaseEstimationTypeSupport
}

// FlightPhaseEstimationPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FlightPhaseEstimationPublisher struct {
	*rclgo.Publisher
}

// NewFlightPhaseEstimationPublisher creates and returns a new publisher for the
// FlightPhaseEstimation
func NewFlightPhaseEstimationPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FlightPhaseEstimationPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FlightPhaseEstimationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FlightPhaseEstimationPublisher{pub}, nil
}

func (p *FlightPhaseEstimationPublisher) Publish(msg *FlightPhaseEstimation) error {
	return p.Publisher.Publish(msg)
}

// FlightPhaseEstimationSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FlightPhaseEstimationSubscription struct {
	*rclgo.Subscription
}

// FlightPhaseEstimationSubscriptionCallback type is used to provide a subscription
// handler function for a FlightPhaseEstimationSubscription.
type FlightPhaseEstimationSubscriptionCallback func(msg *FlightPhaseEstimation, info *rclgo.MessageInfo, err error)

// NewFlightPhaseEstimationSubscription creates and returns a new subscription for the
// FlightPhaseEstimation
func NewFlightPhaseEstimationSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FlightPhaseEstimationSubscriptionCallback) (*FlightPhaseEstimationSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg FlightPhaseEstimation
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FlightPhaseEstimationTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FlightPhaseEstimationSubscription{sub}, nil
}

func (s *FlightPhaseEstimationSubscription) TakeMessage(out *FlightPhaseEstimation) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFlightPhaseEstimationSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFlightPhaseEstimationSlice(dst, src []FlightPhaseEstimation) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FlightPhaseEstimationTypeSupport types.MessageTypeSupport = _FlightPhaseEstimationTypeSupport{}

type _FlightPhaseEstimationTypeSupport struct{}

func (t _FlightPhaseEstimationTypeSupport) New() types.Message {
	return NewFlightPhaseEstimation()
}

func (t _FlightPhaseEstimationTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__FlightPhaseEstimation
	return (unsafe.Pointer)(C.px4_msgs__msg__FlightPhaseEstimation__create())
}

func (t _FlightPhaseEstimationTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__FlightPhaseEstimation__destroy((*C.px4_msgs__msg__FlightPhaseEstimation)(pointer_to_free))
}

func (t _FlightPhaseEstimationTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*FlightPhaseEstimation)
	mem := (*C.px4_msgs__msg__FlightPhaseEstimation)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.flight_phase = C.uint8_t(m.FlightPhase)
}

func (t _FlightPhaseEstimationTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FlightPhaseEstimation)
	mem := (*C.px4_msgs__msg__FlightPhaseEstimation)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.FlightPhase = uint8(mem.flight_phase)
}

func (t _FlightPhaseEstimationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__FlightPhaseEstimation())
}

type CFlightPhaseEstimation = C.px4_msgs__msg__FlightPhaseEstimation
type CFlightPhaseEstimation__Sequence = C.px4_msgs__msg__FlightPhaseEstimation__Sequence

func FlightPhaseEstimation__Sequence_to_Go(goSlice *[]FlightPhaseEstimation, cSlice CFlightPhaseEstimation__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FlightPhaseEstimation, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FlightPhaseEstimationTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func FlightPhaseEstimation__Sequence_to_C(cSlice *CFlightPhaseEstimation__Sequence, goSlice []FlightPhaseEstimation) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__FlightPhaseEstimation)(C.malloc(C.sizeof_struct_px4_msgs__msg__FlightPhaseEstimation * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FlightPhaseEstimationTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func FlightPhaseEstimation__Array_to_Go(goSlice []FlightPhaseEstimation, cSlice []CFlightPhaseEstimation) {
	for i := 0; i < len(cSlice); i++ {
		FlightPhaseEstimationTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func FlightPhaseEstimation__Array_to_C(cSlice []CFlightPhaseEstimation, goSlice []FlightPhaseEstimation) {
	for i := 0; i < len(goSlice); i++ {
		FlightPhaseEstimationTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
