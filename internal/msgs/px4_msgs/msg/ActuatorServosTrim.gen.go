// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/actuator_servos_trim.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ActuatorServosTrim", ActuatorServosTrimTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ActuatorServosTrim", ActuatorServosTrimTypeSupport)
}

const (
	ActuatorServosTrim_NUM_CONTROLS uint8 = 8
)

type ActuatorServosTrim struct {
	Timestamp uint64     `yaml:"timestamp"` // time since system start (microseconds). Servo trims, added as offset to servo outputs
	Trim      [8]float32 `yaml:"trim"`      // range: [-1, 1]
}

// NewActuatorServosTrim creates a new ActuatorServosTrim with default values.
func NewActuatorServosTrim() *ActuatorServosTrim {
	self := ActuatorServosTrim{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorServosTrim) Clone() *ActuatorServosTrim {
	c := &ActuatorServosTrim{}
	c.Timestamp = t.Timestamp
	c.Trim = t.Trim
	return c
}

func (t *ActuatorServosTrim) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorServosTrim) SetDefaults() {
	t.Timestamp = 0
	t.Trim = [8]float32{}
}

func (t *ActuatorServosTrim) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorServosTrimTypeSupport
}

// ActuatorServosTrimPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorServosTrimPublisher struct {
	*rclgo.Publisher
}

// NewActuatorServosTrimPublisher creates and returns a new publisher for the
// ActuatorServosTrim
func NewActuatorServosTrimPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorServosTrimPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorServosTrimTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorServosTrimPublisher{pub}, nil
}

func (p *ActuatorServosTrimPublisher) Publish(msg *ActuatorServosTrim) error {
	return p.Publisher.Publish(msg)
}

// ActuatorServosTrimSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorServosTrimSubscription struct {
	*rclgo.Subscription
}

// ActuatorServosTrimSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorServosTrimSubscription.
type ActuatorServosTrimSubscriptionCallback func(msg *ActuatorServosTrim, info *rclgo.MessageInfo, err error)

// NewActuatorServosTrimSubscription creates and returns a new subscription for the
// ActuatorServosTrim
func NewActuatorServosTrimSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorServosTrimSubscriptionCallback) (*ActuatorServosTrimSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorServosTrim
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorServosTrimTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorServosTrimSubscription{sub}, nil
}

func (s *ActuatorServosTrimSubscription) TakeMessage(out *ActuatorServosTrim) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorServosTrimSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorServosTrimSlice(dst, src []ActuatorServosTrim) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorServosTrimTypeSupport types.MessageTypeSupport = _ActuatorServosTrimTypeSupport{}

type _ActuatorServosTrimTypeSupport struct{}

func (t _ActuatorServosTrimTypeSupport) New() types.Message {
	return NewActuatorServosTrim()
}

func (t _ActuatorServosTrimTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ActuatorServosTrim
	return (unsafe.Pointer)(C.px4_msgs__msg__ActuatorServosTrim__create())
}

func (t _ActuatorServosTrimTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ActuatorServosTrim__destroy((*C.px4_msgs__msg__ActuatorServosTrim)(pointer_to_free))
}

func (t _ActuatorServosTrimTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorServosTrim)
	mem := (*C.px4_msgs__msg__ActuatorServosTrim)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_trim := mem.trim[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_trim)), m.Trim[:])
}

func (t _ActuatorServosTrimTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorServosTrim)
	mem := (*C.px4_msgs__msg__ActuatorServosTrim)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_trim := mem.trim[:]
	primitives.Float32__Array_to_Go(m.Trim[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_trim)))
}

func (t _ActuatorServosTrimTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ActuatorServosTrim())
}

type CActuatorServosTrim = C.px4_msgs__msg__ActuatorServosTrim
type CActuatorServosTrim__Sequence = C.px4_msgs__msg__ActuatorServosTrim__Sequence

func ActuatorServosTrim__Sequence_to_Go(goSlice *[]ActuatorServosTrim, cSlice CActuatorServosTrim__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorServosTrim, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorServosTrimTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorServosTrim__Sequence_to_C(cSlice *CActuatorServosTrim__Sequence, goSlice []ActuatorServosTrim) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ActuatorServosTrim)(C.malloc(C.sizeof_struct_px4_msgs__msg__ActuatorServosTrim * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorServosTrimTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorServosTrim__Array_to_Go(goSlice []ActuatorServosTrim, cSlice []CActuatorServosTrim) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorServosTrimTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorServosTrim__Array_to_C(cSlice []CActuatorServosTrim, goSlice []ActuatorServosTrim) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorServosTrimTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
