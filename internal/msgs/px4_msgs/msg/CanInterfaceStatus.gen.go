// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/can_interface_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/CanInterfaceStatus", CanInterfaceStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/CanInterfaceStatus", CanInterfaceStatusTypeSupport)
}

type CanInterfaceStatus struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds)
	Interface uint8  `yaml:"interface"`
	IoErrors  uint64 `yaml:"io_errors"`
	FramesTx  uint64 `yaml:"frames_tx"`
	FramesRx  uint64 `yaml:"frames_rx"`
}

// NewCanInterfaceStatus creates a new CanInterfaceStatus with default values.
func NewCanInterfaceStatus() *CanInterfaceStatus {
	self := CanInterfaceStatus{}
	self.SetDefaults()
	return &self
}

func (t *CanInterfaceStatus) Clone() *CanInterfaceStatus {
	c := &CanInterfaceStatus{}
	c.Timestamp = t.Timestamp
	c.Interface = t.Interface
	c.IoErrors = t.IoErrors
	c.FramesTx = t.FramesTx
	c.FramesRx = t.FramesRx
	return c
}

func (t *CanInterfaceStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CanInterfaceStatus) SetDefaults() {
	t.Timestamp = 0
	t.Interface = 0
	t.IoErrors = 0
	t.FramesTx = 0
	t.FramesRx = 0
}

func (t *CanInterfaceStatus) GetTypeSupport() types.MessageTypeSupport {
	return CanInterfaceStatusTypeSupport
}

// CanInterfaceStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CanInterfaceStatusPublisher struct {
	*rclgo.Publisher
}

// NewCanInterfaceStatusPublisher creates and returns a new publisher for the
// CanInterfaceStatus
func NewCanInterfaceStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CanInterfaceStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CanInterfaceStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CanInterfaceStatusPublisher{pub}, nil
}

func (p *CanInterfaceStatusPublisher) Publish(msg *CanInterfaceStatus) error {
	return p.Publisher.Publish(msg)
}

// CanInterfaceStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CanInterfaceStatusSubscription struct {
	*rclgo.Subscription
}

// CanInterfaceStatusSubscriptionCallback type is used to provide a subscription
// handler function for a CanInterfaceStatusSubscription.
type CanInterfaceStatusSubscriptionCallback func(msg *CanInterfaceStatus, info *rclgo.MessageInfo, err error)

// NewCanInterfaceStatusSubscription creates and returns a new subscription for the
// CanInterfaceStatus
func NewCanInterfaceStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CanInterfaceStatusSubscriptionCallback) (*CanInterfaceStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CanInterfaceStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CanInterfaceStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CanInterfaceStatusSubscription{sub}, nil
}

func (s *CanInterfaceStatusSubscription) TakeMessage(out *CanInterfaceStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCanInterfaceStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCanInterfaceStatusSlice(dst, src []CanInterfaceStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CanInterfaceStatusTypeSupport types.MessageTypeSupport = _CanInterfaceStatusTypeSupport{}

type _CanInterfaceStatusTypeSupport struct{}

func (t _CanInterfaceStatusTypeSupport) New() types.Message {
	return NewCanInterfaceStatus()
}

func (t _CanInterfaceStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__CanInterfaceStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__CanInterfaceStatus__create())
}

func (t _CanInterfaceStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__CanInterfaceStatus__destroy((*C.px4_msgs__msg__CanInterfaceStatus)(pointer_to_free))
}

func (t _CanInterfaceStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CanInterfaceStatus)
	mem := (*C.px4_msgs__msg__CanInterfaceStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem._interface = C.uint8_t(m.Interface)
	mem.io_errors = C.uint64_t(m.IoErrors)
	mem.frames_tx = C.uint64_t(m.FramesTx)
	mem.frames_rx = C.uint64_t(m.FramesRx)
}

func (t _CanInterfaceStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CanInterfaceStatus)
	mem := (*C.px4_msgs__msg__CanInterfaceStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Interface = uint8(mem._interface)
	m.IoErrors = uint64(mem.io_errors)
	m.FramesTx = uint64(mem.frames_tx)
	m.FramesRx = uint64(mem.frames_rx)
}

func (t _CanInterfaceStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__CanInterfaceStatus())
}

type CCanInterfaceStatus = C.px4_msgs__msg__CanInterfaceStatus
type CCanInterfaceStatus__Sequence = C.px4_msgs__msg__CanInterfaceStatus__Sequence

func CanInterfaceStatus__Sequence_to_Go(goSlice *[]CanInterfaceStatus, cSlice CCanInterfaceStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CanInterfaceStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CanInterfaceStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CanInterfaceStatus__Sequence_to_C(cSlice *CCanInterfaceStatus__Sequence, goSlice []CanInterfaceStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__CanInterfaceStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__CanInterfaceStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CanInterfaceStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CanInterfaceStatus__Array_to_Go(goSlice []CanInterfaceStatus, cSlice []CCanInterfaceStatus) {
	for i := 0; i < len(cSlice); i++ {
		CanInterfaceStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CanInterfaceStatus__Array_to_C(cSlice []CCanInterfaceStatus, goSlice []CanInterfaceStatus) {
	for i := 0; i < len(goSlice); i++ {
		CanInterfaceStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
