// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gpio_out.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GpioOut", GpioOutTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GpioOut", GpioOutTypeSupport)
}

type GpioOut struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds)
	DeviceId  uint32 `yaml:"device_id"` // Device id
	Mask      uint32 `yaml:"mask"`      // pin mask
	State     uint32 `yaml:"state"`     // pin state mask
}

// NewGpioOut creates a new GpioOut with default values.
func NewGpioOut() *GpioOut {
	self := GpioOut{}
	self.SetDefaults()
	return &self
}

func (t *GpioOut) Clone() *GpioOut {
	c := &GpioOut{}
	c.Timestamp = t.Timestamp
	c.DeviceId = t.DeviceId
	c.Mask = t.Mask
	c.State = t.State
	return c
}

func (t *GpioOut) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GpioOut) SetDefaults() {
	t.Timestamp = 0
	t.DeviceId = 0
	t.Mask = 0
	t.State = 0
}

func (t *GpioOut) GetTypeSupport() types.MessageTypeSupport {
	return GpioOutTypeSupport
}

// GpioOutPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GpioOutPublisher struct {
	*rclgo.Publisher
}

// NewGpioOutPublisher creates and returns a new publisher for the
// GpioOut
func NewGpioOutPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GpioOutPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GpioOutTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GpioOutPublisher{pub}, nil
}

func (p *GpioOutPublisher) Publish(msg *GpioOut) error {
	return p.Publisher.Publish(msg)
}

// GpioOutSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GpioOutSubscription struct {
	*rclgo.Subscription
}

// GpioOutSubscriptionCallback type is used to provide a subscription
// handler function for a GpioOutSubscription.
type GpioOutSubscriptionCallback func(msg *GpioOut, info *rclgo.MessageInfo, err error)

// NewGpioOutSubscription creates and returns a new subscription for the
// GpioOut
func NewGpioOutSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GpioOutSubscriptionCallback) (*GpioOutSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GpioOut
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GpioOutTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GpioOutSubscription{sub}, nil
}

func (s *GpioOutSubscription) TakeMessage(out *GpioOut) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGpioOutSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGpioOutSlice(dst, src []GpioOut) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GpioOutTypeSupport types.MessageTypeSupport = _GpioOutTypeSupport{}

type _GpioOutTypeSupport struct{}

func (t _GpioOutTypeSupport) New() types.Message {
	return NewGpioOut()
}

func (t _GpioOutTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GpioOut
	return (unsafe.Pointer)(C.px4_msgs__msg__GpioOut__create())
}

func (t _GpioOutTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GpioOut__destroy((*C.px4_msgs__msg__GpioOut)(pointer_to_free))
}

func (t _GpioOutTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GpioOut)
	mem := (*C.px4_msgs__msg__GpioOut)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.mask = C.uint32_t(m.Mask)
	mem.state = C.uint32_t(m.State)
}

func (t _GpioOutTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GpioOut)
	mem := (*C.px4_msgs__msg__GpioOut)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceId = uint32(mem.device_id)
	m.Mask = uint32(mem.mask)
	m.State = uint32(mem.state)
}

func (t _GpioOutTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GpioOut())
}

type CGpioOut = C.px4_msgs__msg__GpioOut
type CGpioOut__Sequence = C.px4_msgs__msg__GpioOut__Sequence

func GpioOut__Sequence_to_Go(goSlice *[]GpioOut, cSlice CGpioOut__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GpioOut, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GpioOutTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GpioOut__Sequence_to_C(cSlice *CGpioOut__Sequence, goSlice []GpioOut) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GpioOut)(C.malloc(C.sizeof_struct_px4_msgs__msg__GpioOut * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GpioOutTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GpioOut__Array_to_Go(goSlice []GpioOut, cSlice []CGpioOut) {
	for i := 0; i < len(cSlice); i++ {
		GpioOutTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GpioOut__Array_to_C(cSlice []CGpioOut, goSlice []GpioOut) {
	for i := 0; i < len(goSlice); i++ {
		GpioOutTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
