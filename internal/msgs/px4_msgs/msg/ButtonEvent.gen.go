// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/button_event.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ButtonEvent", ButtonEventTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ButtonEvent", ButtonEventTypeSupport)
}

const (
	ButtonEvent_ORB_QUEUE_LENGTH uint8 = 2
)

type ButtonEvent struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds)
	Triggered bool   `yaml:"triggered"` // Set to true if the event is triggered
}

// NewButtonEvent creates a new ButtonEvent with default values.
func NewButtonEvent() *ButtonEvent {
	self := ButtonEvent{}
	self.SetDefaults()
	return &self
}

func (t *ButtonEvent) Clone() *ButtonEvent {
	c := &ButtonEvent{}
	c.Timestamp = t.Timestamp
	c.Triggered = t.Triggered
	return c
}

func (t *ButtonEvent) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ButtonEvent) SetDefaults() {
	t.Timestamp = 0
	t.Triggered = false
}

func (t *ButtonEvent) GetTypeSupport() types.MessageTypeSupport {
	return ButtonEventTypeSupport
}

// ButtonEventPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ButtonEventPublisher struct {
	*rclgo.Publisher
}

// NewButtonEventPublisher creates and returns a new publisher for the
// ButtonEvent
func NewButtonEventPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ButtonEventPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ButtonEventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ButtonEventPublisher{pub}, nil
}

func (p *ButtonEventPublisher) Publish(msg *ButtonEvent) error {
	return p.Publisher.Publish(msg)
}

// ButtonEventSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ButtonEventSubscription struct {
	*rclgo.Subscription
}

// ButtonEventSubscriptionCallback type is used to provide a subscription
// handler function for a ButtonEventSubscription.
type ButtonEventSubscriptionCallback func(msg *ButtonEvent, info *rclgo.MessageInfo, err error)

// NewButtonEventSubscription creates and returns a new subscription for the
// ButtonEvent
func NewButtonEventSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ButtonEventSubscriptionCallback) (*ButtonEventSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ButtonEvent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ButtonEventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ButtonEventSubscription{sub}, nil
}

func (s *ButtonEventSubscription) TakeMessage(out *ButtonEvent) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneButtonEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneButtonEventSlice(dst, src []ButtonEvent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ButtonEventTypeSupport types.MessageTypeSupport = _ButtonEventTypeSupport{}

type _ButtonEventTypeSupport struct{}

func (t _ButtonEventTypeSupport) New() types.Message {
	return NewButtonEvent()
}

func (t _ButtonEventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ButtonEvent
	return (unsafe.Pointer)(C.px4_msgs__msg__ButtonEvent__create())
}

func (t _ButtonEventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ButtonEvent__destroy((*C.px4_msgs__msg__ButtonEvent)(pointer_to_free))
}

func (t _ButtonEventTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ButtonEvent)
	mem := (*C.px4_msgs__msg__ButtonEvent)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.triggered = C.bool(m.Triggered)
}

func (t _ButtonEventTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ButtonEvent)
	mem := (*C.px4_msgs__msg__ButtonEvent)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Triggered = bool(mem.triggered)
}

func (t _ButtonEventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ButtonEvent())
}

type CButtonEvent = C.px4_msgs__msg__ButtonEvent
type CButtonEvent__Sequence = C.px4_msgs__msg__ButtonEvent__Sequence

func ButtonEvent__Sequence_to_Go(goSlice *[]ButtonEvent, cSlice CButtonEvent__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ButtonEvent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ButtonEventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ButtonEvent__Sequence_to_C(cSlice *CButtonEvent__Sequence, goSlice []ButtonEvent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ButtonEvent)(C.malloc(C.sizeof_struct_px4_msgs__msg__ButtonEvent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ButtonEventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ButtonEvent__Array_to_Go(goSlice []ButtonEvent, cSlice []CButtonEvent) {
	for i := 0; i < len(cSlice); i++ {
		ButtonEventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ButtonEvent__Array_to_C(cSlice []CButtonEvent, goSlice []ButtonEvent) {
	for i := 0; i < len(goSlice); i++ {
		ButtonEventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
