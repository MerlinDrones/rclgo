// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/debug_vect.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/DebugVect", DebugVectTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/DebugVect", DebugVectTypeSupport)
}

type DebugVect struct {
	Timestamp uint64   `yaml:"timestamp"` // time since system start (microseconds)
	Name      [10]byte `yaml:"name"`      // max. 10 characters as key / name
	X         float32  `yaml:"x"`         // x value
	Y         float32  `yaml:"y"`         // y value
	Z         float32  `yaml:"z"`         // z value
}

// NewDebugVect creates a new DebugVect with default values.
func NewDebugVect() *DebugVect {
	self := DebugVect{}
	self.SetDefaults()
	return &self
}

func (t *DebugVect) Clone() *DebugVect {
	c := &DebugVect{}
	c.Timestamp = t.Timestamp
	c.Name = t.Name
	c.X = t.X
	c.Y = t.Y
	c.Z = t.Z
	return c
}

func (t *DebugVect) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DebugVect) SetDefaults() {
	t.Timestamp = 0
	t.Name = [10]byte{}
	t.X = 0
	t.Y = 0
	t.Z = 0
}

func (t *DebugVect) GetTypeSupport() types.MessageTypeSupport {
	return DebugVectTypeSupport
}

// DebugVectPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DebugVectPublisher struct {
	*rclgo.Publisher
}

// NewDebugVectPublisher creates and returns a new publisher for the
// DebugVect
func NewDebugVectPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DebugVectPublisher, error) {
	pub, err := node.NewPublisher(topic_name, DebugVectTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DebugVectPublisher{pub}, nil
}

func (p *DebugVectPublisher) Publish(msg *DebugVect) error {
	return p.Publisher.Publish(msg)
}

// DebugVectSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DebugVectSubscription struct {
	*rclgo.Subscription
}

// DebugVectSubscriptionCallback type is used to provide a subscription
// handler function for a DebugVectSubscription.
type DebugVectSubscriptionCallback func(msg *DebugVect, info *rclgo.MessageInfo, err error)

// NewDebugVectSubscription creates and returns a new subscription for the
// DebugVect
func NewDebugVectSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DebugVectSubscriptionCallback) (*DebugVectSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DebugVect
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DebugVectTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DebugVectSubscription{sub}, nil
}

func (s *DebugVectSubscription) TakeMessage(out *DebugVect) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDebugVectSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDebugVectSlice(dst, src []DebugVect) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DebugVectTypeSupport types.MessageTypeSupport = _DebugVectTypeSupport{}

type _DebugVectTypeSupport struct{}

func (t _DebugVectTypeSupport) New() types.Message {
	return NewDebugVect()
}

func (t _DebugVectTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DebugVect
	return (unsafe.Pointer)(C.px4_msgs__msg__DebugVect__create())
}

func (t _DebugVectTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DebugVect__destroy((*C.px4_msgs__msg__DebugVect)(pointer_to_free))
}

func (t _DebugVectTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DebugVect)
	mem := (*C.px4_msgs__msg__DebugVect)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)), m.Name[:])
	mem.x = C.float(m.X)
	mem.y = C.float(m.Y)
	mem.z = C.float(m.Z)
}

func (t _DebugVectTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DebugVect)
	mem := (*C.px4_msgs__msg__DebugVect)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_Go(m.Name[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)))
	m.X = float32(mem.x)
	m.Y = float32(mem.y)
	m.Z = float32(mem.z)
}

func (t _DebugVectTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DebugVect())
}

type CDebugVect = C.px4_msgs__msg__DebugVect
type CDebugVect__Sequence = C.px4_msgs__msg__DebugVect__Sequence

func DebugVect__Sequence_to_Go(goSlice *[]DebugVect, cSlice CDebugVect__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DebugVect, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DebugVectTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DebugVect__Sequence_to_C(cSlice *CDebugVect__Sequence, goSlice []DebugVect) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DebugVect)(C.malloc(C.sizeof_struct_px4_msgs__msg__DebugVect * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DebugVectTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DebugVect__Array_to_Go(goSlice []DebugVect, cSlice []CDebugVect) {
	for i := 0; i < len(cSlice); i++ {
		DebugVectTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DebugVect__Array_to_C(cSlice []CDebugVect, goSlice []DebugVect) {
	for i := 0; i < len(goSlice); i++ {
		DebugVectTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
