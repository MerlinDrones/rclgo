// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_uwb.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorUwb", SensorUwbTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SensorUwb", SensorUwbTypeSupport)
}

type SensorUwb struct {
	Timestamp           uint64  `yaml:"timestamp"`              // time since system start (microseconds)
	Sessionid           uint32  `yaml:"sessionid"`              // UWB SessionID
	TimeOffset          uint32  `yaml:"time_offset"`            // Time between Ranging Rounds in ms
	Counter             uint32  `yaml:"counter"`                // Number of Ranges since last Start of Ranging
	Mac                 uint16  `yaml:"mac"`                    // MAC adress of Initiator (controller)
	MacDest             uint16  `yaml:"mac_dest"`               // MAC adress of Responder (Controlee)
	Status              uint16  `yaml:"status"`                 // status feedback #
	Nlos                uint8   `yaml:"nlos"`                   // None line of site condition y/n
	Distance            float32 `yaml:"distance"`               // distance in m to the UWB receiver
	AoaAzimuthDev       float32 `yaml:"aoa_azimuth_dev"`        // Angle of arrival of first incomming RX msg. Angle of arrival, Angle in Degree -60..+60; FOV in both axis is 120 degrees
	AoaElevationDev     float32 `yaml:"aoa_elevation_dev"`      // Angle of arrival of first incomming RX msg
	AoaAzimuthResp      float32 `yaml:"aoa_azimuth_resp"`       // Angle of arrival of first incomming RX msg at the responder
	AoaElevationResp    float32 `yaml:"aoa_elevation_resp"`     // Angle of arrival of first incomming RX msg at the responder
	AoaAzimuthFom       uint8   `yaml:"aoa_azimuth_fom"`        // AOA Azimuth FOM. Figure of merit for the angle measurements
	AoaElevationFom     uint8   `yaml:"aoa_elevation_fom"`      // AOA Elevation FOM
	AoaDestAzimuthFom   uint8   `yaml:"aoa_dest_azimuth_fom"`   // AOA Azimuth FOM
	AoaDestElevationFom uint8   `yaml:"aoa_dest_elevation_fom"` // AOA Elevation FOM
	Orientation         uint8   `yaml:"orientation"`            // Direction the sensor faces from MAV_SENSOR_ORIENTATION enum. Initiator physical configuration
	OffsetX             float32 `yaml:"offset_x"`               // UWB initiator offset in X axis (NED drone frame). Standard configuration is Antennas facing down and azimuth aligened in forward direction
	OffsetY             float32 `yaml:"offset_y"`               // UWB initiator offset in Y axis (NED drone frame)
	OffsetZ             float32 `yaml:"offset_z"`               // UWB initiator offset in Z axis (NED drone frame)
}

// NewSensorUwb creates a new SensorUwb with default values.
func NewSensorUwb() *SensorUwb {
	self := SensorUwb{}
	self.SetDefaults()
	return &self
}

func (t *SensorUwb) Clone() *SensorUwb {
	c := &SensorUwb{}
	c.Timestamp = t.Timestamp
	c.Sessionid = t.Sessionid
	c.TimeOffset = t.TimeOffset
	c.Counter = t.Counter
	c.Mac = t.Mac
	c.MacDest = t.MacDest
	c.Status = t.Status
	c.Nlos = t.Nlos
	c.Distance = t.Distance
	c.AoaAzimuthDev = t.AoaAzimuthDev
	c.AoaElevationDev = t.AoaElevationDev
	c.AoaAzimuthResp = t.AoaAzimuthResp
	c.AoaElevationResp = t.AoaElevationResp
	c.AoaAzimuthFom = t.AoaAzimuthFom
	c.AoaElevationFom = t.AoaElevationFom
	c.AoaDestAzimuthFom = t.AoaDestAzimuthFom
	c.AoaDestElevationFom = t.AoaDestElevationFom
	c.Orientation = t.Orientation
	c.OffsetX = t.OffsetX
	c.OffsetY = t.OffsetY
	c.OffsetZ = t.OffsetZ
	return c
}

func (t *SensorUwb) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorUwb) SetDefaults() {
	t.Timestamp = 0
	t.Sessionid = 0
	t.TimeOffset = 0
	t.Counter = 0
	t.Mac = 0
	t.MacDest = 0
	t.Status = 0
	t.Nlos = 0
	t.Distance = 0
	t.AoaAzimuthDev = 0
	t.AoaElevationDev = 0
	t.AoaAzimuthResp = 0
	t.AoaElevationResp = 0
	t.AoaAzimuthFom = 0
	t.AoaElevationFom = 0
	t.AoaDestAzimuthFom = 0
	t.AoaDestElevationFom = 0
	t.Orientation = 0
	t.OffsetX = 0
	t.OffsetY = 0
	t.OffsetZ = 0
}

func (t *SensorUwb) GetTypeSupport() types.MessageTypeSupport {
	return SensorUwbTypeSupport
}

// SensorUwbPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorUwbPublisher struct {
	*rclgo.Publisher
}

// NewSensorUwbPublisher creates and returns a new publisher for the
// SensorUwb
func NewSensorUwbPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorUwbPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorUwbTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorUwbPublisher{pub}, nil
}

func (p *SensorUwbPublisher) Publish(msg *SensorUwb) error {
	return p.Publisher.Publish(msg)
}

// SensorUwbSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorUwbSubscription struct {
	*rclgo.Subscription
}

// SensorUwbSubscriptionCallback type is used to provide a subscription
// handler function for a SensorUwbSubscription.
type SensorUwbSubscriptionCallback func(msg *SensorUwb, info *rclgo.MessageInfo, err error)

// NewSensorUwbSubscription creates and returns a new subscription for the
// SensorUwb
func NewSensorUwbSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorUwbSubscriptionCallback) (*SensorUwbSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorUwb
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorUwbTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorUwbSubscription{sub}, nil
}

func (s *SensorUwbSubscription) TakeMessage(out *SensorUwb) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorUwbSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorUwbSlice(dst, src []SensorUwb) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorUwbTypeSupport types.MessageTypeSupport = _SensorUwbTypeSupport{}

type _SensorUwbTypeSupport struct{}

func (t _SensorUwbTypeSupport) New() types.Message {
	return NewSensorUwb()
}

func (t _SensorUwbTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorUwb
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorUwb__create())
}

func (t _SensorUwbTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorUwb__destroy((*C.px4_msgs__msg__SensorUwb)(pointer_to_free))
}

func (t _SensorUwbTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorUwb)
	mem := (*C.px4_msgs__msg__SensorUwb)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.sessionid = C.uint32_t(m.Sessionid)
	mem.time_offset = C.uint32_t(m.TimeOffset)
	mem.counter = C.uint32_t(m.Counter)
	mem.mac = C.uint16_t(m.Mac)
	mem.mac_dest = C.uint16_t(m.MacDest)
	mem.status = C.uint16_t(m.Status)
	mem.nlos = C.uint8_t(m.Nlos)
	mem.distance = C.float(m.Distance)
	mem.aoa_azimuth_dev = C.float(m.AoaAzimuthDev)
	mem.aoa_elevation_dev = C.float(m.AoaElevationDev)
	mem.aoa_azimuth_resp = C.float(m.AoaAzimuthResp)
	mem.aoa_elevation_resp = C.float(m.AoaElevationResp)
	mem.aoa_azimuth_fom = C.uint8_t(m.AoaAzimuthFom)
	mem.aoa_elevation_fom = C.uint8_t(m.AoaElevationFom)
	mem.aoa_dest_azimuth_fom = C.uint8_t(m.AoaDestAzimuthFom)
	mem.aoa_dest_elevation_fom = C.uint8_t(m.AoaDestElevationFom)
	mem.orientation = C.uint8_t(m.Orientation)
	mem.offset_x = C.float(m.OffsetX)
	mem.offset_y = C.float(m.OffsetY)
	mem.offset_z = C.float(m.OffsetZ)
}

func (t _SensorUwbTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorUwb)
	mem := (*C.px4_msgs__msg__SensorUwb)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Sessionid = uint32(mem.sessionid)
	m.TimeOffset = uint32(mem.time_offset)
	m.Counter = uint32(mem.counter)
	m.Mac = uint16(mem.mac)
	m.MacDest = uint16(mem.mac_dest)
	m.Status = uint16(mem.status)
	m.Nlos = uint8(mem.nlos)
	m.Distance = float32(mem.distance)
	m.AoaAzimuthDev = float32(mem.aoa_azimuth_dev)
	m.AoaElevationDev = float32(mem.aoa_elevation_dev)
	m.AoaAzimuthResp = float32(mem.aoa_azimuth_resp)
	m.AoaElevationResp = float32(mem.aoa_elevation_resp)
	m.AoaAzimuthFom = uint8(mem.aoa_azimuth_fom)
	m.AoaElevationFom = uint8(mem.aoa_elevation_fom)
	m.AoaDestAzimuthFom = uint8(mem.aoa_dest_azimuth_fom)
	m.AoaDestElevationFom = uint8(mem.aoa_dest_elevation_fom)
	m.Orientation = uint8(mem.orientation)
	m.OffsetX = float32(mem.offset_x)
	m.OffsetY = float32(mem.offset_y)
	m.OffsetZ = float32(mem.offset_z)
}

func (t _SensorUwbTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorUwb())
}

type CSensorUwb = C.px4_msgs__msg__SensorUwb
type CSensorUwb__Sequence = C.px4_msgs__msg__SensorUwb__Sequence

func SensorUwb__Sequence_to_Go(goSlice *[]SensorUwb, cSlice CSensorUwb__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorUwb, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorUwbTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorUwb__Sequence_to_C(cSlice *CSensorUwb__Sequence, goSlice []SensorUwb) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorUwb)(C.malloc(C.sizeof_struct_px4_msgs__msg__SensorUwb * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorUwbTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorUwb__Array_to_Go(goSlice []SensorUwb, cSlice []CSensorUwb) {
	for i := 0; i < len(cSlice); i++ {
		SensorUwbTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorUwb__Array_to_C(cSlice []CSensorUwb, goSlice []SensorUwb) {
	for i := 0; i < len(goSlice); i++ {
		SensorUwbTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
