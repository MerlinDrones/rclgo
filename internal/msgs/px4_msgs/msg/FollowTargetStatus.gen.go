// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/follow_target_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/FollowTargetStatus", FollowTargetStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/FollowTargetStatus", FollowTargetStatusTypeSupport)
}

type FollowTargetStatus struct {
	Timestamp           uint64     `yaml:"timestamp"`             // [microseconds] time since system start
	TrackedTargetCourse float32    `yaml:"tracked_target_course"` // [rad] Tracked target course in NED local frame (North is course zero)
	FollowAngle         float32    `yaml:"follow_angle"`          // [rad] Current follow angle setting
	OrbitAngleSetpoint  float32    `yaml:"orbit_angle_setpoint"`  // [rad] Current orbit angle setpoint from the smooth trajectory generator
	AngularRateSetpoint float32    `yaml:"angular_rate_setpoint"` // [rad/s] Angular rate commanded from Jerk-limited Orbit Angle trajectory for Orbit Angle
	DesiredPositionRaw  [3]float32 `yaml:"desired_position_raw"`  // [m] Raw 'idealistic' desired drone position if a drone could teleport from place to places
	InEmergencyAscent   bool       `yaml:"in_emergency_ascent"`   // [bool] True when doing emergency ascent (when distance to ground is below safety altitude)
	GimbalPitch         float32    `yaml:"gimbal_pitch"`          // [rad] Gimbal pitch commanded to track target in the center of the frame
}

// NewFollowTargetStatus creates a new FollowTargetStatus with default values.
func NewFollowTargetStatus() *FollowTargetStatus {
	self := FollowTargetStatus{}
	self.SetDefaults()
	return &self
}

func (t *FollowTargetStatus) Clone() *FollowTargetStatus {
	c := &FollowTargetStatus{}
	c.Timestamp = t.Timestamp
	c.TrackedTargetCourse = t.TrackedTargetCourse
	c.FollowAngle = t.FollowAngle
	c.OrbitAngleSetpoint = t.OrbitAngleSetpoint
	c.AngularRateSetpoint = t.AngularRateSetpoint
	c.DesiredPositionRaw = t.DesiredPositionRaw
	c.InEmergencyAscent = t.InEmergencyAscent
	c.GimbalPitch = t.GimbalPitch
	return c
}

func (t *FollowTargetStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *FollowTargetStatus) SetDefaults() {
	t.Timestamp = 0
	t.TrackedTargetCourse = 0
	t.FollowAngle = 0
	t.OrbitAngleSetpoint = 0
	t.AngularRateSetpoint = 0
	t.DesiredPositionRaw = [3]float32{}
	t.InEmergencyAscent = false
	t.GimbalPitch = 0
}

func (t *FollowTargetStatus) GetTypeSupport() types.MessageTypeSupport {
	return FollowTargetStatusTypeSupport
}

// FollowTargetStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type FollowTargetStatusPublisher struct {
	*rclgo.Publisher
}

// NewFollowTargetStatusPublisher creates and returns a new publisher for the
// FollowTargetStatus
func NewFollowTargetStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*FollowTargetStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, FollowTargetStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &FollowTargetStatusPublisher{pub}, nil
}

func (p *FollowTargetStatusPublisher) Publish(msg *FollowTargetStatus) error {
	return p.Publisher.Publish(msg)
}

// FollowTargetStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type FollowTargetStatusSubscription struct {
	*rclgo.Subscription
}

// FollowTargetStatusSubscriptionCallback type is used to provide a subscription
// handler function for a FollowTargetStatusSubscription.
type FollowTargetStatusSubscriptionCallback func(msg *FollowTargetStatus, info *rclgo.MessageInfo, err error)

// NewFollowTargetStatusSubscription creates and returns a new subscription for the
// FollowTargetStatus
func NewFollowTargetStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback FollowTargetStatusSubscriptionCallback) (*FollowTargetStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg FollowTargetStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, FollowTargetStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &FollowTargetStatusSubscription{sub}, nil
}

func (s *FollowTargetStatusSubscription) TakeMessage(out *FollowTargetStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneFollowTargetStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneFollowTargetStatusSlice(dst, src []FollowTargetStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var FollowTargetStatusTypeSupport types.MessageTypeSupport = _FollowTargetStatusTypeSupport{}

type _FollowTargetStatusTypeSupport struct{}

func (t _FollowTargetStatusTypeSupport) New() types.Message {
	return NewFollowTargetStatus()
}

func (t _FollowTargetStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__FollowTargetStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__FollowTargetStatus__create())
}

func (t _FollowTargetStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__FollowTargetStatus__destroy((*C.px4_msgs__msg__FollowTargetStatus)(pointer_to_free))
}

func (t _FollowTargetStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*FollowTargetStatus)
	mem := (*C.px4_msgs__msg__FollowTargetStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.tracked_target_course = C.float(m.TrackedTargetCourse)
	mem.follow_angle = C.float(m.FollowAngle)
	mem.orbit_angle_setpoint = C.float(m.OrbitAngleSetpoint)
	mem.angular_rate_setpoint = C.float(m.AngularRateSetpoint)
	cSlice_desired_position_raw := mem.desired_position_raw[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_desired_position_raw)), m.DesiredPositionRaw[:])
	mem.in_emergency_ascent = C.bool(m.InEmergencyAscent)
	mem.gimbal_pitch = C.float(m.GimbalPitch)
}

func (t _FollowTargetStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*FollowTargetStatus)
	mem := (*C.px4_msgs__msg__FollowTargetStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TrackedTargetCourse = float32(mem.tracked_target_course)
	m.FollowAngle = float32(mem.follow_angle)
	m.OrbitAngleSetpoint = float32(mem.orbit_angle_setpoint)
	m.AngularRateSetpoint = float32(mem.angular_rate_setpoint)
	cSlice_desired_position_raw := mem.desired_position_raw[:]
	primitives.Float32__Array_to_Go(m.DesiredPositionRaw[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_desired_position_raw)))
	m.InEmergencyAscent = bool(mem.in_emergency_ascent)
	m.GimbalPitch = float32(mem.gimbal_pitch)
}

func (t _FollowTargetStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__FollowTargetStatus())
}

type CFollowTargetStatus = C.px4_msgs__msg__FollowTargetStatus
type CFollowTargetStatus__Sequence = C.px4_msgs__msg__FollowTargetStatus__Sequence

func FollowTargetStatus__Sequence_to_Go(goSlice *[]FollowTargetStatus, cSlice CFollowTargetStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]FollowTargetStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		FollowTargetStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func FollowTargetStatus__Sequence_to_C(cSlice *CFollowTargetStatus__Sequence, goSlice []FollowTargetStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__FollowTargetStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__FollowTargetStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		FollowTargetStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func FollowTargetStatus__Array_to_Go(goSlice []FollowTargetStatus, cSlice []CFollowTargetStatus) {
	for i := 0; i < len(cSlice); i++ {
		FollowTargetStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func FollowTargetStatus__Array_to_C(cSlice []CFollowTargetStatus, goSlice []FollowTargetStatus) {
	for i := 0; i < len(goSlice); i++ {
		FollowTargetStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
