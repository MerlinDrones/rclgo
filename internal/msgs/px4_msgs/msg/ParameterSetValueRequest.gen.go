// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/parameter_set_value_request.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ParameterSetValueRequest", ParameterSetValueRequestTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ParameterSetValueRequest", ParameterSetValueRequestTypeSupport)
}

const (
	ParameterSetValueRequest_ORB_QUEUE_LENGTH uint8 = 32
)

type ParameterSetValueRequest struct {
	Timestamp      uint64  `yaml:"timestamp"`
	ParameterIndex uint16  `yaml:"parameter_index"`
	IntValue       int32   `yaml:"int_value"`   // Optional value for an integer parameter
	FloatValue     float32 `yaml:"float_value"` // Optional value for a float parameter
}

// NewParameterSetValueRequest creates a new ParameterSetValueRequest with default values.
func NewParameterSetValueRequest() *ParameterSetValueRequest {
	self := ParameterSetValueRequest{}
	self.SetDefaults()
	return &self
}

func (t *ParameterSetValueRequest) Clone() *ParameterSetValueRequest {
	c := &ParameterSetValueRequest{}
	c.Timestamp = t.Timestamp
	c.ParameterIndex = t.ParameterIndex
	c.IntValue = t.IntValue
	c.FloatValue = t.FloatValue
	return c
}

func (t *ParameterSetValueRequest) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParameterSetValueRequest) SetDefaults() {
	t.Timestamp = 0
	t.ParameterIndex = 0
	t.IntValue = 0
	t.FloatValue = 0
}

func (t *ParameterSetValueRequest) GetTypeSupport() types.MessageTypeSupport {
	return ParameterSetValueRequestTypeSupport
}

// ParameterSetValueRequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParameterSetValueRequestPublisher struct {
	*rclgo.Publisher
}

// NewParameterSetValueRequestPublisher creates and returns a new publisher for the
// ParameterSetValueRequest
func NewParameterSetValueRequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParameterSetValueRequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParameterSetValueRequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParameterSetValueRequestPublisher{pub}, nil
}

func (p *ParameterSetValueRequestPublisher) Publish(msg *ParameterSetValueRequest) error {
	return p.Publisher.Publish(msg)
}

// ParameterSetValueRequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParameterSetValueRequestSubscription struct {
	*rclgo.Subscription
}

// ParameterSetValueRequestSubscriptionCallback type is used to provide a subscription
// handler function for a ParameterSetValueRequestSubscription.
type ParameterSetValueRequestSubscriptionCallback func(msg *ParameterSetValueRequest, info *rclgo.MessageInfo, err error)

// NewParameterSetValueRequestSubscription creates and returns a new subscription for the
// ParameterSetValueRequest
func NewParameterSetValueRequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParameterSetValueRequestSubscriptionCallback) (*ParameterSetValueRequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParameterSetValueRequest
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParameterSetValueRequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParameterSetValueRequestSubscription{sub}, nil
}

func (s *ParameterSetValueRequestSubscription) TakeMessage(out *ParameterSetValueRequest) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParameterSetValueRequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParameterSetValueRequestSlice(dst, src []ParameterSetValueRequest) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParameterSetValueRequestTypeSupport types.MessageTypeSupport = _ParameterSetValueRequestTypeSupport{}

type _ParameterSetValueRequestTypeSupport struct{}

func (t _ParameterSetValueRequestTypeSupport) New() types.Message {
	return NewParameterSetValueRequest()
}

func (t _ParameterSetValueRequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ParameterSetValueRequest
	return (unsafe.Pointer)(C.px4_msgs__msg__ParameterSetValueRequest__create())
}

func (t _ParameterSetValueRequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ParameterSetValueRequest__destroy((*C.px4_msgs__msg__ParameterSetValueRequest)(pointer_to_free))
}

func (t _ParameterSetValueRequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParameterSetValueRequest)
	mem := (*C.px4_msgs__msg__ParameterSetValueRequest)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.parameter_index = C.uint16_t(m.ParameterIndex)
	mem.int_value = C.int32_t(m.IntValue)
	mem.float_value = C.float(m.FloatValue)
}

func (t _ParameterSetValueRequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParameterSetValueRequest)
	mem := (*C.px4_msgs__msg__ParameterSetValueRequest)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.ParameterIndex = uint16(mem.parameter_index)
	m.IntValue = int32(mem.int_value)
	m.FloatValue = float32(mem.float_value)
}

func (t _ParameterSetValueRequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ParameterSetValueRequest())
}

type CParameterSetValueRequest = C.px4_msgs__msg__ParameterSetValueRequest
type CParameterSetValueRequest__Sequence = C.px4_msgs__msg__ParameterSetValueRequest__Sequence

func ParameterSetValueRequest__Sequence_to_Go(goSlice *[]ParameterSetValueRequest, cSlice CParameterSetValueRequest__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParameterSetValueRequest, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParameterSetValueRequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParameterSetValueRequest__Sequence_to_C(cSlice *CParameterSetValueRequest__Sequence, goSlice []ParameterSetValueRequest) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ParameterSetValueRequest)(C.malloc(C.sizeof_struct_px4_msgs__msg__ParameterSetValueRequest * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParameterSetValueRequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParameterSetValueRequest__Array_to_Go(goSlice []ParameterSetValueRequest, cSlice []CParameterSetValueRequest) {
	for i := 0; i < len(cSlice); i++ {
		ParameterSetValueRequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParameterSetValueRequest__Array_to_C(cSlice []CParameterSetValueRequest, goSlice []ParameterSetValueRequest) {
	for i := 0; i < len(goSlice); i++ {
		ParameterSetValueRequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
