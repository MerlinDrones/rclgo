// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gripper.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Gripper", GripperTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/Gripper", GripperTypeSupport)
}

const (
	Gripper_COMMAND_GRAB    int8 = 0
	Gripper_COMMAND_RELEASE int8 = 1
)

type Gripper struct {
	Timestamp uint64 `yaml:"timestamp"`
	Command   int8   `yaml:"command"` // Commanded state for the gripper
}

// NewGripper creates a new Gripper with default values.
func NewGripper() *Gripper {
	self := Gripper{}
	self.SetDefaults()
	return &self
}

func (t *Gripper) Clone() *Gripper {
	c := &Gripper{}
	c.Timestamp = t.Timestamp
	c.Command = t.Command
	return c
}

func (t *Gripper) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Gripper) SetDefaults() {
	t.Timestamp = 0
	t.Command = 0
}

func (t *Gripper) GetTypeSupport() types.MessageTypeSupport {
	return GripperTypeSupport
}

// GripperPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GripperPublisher struct {
	*rclgo.Publisher
}

// NewGripperPublisher creates and returns a new publisher for the
// Gripper
func NewGripperPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GripperPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GripperTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GripperPublisher{pub}, nil
}

func (p *GripperPublisher) Publish(msg *Gripper) error {
	return p.Publisher.Publish(msg)
}

// GripperSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GripperSubscription struct {
	*rclgo.Subscription
}

// GripperSubscriptionCallback type is used to provide a subscription
// handler function for a GripperSubscription.
type GripperSubscriptionCallback func(msg *Gripper, info *rclgo.MessageInfo, err error)

// NewGripperSubscription creates and returns a new subscription for the
// Gripper
func NewGripperSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GripperSubscriptionCallback) (*GripperSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Gripper
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GripperTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GripperSubscription{sub}, nil
}

func (s *GripperSubscription) TakeMessage(out *Gripper) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGripperSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGripperSlice(dst, src []Gripper) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GripperTypeSupport types.MessageTypeSupport = _GripperTypeSupport{}

type _GripperTypeSupport struct{}

func (t _GripperTypeSupport) New() types.Message {
	return NewGripper()
}

func (t _GripperTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Gripper
	return (unsafe.Pointer)(C.px4_msgs__msg__Gripper__create())
}

func (t _GripperTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Gripper__destroy((*C.px4_msgs__msg__Gripper)(pointer_to_free))
}

func (t _GripperTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Gripper)
	mem := (*C.px4_msgs__msg__Gripper)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.command = C.int8_t(m.Command)
}

func (t _GripperTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Gripper)
	mem := (*C.px4_msgs__msg__Gripper)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Command = int8(mem.command)
}

func (t _GripperTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Gripper())
}

type CGripper = C.px4_msgs__msg__Gripper
type CGripper__Sequence = C.px4_msgs__msg__Gripper__Sequence

func Gripper__Sequence_to_Go(goSlice *[]Gripper, cSlice CGripper__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Gripper, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GripperTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Gripper__Sequence_to_C(cSlice *CGripper__Sequence, goSlice []Gripper) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Gripper)(C.malloc(C.sizeof_struct_px4_msgs__msg__Gripper * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GripperTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Gripper__Array_to_Go(goSlice []Gripper, cSlice []CGripper) {
	for i := 0; i < len(cSlice); i++ {
		GripperTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Gripper__Array_to_C(cSlice []CGripper, goSlice []Gripper) {
	for i := 0; i < len(goSlice); i++ {
		GripperTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
