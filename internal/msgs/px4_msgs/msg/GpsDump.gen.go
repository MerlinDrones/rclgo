// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gps_dump.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GpsDump", GpsDumpTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GpsDump", GpsDumpTypeSupport)
}

const (
	GpsDump_ORB_QUEUE_LENGTH uint8 = 8
)

type GpsDump struct {
	Timestamp uint64    `yaml:"timestamp"` // time since system start (microseconds)
	Instance  uint8     `yaml:"instance"`  // Instance of GNSS receiver
	Len       uint8     `yaml:"len"`       // length of data, MSB bit set = message to the gps device,
	Data      [79]uint8 `yaml:"data"`      // data to write to the log. clear = message from the device
}

// NewGpsDump creates a new GpsDump with default values.
func NewGpsDump() *GpsDump {
	self := GpsDump{}
	self.SetDefaults()
	return &self
}

func (t *GpsDump) Clone() *GpsDump {
	c := &GpsDump{}
	c.Timestamp = t.Timestamp
	c.Instance = t.Instance
	c.Len = t.Len
	c.Data = t.Data
	return c
}

func (t *GpsDump) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GpsDump) SetDefaults() {
	t.Timestamp = 0
	t.Instance = 0
	t.Len = 0
	t.Data = [79]uint8{}
}

func (t *GpsDump) GetTypeSupport() types.MessageTypeSupport {
	return GpsDumpTypeSupport
}

// GpsDumpPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GpsDumpPublisher struct {
	*rclgo.Publisher
}

// NewGpsDumpPublisher creates and returns a new publisher for the
// GpsDump
func NewGpsDumpPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GpsDumpPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GpsDumpTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GpsDumpPublisher{pub}, nil
}

func (p *GpsDumpPublisher) Publish(msg *GpsDump) error {
	return p.Publisher.Publish(msg)
}

// GpsDumpSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GpsDumpSubscription struct {
	*rclgo.Subscription
}

// GpsDumpSubscriptionCallback type is used to provide a subscription
// handler function for a GpsDumpSubscription.
type GpsDumpSubscriptionCallback func(msg *GpsDump, info *rclgo.MessageInfo, err error)

// NewGpsDumpSubscription creates and returns a new subscription for the
// GpsDump
func NewGpsDumpSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GpsDumpSubscriptionCallback) (*GpsDumpSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GpsDump
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GpsDumpTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GpsDumpSubscription{sub}, nil
}

func (s *GpsDumpSubscription) TakeMessage(out *GpsDump) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGpsDumpSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGpsDumpSlice(dst, src []GpsDump) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GpsDumpTypeSupport types.MessageTypeSupport = _GpsDumpTypeSupport{}

type _GpsDumpTypeSupport struct{}

func (t _GpsDumpTypeSupport) New() types.Message {
	return NewGpsDump()
}

func (t _GpsDumpTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GpsDump
	return (unsafe.Pointer)(C.px4_msgs__msg__GpsDump__create())
}

func (t _GpsDumpTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GpsDump__destroy((*C.px4_msgs__msg__GpsDump)(pointer_to_free))
}

func (t _GpsDumpTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GpsDump)
	mem := (*C.px4_msgs__msg__GpsDump)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.instance = C.uint8_t(m.Instance)
	mem.len = C.uint8_t(m.Len)
	cSlice_data := mem.data[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_data)), m.Data[:])
}

func (t _GpsDumpTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GpsDump)
	mem := (*C.px4_msgs__msg__GpsDump)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Instance = uint8(mem.instance)
	m.Len = uint8(mem.len)
	cSlice_data := mem.data[:]
	primitives.Uint8__Array_to_Go(m.Data[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_data)))
}

func (t _GpsDumpTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GpsDump())
}

type CGpsDump = C.px4_msgs__msg__GpsDump
type CGpsDump__Sequence = C.px4_msgs__msg__GpsDump__Sequence

func GpsDump__Sequence_to_Go(goSlice *[]GpsDump, cSlice CGpsDump__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GpsDump, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GpsDumpTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GpsDump__Sequence_to_C(cSlice *CGpsDump__Sequence, goSlice []GpsDump) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GpsDump)(C.malloc(C.sizeof_struct_px4_msgs__msg__GpsDump * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GpsDumpTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GpsDump__Array_to_Go(goSlice []GpsDump, cSlice []CGpsDump) {
	for i := 0; i < len(cSlice); i++ {
		GpsDumpTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GpsDump__Array_to_C(cSlice []CGpsDump, goSlice []GpsDump) {
	for i := 0; i < len(goSlice); i++ {
		GpsDumpTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
