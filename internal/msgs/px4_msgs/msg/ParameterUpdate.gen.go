// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/parameter_update.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ParameterUpdate", ParameterUpdateTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ParameterUpdate", ParameterUpdateTypeSupport)
}

type ParameterUpdate struct {
	Timestamp     uint64 `yaml:"timestamp"` // time since system start (microseconds)
	Instance      uint32 `yaml:"instance"`  // Instance count - constantly incrementing
	GetCount      uint32 `yaml:"get_count"`
	SetCount      uint32 `yaml:"set_count"`
	FindCount     uint32 `yaml:"find_count"`
	ExportCount   uint32 `yaml:"export_count"`
	Active        uint16 `yaml:"active"`
	Changed       uint16 `yaml:"changed"`
	CustomDefault uint16 `yaml:"custom_default"`
}

// NewParameterUpdate creates a new ParameterUpdate with default values.
func NewParameterUpdate() *ParameterUpdate {
	self := ParameterUpdate{}
	self.SetDefaults()
	return &self
}

func (t *ParameterUpdate) Clone() *ParameterUpdate {
	c := &ParameterUpdate{}
	c.Timestamp = t.Timestamp
	c.Instance = t.Instance
	c.GetCount = t.GetCount
	c.SetCount = t.SetCount
	c.FindCount = t.FindCount
	c.ExportCount = t.ExportCount
	c.Active = t.Active
	c.Changed = t.Changed
	c.CustomDefault = t.CustomDefault
	return c
}

func (t *ParameterUpdate) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParameterUpdate) SetDefaults() {
	t.Timestamp = 0
	t.Instance = 0
	t.GetCount = 0
	t.SetCount = 0
	t.FindCount = 0
	t.ExportCount = 0
	t.Active = 0
	t.Changed = 0
	t.CustomDefault = 0
}

func (t *ParameterUpdate) GetTypeSupport() types.MessageTypeSupport {
	return ParameterUpdateTypeSupport
}

// ParameterUpdatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParameterUpdatePublisher struct {
	*rclgo.Publisher
}

// NewParameterUpdatePublisher creates and returns a new publisher for the
// ParameterUpdate
func NewParameterUpdatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParameterUpdatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParameterUpdateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParameterUpdatePublisher{pub}, nil
}

func (p *ParameterUpdatePublisher) Publish(msg *ParameterUpdate) error {
	return p.Publisher.Publish(msg)
}

// ParameterUpdateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParameterUpdateSubscription struct {
	*rclgo.Subscription
}

// ParameterUpdateSubscriptionCallback type is used to provide a subscription
// handler function for a ParameterUpdateSubscription.
type ParameterUpdateSubscriptionCallback func(msg *ParameterUpdate, info *rclgo.MessageInfo, err error)

// NewParameterUpdateSubscription creates and returns a new subscription for the
// ParameterUpdate
func NewParameterUpdateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParameterUpdateSubscriptionCallback) (*ParameterUpdateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParameterUpdate
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParameterUpdateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParameterUpdateSubscription{sub}, nil
}

func (s *ParameterUpdateSubscription) TakeMessage(out *ParameterUpdate) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParameterUpdateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParameterUpdateSlice(dst, src []ParameterUpdate) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParameterUpdateTypeSupport types.MessageTypeSupport = _ParameterUpdateTypeSupport{}

type _ParameterUpdateTypeSupport struct{}

func (t _ParameterUpdateTypeSupport) New() types.Message {
	return NewParameterUpdate()
}

func (t _ParameterUpdateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ParameterUpdate
	return (unsafe.Pointer)(C.px4_msgs__msg__ParameterUpdate__create())
}

func (t _ParameterUpdateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ParameterUpdate__destroy((*C.px4_msgs__msg__ParameterUpdate)(pointer_to_free))
}

func (t _ParameterUpdateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParameterUpdate)
	mem := (*C.px4_msgs__msg__ParameterUpdate)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.instance = C.uint32_t(m.Instance)
	mem.get_count = C.uint32_t(m.GetCount)
	mem.set_count = C.uint32_t(m.SetCount)
	mem.find_count = C.uint32_t(m.FindCount)
	mem.export_count = C.uint32_t(m.ExportCount)
	mem.active = C.uint16_t(m.Active)
	mem.changed = C.uint16_t(m.Changed)
	mem.custom_default = C.uint16_t(m.CustomDefault)
}

func (t _ParameterUpdateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParameterUpdate)
	mem := (*C.px4_msgs__msg__ParameterUpdate)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Instance = uint32(mem.instance)
	m.GetCount = uint32(mem.get_count)
	m.SetCount = uint32(mem.set_count)
	m.FindCount = uint32(mem.find_count)
	m.ExportCount = uint32(mem.export_count)
	m.Active = uint16(mem.active)
	m.Changed = uint16(mem.changed)
	m.CustomDefault = uint16(mem.custom_default)
}

func (t _ParameterUpdateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ParameterUpdate())
}

type CParameterUpdate = C.px4_msgs__msg__ParameterUpdate
type CParameterUpdate__Sequence = C.px4_msgs__msg__ParameterUpdate__Sequence

func ParameterUpdate__Sequence_to_Go(goSlice *[]ParameterUpdate, cSlice CParameterUpdate__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParameterUpdate, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParameterUpdateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParameterUpdate__Sequence_to_C(cSlice *CParameterUpdate__Sequence, goSlice []ParameterUpdate) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ParameterUpdate)(C.malloc(C.sizeof_struct_px4_msgs__msg__ParameterUpdate * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParameterUpdateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParameterUpdate__Array_to_Go(goSlice []ParameterUpdate, cSlice []CParameterUpdate) {
	for i := 0; i < len(cSlice); i++ {
		ParameterUpdateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParameterUpdate__Array_to_C(cSlice []CParameterUpdate, goSlice []ParameterUpdate) {
	for i := 0; i < len(goSlice); i++ {
		ParameterUpdateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
