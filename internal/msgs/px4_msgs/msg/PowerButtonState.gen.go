// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/power_button_state.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/PowerButtonState", PowerButtonStateTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/PowerButtonState", PowerButtonStateTypeSupport)
}

const (
	PowerButtonState_PWR_BUTTON_STATE_IDEL             uint8 = 0 // Button went up without meeting shutdown button down time (delete event)
	PowerButtonState_PWR_BUTTON_STATE_DOWN             uint8 = 1 // Button went Down
	PowerButtonState_PWR_BUTTON_STATE_UP               uint8 = 2 // Button went Up
	PowerButtonState_PWR_BUTTON_STATE_REQUEST_SHUTDOWN uint8 = 3 // Button went Up after meeting shutdown button down time
)

type PowerButtonState struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds)
	Event     uint8  `yaml:"event"`     // one of PWR_BUTTON_STATE_*
}

// NewPowerButtonState creates a new PowerButtonState with default values.
func NewPowerButtonState() *PowerButtonState {
	self := PowerButtonState{}
	self.SetDefaults()
	return &self
}

func (t *PowerButtonState) Clone() *PowerButtonState {
	c := &PowerButtonState{}
	c.Timestamp = t.Timestamp
	c.Event = t.Event
	return c
}

func (t *PowerButtonState) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PowerButtonState) SetDefaults() {
	t.Timestamp = 0
	t.Event = 0
}

func (t *PowerButtonState) GetTypeSupport() types.MessageTypeSupport {
	return PowerButtonStateTypeSupport
}

// PowerButtonStatePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PowerButtonStatePublisher struct {
	*rclgo.Publisher
}

// NewPowerButtonStatePublisher creates and returns a new publisher for the
// PowerButtonState
func NewPowerButtonStatePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PowerButtonStatePublisher, error) {
	pub, err := node.NewPublisher(topic_name, PowerButtonStateTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PowerButtonStatePublisher{pub}, nil
}

func (p *PowerButtonStatePublisher) Publish(msg *PowerButtonState) error {
	return p.Publisher.Publish(msg)
}

// PowerButtonStateSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PowerButtonStateSubscription struct {
	*rclgo.Subscription
}

// PowerButtonStateSubscriptionCallback type is used to provide a subscription
// handler function for a PowerButtonStateSubscription.
type PowerButtonStateSubscriptionCallback func(msg *PowerButtonState, info *rclgo.MessageInfo, err error)

// NewPowerButtonStateSubscription creates and returns a new subscription for the
// PowerButtonState
func NewPowerButtonStateSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PowerButtonStateSubscriptionCallback) (*PowerButtonStateSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PowerButtonState
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PowerButtonStateTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PowerButtonStateSubscription{sub}, nil
}

func (s *PowerButtonStateSubscription) TakeMessage(out *PowerButtonState) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePowerButtonStateSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePowerButtonStateSlice(dst, src []PowerButtonState) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PowerButtonStateTypeSupport types.MessageTypeSupport = _PowerButtonStateTypeSupport{}

type _PowerButtonStateTypeSupport struct{}

func (t _PowerButtonStateTypeSupport) New() types.Message {
	return NewPowerButtonState()
}

func (t _PowerButtonStateTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__PowerButtonState
	return (unsafe.Pointer)(C.px4_msgs__msg__PowerButtonState__create())
}

func (t _PowerButtonStateTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__PowerButtonState__destroy((*C.px4_msgs__msg__PowerButtonState)(pointer_to_free))
}

func (t _PowerButtonStateTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PowerButtonState)
	mem := (*C.px4_msgs__msg__PowerButtonState)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.event = C.uint8_t(m.Event)
}

func (t _PowerButtonStateTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PowerButtonState)
	mem := (*C.px4_msgs__msg__PowerButtonState)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Event = uint8(mem.event)
}

func (t _PowerButtonStateTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__PowerButtonState())
}

type CPowerButtonState = C.px4_msgs__msg__PowerButtonState
type CPowerButtonState__Sequence = C.px4_msgs__msg__PowerButtonState__Sequence

func PowerButtonState__Sequence_to_Go(goSlice *[]PowerButtonState, cSlice CPowerButtonState__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PowerButtonState, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PowerButtonStateTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PowerButtonState__Sequence_to_C(cSlice *CPowerButtonState__Sequence, goSlice []PowerButtonState) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__PowerButtonState)(C.malloc(C.sizeof_struct_px4_msgs__msg__PowerButtonState * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PowerButtonStateTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PowerButtonState__Array_to_Go(goSlice []PowerButtonState, cSlice []CPowerButtonState) {
	for i := 0; i < len(cSlice); i++ {
		PowerButtonStateTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PowerButtonState__Array_to_C(cSlice []CPowerButtonState, goSlice []PowerButtonState) {
	for i := 0; i < len(goSlice); i++ {
		PowerButtonStateTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
