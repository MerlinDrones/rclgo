// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/estimator_bias.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/EstimatorBias", EstimatorBiasTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/EstimatorBias", EstimatorBiasTypeSupport)
}

type EstimatorBias struct {
	Timestamp       uint64  `yaml:"timestamp"`        // time since system start (microseconds)
	TimestampSample uint64  `yaml:"timestamp_sample"` // the timestamp of the raw data (microseconds)
	DeviceId        uint32  `yaml:"device_id"`        // unique device ID for the sensor that does not change between power cycles
	Bias            float32 `yaml:"bias"`             // estimated barometric altitude bias (m)
	BiasVar         float32 `yaml:"bias_var"`         // estimated barometric altitude bias variance (m^2)
	Innov           float32 `yaml:"innov"`            // innovation of the last measurement fusion (m)
	InnovVar        float32 `yaml:"innov_var"`        // innovation variance of the last measurement fusion (m^2)
	InnovTestRatio  float32 `yaml:"innov_test_ratio"` // normalized innovation squared test ratio
}

// NewEstimatorBias creates a new EstimatorBias with default values.
func NewEstimatorBias() *EstimatorBias {
	self := EstimatorBias{}
	self.SetDefaults()
	return &self
}

func (t *EstimatorBias) Clone() *EstimatorBias {
	c := &EstimatorBias{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.DeviceId = t.DeviceId
	c.Bias = t.Bias
	c.BiasVar = t.BiasVar
	c.Innov = t.Innov
	c.InnovVar = t.InnovVar
	c.InnovTestRatio = t.InnovTestRatio
	return c
}

func (t *EstimatorBias) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EstimatorBias) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.DeviceId = 0
	t.Bias = 0
	t.BiasVar = 0
	t.Innov = 0
	t.InnovVar = 0
	t.InnovTestRatio = 0
}

func (t *EstimatorBias) GetTypeSupport() types.MessageTypeSupport {
	return EstimatorBiasTypeSupport
}

// EstimatorBiasPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EstimatorBiasPublisher struct {
	*rclgo.Publisher
}

// NewEstimatorBiasPublisher creates and returns a new publisher for the
// EstimatorBias
func NewEstimatorBiasPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EstimatorBiasPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EstimatorBiasTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EstimatorBiasPublisher{pub}, nil
}

func (p *EstimatorBiasPublisher) Publish(msg *EstimatorBias) error {
	return p.Publisher.Publish(msg)
}

// EstimatorBiasSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EstimatorBiasSubscription struct {
	*rclgo.Subscription
}

// EstimatorBiasSubscriptionCallback type is used to provide a subscription
// handler function for a EstimatorBiasSubscription.
type EstimatorBiasSubscriptionCallback func(msg *EstimatorBias, info *rclgo.MessageInfo, err error)

// NewEstimatorBiasSubscription creates and returns a new subscription for the
// EstimatorBias
func NewEstimatorBiasSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EstimatorBiasSubscriptionCallback) (*EstimatorBiasSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg EstimatorBias
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EstimatorBiasTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EstimatorBiasSubscription{sub}, nil
}

func (s *EstimatorBiasSubscription) TakeMessage(out *EstimatorBias) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEstimatorBiasSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEstimatorBiasSlice(dst, src []EstimatorBias) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EstimatorBiasTypeSupport types.MessageTypeSupport = _EstimatorBiasTypeSupport{}

type _EstimatorBiasTypeSupport struct{}

func (t _EstimatorBiasTypeSupport) New() types.Message {
	return NewEstimatorBias()
}

func (t _EstimatorBiasTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorBias
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorBias__create())
}

func (t _EstimatorBiasTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorBias__destroy((*C.px4_msgs__msg__EstimatorBias)(pointer_to_free))
}

func (t _EstimatorBiasTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EstimatorBias)
	mem := (*C.px4_msgs__msg__EstimatorBias)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.bias = C.float(m.Bias)
	mem.bias_var = C.float(m.BiasVar)
	mem.innov = C.float(m.Innov)
	mem.innov_var = C.float(m.InnovVar)
	mem.innov_test_ratio = C.float(m.InnovTestRatio)
}

func (t _EstimatorBiasTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EstimatorBias)
	mem := (*C.px4_msgs__msg__EstimatorBias)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.DeviceId = uint32(mem.device_id)
	m.Bias = float32(mem.bias)
	m.BiasVar = float32(mem.bias_var)
	m.Innov = float32(mem.innov)
	m.InnovVar = float32(mem.innov_var)
	m.InnovTestRatio = float32(mem.innov_test_ratio)
}

func (t _EstimatorBiasTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorBias())
}

type CEstimatorBias = C.px4_msgs__msg__EstimatorBias
type CEstimatorBias__Sequence = C.px4_msgs__msg__EstimatorBias__Sequence

func EstimatorBias__Sequence_to_Go(goSlice *[]EstimatorBias, cSlice CEstimatorBias__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorBias, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EstimatorBiasTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func EstimatorBias__Sequence_to_C(cSlice *CEstimatorBias__Sequence, goSlice []EstimatorBias) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorBias)(C.malloc(C.sizeof_struct_px4_msgs__msg__EstimatorBias * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EstimatorBiasTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func EstimatorBias__Array_to_Go(goSlice []EstimatorBias, cSlice []CEstimatorBias) {
	for i := 0; i < len(cSlice); i++ {
		EstimatorBiasTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorBias__Array_to_C(cSlice []CEstimatorBias, goSlice []EstimatorBias) {
	for i := 0; i < len(goSlice); i++ {
		EstimatorBiasTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
