// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_global_position.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleGlobalPosition", VehicleGlobalPositionTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleGlobalPosition", VehicleGlobalPositionTypeSupport)
}

type VehicleGlobalPosition struct {
	Timestamp           uint64  `yaml:"timestamp"`             // time since system start (microseconds)
	TimestampSample     uint64  `yaml:"timestamp_sample"`      // the timestamp of the raw data (microseconds)
	Lat                 float64 `yaml:"lat"`                   // Latitude, (degrees)
	Lon                 float64 `yaml:"lon"`                   // Longitude, (degrees)
	Alt                 float32 `yaml:"alt"`                   // Altitude AMSL, (meters)
	AltEllipsoid        float32 `yaml:"alt_ellipsoid"`         // Altitude above ellipsoid, (meters)
	DeltaAlt            float32 `yaml:"delta_alt"`             // Reset delta for altitude
	DeltaTerrain        float32 `yaml:"delta_terrain"`         // Reset delta for terrain
	LatLonResetCounter  uint8   `yaml:"lat_lon_reset_counter"` // Counter for reset events on horizontal position coordinates
	AltResetCounter     uint8   `yaml:"alt_reset_counter"`     // Counter for reset events on altitude
	TerrainResetCounter uint8   `yaml:"terrain_reset_counter"` // Counter for reset events on terrain
	Eph                 float32 `yaml:"eph"`                   // Standard deviation of horizontal position error, (metres)
	Epv                 float32 `yaml:"epv"`                   // Standard deviation of vertical position error, (metres)
	TerrainAlt          float32 `yaml:"terrain_alt"`           // Terrain altitude WGS84, (metres)
	TerrainAltValid     bool    `yaml:"terrain_alt_valid"`     // Terrain altitude estimate is valid
	DeadReckoning       bool    `yaml:"dead_reckoning"`        // True if this position is estimated through dead-reckoning
}

// NewVehicleGlobalPosition creates a new VehicleGlobalPosition with default values.
func NewVehicleGlobalPosition() *VehicleGlobalPosition {
	self := VehicleGlobalPosition{}
	self.SetDefaults()
	return &self
}

func (t *VehicleGlobalPosition) Clone() *VehicleGlobalPosition {
	c := &VehicleGlobalPosition{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.Lat = t.Lat
	c.Lon = t.Lon
	c.Alt = t.Alt
	c.AltEllipsoid = t.AltEllipsoid
	c.DeltaAlt = t.DeltaAlt
	c.DeltaTerrain = t.DeltaTerrain
	c.LatLonResetCounter = t.LatLonResetCounter
	c.AltResetCounter = t.AltResetCounter
	c.TerrainResetCounter = t.TerrainResetCounter
	c.Eph = t.Eph
	c.Epv = t.Epv
	c.TerrainAlt = t.TerrainAlt
	c.TerrainAltValid = t.TerrainAltValid
	c.DeadReckoning = t.DeadReckoning
	return c
}

func (t *VehicleGlobalPosition) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleGlobalPosition) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.Lat = 0
	t.Lon = 0
	t.Alt = 0
	t.AltEllipsoid = 0
	t.DeltaAlt = 0
	t.DeltaTerrain = 0
	t.LatLonResetCounter = 0
	t.AltResetCounter = 0
	t.TerrainResetCounter = 0
	t.Eph = 0
	t.Epv = 0
	t.TerrainAlt = 0
	t.TerrainAltValid = false
	t.DeadReckoning = false
}

func (t *VehicleGlobalPosition) GetTypeSupport() types.MessageTypeSupport {
	return VehicleGlobalPositionTypeSupport
}

// VehicleGlobalPositionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleGlobalPositionPublisher struct {
	*rclgo.Publisher
}

// NewVehicleGlobalPositionPublisher creates and returns a new publisher for the
// VehicleGlobalPosition
func NewVehicleGlobalPositionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleGlobalPositionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleGlobalPositionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleGlobalPositionPublisher{pub}, nil
}

func (p *VehicleGlobalPositionPublisher) Publish(msg *VehicleGlobalPosition) error {
	return p.Publisher.Publish(msg)
}

// VehicleGlobalPositionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleGlobalPositionSubscription struct {
	*rclgo.Subscription
}

// VehicleGlobalPositionSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleGlobalPositionSubscription.
type VehicleGlobalPositionSubscriptionCallback func(msg *VehicleGlobalPosition, info *rclgo.MessageInfo, err error)

// NewVehicleGlobalPositionSubscription creates and returns a new subscription for the
// VehicleGlobalPosition
func NewVehicleGlobalPositionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleGlobalPositionSubscriptionCallback) (*VehicleGlobalPositionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleGlobalPosition
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleGlobalPositionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleGlobalPositionSubscription{sub}, nil
}

func (s *VehicleGlobalPositionSubscription) TakeMessage(out *VehicleGlobalPosition) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleGlobalPositionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleGlobalPositionSlice(dst, src []VehicleGlobalPosition) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleGlobalPositionTypeSupport types.MessageTypeSupport = _VehicleGlobalPositionTypeSupport{}

type _VehicleGlobalPositionTypeSupport struct{}

func (t _VehicleGlobalPositionTypeSupport) New() types.Message {
	return NewVehicleGlobalPosition()
}

func (t _VehicleGlobalPositionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleGlobalPosition
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleGlobalPosition__create())
}

func (t _VehicleGlobalPositionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleGlobalPosition__destroy((*C.px4_msgs__msg__VehicleGlobalPosition)(pointer_to_free))
}

func (t _VehicleGlobalPositionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleGlobalPosition)
	mem := (*C.px4_msgs__msg__VehicleGlobalPosition)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.lat = C.double(m.Lat)
	mem.lon = C.double(m.Lon)
	mem.alt = C.float(m.Alt)
	mem.alt_ellipsoid = C.float(m.AltEllipsoid)
	mem.delta_alt = C.float(m.DeltaAlt)
	mem.delta_terrain = C.float(m.DeltaTerrain)
	mem.lat_lon_reset_counter = C.uint8_t(m.LatLonResetCounter)
	mem.alt_reset_counter = C.uint8_t(m.AltResetCounter)
	mem.terrain_reset_counter = C.uint8_t(m.TerrainResetCounter)
	mem.eph = C.float(m.Eph)
	mem.epv = C.float(m.Epv)
	mem.terrain_alt = C.float(m.TerrainAlt)
	mem.terrain_alt_valid = C.bool(m.TerrainAltValid)
	mem.dead_reckoning = C.bool(m.DeadReckoning)
}

func (t _VehicleGlobalPositionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleGlobalPosition)
	mem := (*C.px4_msgs__msg__VehicleGlobalPosition)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.Lat = float64(mem.lat)
	m.Lon = float64(mem.lon)
	m.Alt = float32(mem.alt)
	m.AltEllipsoid = float32(mem.alt_ellipsoid)
	m.DeltaAlt = float32(mem.delta_alt)
	m.DeltaTerrain = float32(mem.delta_terrain)
	m.LatLonResetCounter = uint8(mem.lat_lon_reset_counter)
	m.AltResetCounter = uint8(mem.alt_reset_counter)
	m.TerrainResetCounter = uint8(mem.terrain_reset_counter)
	m.Eph = float32(mem.eph)
	m.Epv = float32(mem.epv)
	m.TerrainAlt = float32(mem.terrain_alt)
	m.TerrainAltValid = bool(mem.terrain_alt_valid)
	m.DeadReckoning = bool(mem.dead_reckoning)
}

func (t _VehicleGlobalPositionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleGlobalPosition())
}

type CVehicleGlobalPosition = C.px4_msgs__msg__VehicleGlobalPosition
type CVehicleGlobalPosition__Sequence = C.px4_msgs__msg__VehicleGlobalPosition__Sequence

func VehicleGlobalPosition__Sequence_to_Go(goSlice *[]VehicleGlobalPosition, cSlice CVehicleGlobalPosition__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleGlobalPosition, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleGlobalPositionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleGlobalPosition__Sequence_to_C(cSlice *CVehicleGlobalPosition__Sequence, goSlice []VehicleGlobalPosition) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleGlobalPosition)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleGlobalPosition * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleGlobalPositionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleGlobalPosition__Array_to_Go(goSlice []VehicleGlobalPosition, cSlice []CVehicleGlobalPosition) {
	for i := 0; i < len(cSlice); i++ {
		VehicleGlobalPositionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleGlobalPosition__Array_to_C(cSlice []CVehicleGlobalPosition, goSlice []VehicleGlobalPosition) {
	for i := 0; i < len(goSlice); i++ {
		VehicleGlobalPositionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
