// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/open_drone_id_self_id.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/OpenDroneIdSelfId", OpenDroneIdSelfIdTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/OpenDroneIdSelfId", OpenDroneIdSelfIdTypeSupport)
}

type OpenDroneIdSelfId struct {
	Timestamp       uint64    `yaml:"timestamp"`
	IdOrMac         [20]uint8 `yaml:"id_or_mac"`
	DescriptionType uint8     `yaml:"description_type"`
	Description     [23]byte  `yaml:"description"`
}

// NewOpenDroneIdSelfId creates a new OpenDroneIdSelfId with default values.
func NewOpenDroneIdSelfId() *OpenDroneIdSelfId {
	self := OpenDroneIdSelfId{}
	self.SetDefaults()
	return &self
}

func (t *OpenDroneIdSelfId) Clone() *OpenDroneIdSelfId {
	c := &OpenDroneIdSelfId{}
	c.Timestamp = t.Timestamp
	c.IdOrMac = t.IdOrMac
	c.DescriptionType = t.DescriptionType
	c.Description = t.Description
	return c
}

func (t *OpenDroneIdSelfId) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OpenDroneIdSelfId) SetDefaults() {
	t.Timestamp = 0
	t.IdOrMac = [20]uint8{}
	t.DescriptionType = 0
	t.Description = [23]byte{}
}

func (t *OpenDroneIdSelfId) GetTypeSupport() types.MessageTypeSupport {
	return OpenDroneIdSelfIdTypeSupport
}

// OpenDroneIdSelfIdPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OpenDroneIdSelfIdPublisher struct {
	*rclgo.Publisher
}

// NewOpenDroneIdSelfIdPublisher creates and returns a new publisher for the
// OpenDroneIdSelfId
func NewOpenDroneIdSelfIdPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OpenDroneIdSelfIdPublisher, error) {
	pub, err := node.NewPublisher(topic_name, OpenDroneIdSelfIdTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OpenDroneIdSelfIdPublisher{pub}, nil
}

func (p *OpenDroneIdSelfIdPublisher) Publish(msg *OpenDroneIdSelfId) error {
	return p.Publisher.Publish(msg)
}

// OpenDroneIdSelfIdSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OpenDroneIdSelfIdSubscription struct {
	*rclgo.Subscription
}

// OpenDroneIdSelfIdSubscriptionCallback type is used to provide a subscription
// handler function for a OpenDroneIdSelfIdSubscription.
type OpenDroneIdSelfIdSubscriptionCallback func(msg *OpenDroneIdSelfId, info *rclgo.MessageInfo, err error)

// NewOpenDroneIdSelfIdSubscription creates and returns a new subscription for the
// OpenDroneIdSelfId
func NewOpenDroneIdSelfIdSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OpenDroneIdSelfIdSubscriptionCallback) (*OpenDroneIdSelfIdSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OpenDroneIdSelfId
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OpenDroneIdSelfIdTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OpenDroneIdSelfIdSubscription{sub}, nil
}

func (s *OpenDroneIdSelfIdSubscription) TakeMessage(out *OpenDroneIdSelfId) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOpenDroneIdSelfIdSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOpenDroneIdSelfIdSlice(dst, src []OpenDroneIdSelfId) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OpenDroneIdSelfIdTypeSupport types.MessageTypeSupport = _OpenDroneIdSelfIdTypeSupport{}

type _OpenDroneIdSelfIdTypeSupport struct{}

func (t _OpenDroneIdSelfIdTypeSupport) New() types.Message {
	return NewOpenDroneIdSelfId()
}

func (t _OpenDroneIdSelfIdTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__OpenDroneIdSelfId
	return (unsafe.Pointer)(C.px4_msgs__msg__OpenDroneIdSelfId__create())
}

func (t _OpenDroneIdSelfIdTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__OpenDroneIdSelfId__destroy((*C.px4_msgs__msg__OpenDroneIdSelfId)(pointer_to_free))
}

func (t _OpenDroneIdSelfIdTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OpenDroneIdSelfId)
	mem := (*C.px4_msgs__msg__OpenDroneIdSelfId)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_id_or_mac := mem.id_or_mac[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_id_or_mac)), m.IdOrMac[:])
	mem.description_type = C.uint8_t(m.DescriptionType)
	cSlice_description := mem.description[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_description)), m.Description[:])
}

func (t _OpenDroneIdSelfIdTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OpenDroneIdSelfId)
	mem := (*C.px4_msgs__msg__OpenDroneIdSelfId)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_id_or_mac := mem.id_or_mac[:]
	primitives.Uint8__Array_to_Go(m.IdOrMac[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_id_or_mac)))
	m.DescriptionType = uint8(mem.description_type)
	cSlice_description := mem.description[:]
	primitives.Char__Array_to_Go(m.Description[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_description)))
}

func (t _OpenDroneIdSelfIdTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__OpenDroneIdSelfId())
}

type COpenDroneIdSelfId = C.px4_msgs__msg__OpenDroneIdSelfId
type COpenDroneIdSelfId__Sequence = C.px4_msgs__msg__OpenDroneIdSelfId__Sequence

func OpenDroneIdSelfId__Sequence_to_Go(goSlice *[]OpenDroneIdSelfId, cSlice COpenDroneIdSelfId__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OpenDroneIdSelfId, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OpenDroneIdSelfIdTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OpenDroneIdSelfId__Sequence_to_C(cSlice *COpenDroneIdSelfId__Sequence, goSlice []OpenDroneIdSelfId) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__OpenDroneIdSelfId)(C.malloc(C.sizeof_struct_px4_msgs__msg__OpenDroneIdSelfId * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OpenDroneIdSelfIdTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OpenDroneIdSelfId__Array_to_Go(goSlice []OpenDroneIdSelfId, cSlice []COpenDroneIdSelfId) {
	for i := 0; i < len(cSlice); i++ {
		OpenDroneIdSelfIdTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OpenDroneIdSelfId__Array_to_C(cSlice []COpenDroneIdSelfId, goSlice []OpenDroneIdSelfId) {
	for i := 0; i < len(goSlice); i++ {
		OpenDroneIdSelfIdTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
