// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/power_monitor.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/PowerMonitor", PowerMonitorTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/PowerMonitor", PowerMonitorTypeSupport)
}

type PowerMonitor struct {
	Timestamp uint64  `yaml:"timestamp"` // Time since system start (microseconds)
	VoltageV  float32 `yaml:"voltage_v"` // Voltage in volts, 0 if unknown
	CurrentA  float32 `yaml:"current_a"` // Current in amperes, -1 if unknown
	PowerW    float32 `yaml:"power_w"`   // power in watts, -1 if unknown
	Rconf     int16   `yaml:"rconf"`
	Rsv       int16   `yaml:"rsv"`
	Rbv       int16   `yaml:"rbv"`
	Rp        int16   `yaml:"rp"`
	Rc        int16   `yaml:"rc"`
	Rcal      int16   `yaml:"rcal"`
	Me        int16   `yaml:"me"`
	Al        int16   `yaml:"al"`
}

// NewPowerMonitor creates a new PowerMonitor with default values.
func NewPowerMonitor() *PowerMonitor {
	self := PowerMonitor{}
	self.SetDefaults()
	return &self
}

func (t *PowerMonitor) Clone() *PowerMonitor {
	c := &PowerMonitor{}
	c.Timestamp = t.Timestamp
	c.VoltageV = t.VoltageV
	c.CurrentA = t.CurrentA
	c.PowerW = t.PowerW
	c.Rconf = t.Rconf
	c.Rsv = t.Rsv
	c.Rbv = t.Rbv
	c.Rp = t.Rp
	c.Rc = t.Rc
	c.Rcal = t.Rcal
	c.Me = t.Me
	c.Al = t.Al
	return c
}

func (t *PowerMonitor) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PowerMonitor) SetDefaults() {
	t.Timestamp = 0
	t.VoltageV = 0
	t.CurrentA = 0
	t.PowerW = 0
	t.Rconf = 0
	t.Rsv = 0
	t.Rbv = 0
	t.Rp = 0
	t.Rc = 0
	t.Rcal = 0
	t.Me = 0
	t.Al = 0
}

func (t *PowerMonitor) GetTypeSupport() types.MessageTypeSupport {
	return PowerMonitorTypeSupport
}

// PowerMonitorPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PowerMonitorPublisher struct {
	*rclgo.Publisher
}

// NewPowerMonitorPublisher creates and returns a new publisher for the
// PowerMonitor
func NewPowerMonitorPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PowerMonitorPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PowerMonitorTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PowerMonitorPublisher{pub}, nil
}

func (p *PowerMonitorPublisher) Publish(msg *PowerMonitor) error {
	return p.Publisher.Publish(msg)
}

// PowerMonitorSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PowerMonitorSubscription struct {
	*rclgo.Subscription
}

// PowerMonitorSubscriptionCallback type is used to provide a subscription
// handler function for a PowerMonitorSubscription.
type PowerMonitorSubscriptionCallback func(msg *PowerMonitor, info *rclgo.MessageInfo, err error)

// NewPowerMonitorSubscription creates and returns a new subscription for the
// PowerMonitor
func NewPowerMonitorSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PowerMonitorSubscriptionCallback) (*PowerMonitorSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PowerMonitor
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PowerMonitorTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PowerMonitorSubscription{sub}, nil
}

func (s *PowerMonitorSubscription) TakeMessage(out *PowerMonitor) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePowerMonitorSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePowerMonitorSlice(dst, src []PowerMonitor) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PowerMonitorTypeSupport types.MessageTypeSupport = _PowerMonitorTypeSupport{}

type _PowerMonitorTypeSupport struct{}

func (t _PowerMonitorTypeSupport) New() types.Message {
	return NewPowerMonitor()
}

func (t _PowerMonitorTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__PowerMonitor
	return (unsafe.Pointer)(C.px4_msgs__msg__PowerMonitor__create())
}

func (t _PowerMonitorTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__PowerMonitor__destroy((*C.px4_msgs__msg__PowerMonitor)(pointer_to_free))
}

func (t _PowerMonitorTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PowerMonitor)
	mem := (*C.px4_msgs__msg__PowerMonitor)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.voltage_v = C.float(m.VoltageV)
	mem.current_a = C.float(m.CurrentA)
	mem.power_w = C.float(m.PowerW)
	mem.rconf = C.int16_t(m.Rconf)
	mem.rsv = C.int16_t(m.Rsv)
	mem.rbv = C.int16_t(m.Rbv)
	mem.rp = C.int16_t(m.Rp)
	mem.rc = C.int16_t(m.Rc)
	mem.rcal = C.int16_t(m.Rcal)
	mem.me = C.int16_t(m.Me)
	mem.al = C.int16_t(m.Al)
}

func (t _PowerMonitorTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PowerMonitor)
	mem := (*C.px4_msgs__msg__PowerMonitor)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.VoltageV = float32(mem.voltage_v)
	m.CurrentA = float32(mem.current_a)
	m.PowerW = float32(mem.power_w)
	m.Rconf = int16(mem.rconf)
	m.Rsv = int16(mem.rsv)
	m.Rbv = int16(mem.rbv)
	m.Rp = int16(mem.rp)
	m.Rc = int16(mem.rc)
	m.Rcal = int16(mem.rcal)
	m.Me = int16(mem.me)
	m.Al = int16(mem.al)
}

func (t _PowerMonitorTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__PowerMonitor())
}

type CPowerMonitor = C.px4_msgs__msg__PowerMonitor
type CPowerMonitor__Sequence = C.px4_msgs__msg__PowerMonitor__Sequence

func PowerMonitor__Sequence_to_Go(goSlice *[]PowerMonitor, cSlice CPowerMonitor__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PowerMonitor, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PowerMonitorTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PowerMonitor__Sequence_to_C(cSlice *CPowerMonitor__Sequence, goSlice []PowerMonitor) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__PowerMonitor)(C.malloc(C.sizeof_struct_px4_msgs__msg__PowerMonitor * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PowerMonitorTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PowerMonitor__Array_to_Go(goSlice []PowerMonitor, cSlice []CPowerMonitor) {
	for i := 0; i < len(cSlice); i++ {
		PowerMonitorTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PowerMonitor__Array_to_C(cSlice []CPowerMonitor, goSlice []PowerMonitor) {
	for i := 0; i < len(goSlice); i++ {
		PowerMonitorTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
