// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_attitude_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleAttitudeSetpoint", VehicleAttitudeSetpointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleAttitudeSetpoint", VehicleAttitudeSetpointTypeSupport)
}

type VehicleAttitudeSetpoint struct {
	Timestamp         uint64     `yaml:"timestamp"`            // time since system start (microseconds)
	YawSpMoveRate     float32    `yaml:"yaw_sp_move_rate"`     // rad/s (commanded by user)
	QD                [4]float32 `yaml:"q_d"`                  // Desired quaternion for quaternion control. For quaternion-based attitude control
	ThrustBody        [3]float32 `yaml:"thrust_body"`          // Normalized thrust command in body FRD frame [-1,1]. For clarification: For multicopters thrust_body[0] and thrust[1] are usually 0 and thrust[2] is the negative throttle demand.For fixed wings thrust_x is the throttle demand and thrust_y, thrust_z will usually be zero.
	ResetIntegral     bool       `yaml:"reset_integral"`       // Reset roll/pitch/yaw integrals (navigation logic change)
	FwControlYawWheel bool       `yaml:"fw_control_yaw_wheel"` // control heading with steering wheel (used for auto takeoff on runway)
}

// NewVehicleAttitudeSetpoint creates a new VehicleAttitudeSetpoint with default values.
func NewVehicleAttitudeSetpoint() *VehicleAttitudeSetpoint {
	self := VehicleAttitudeSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *VehicleAttitudeSetpoint) Clone() *VehicleAttitudeSetpoint {
	c := &VehicleAttitudeSetpoint{}
	c.Timestamp = t.Timestamp
	c.YawSpMoveRate = t.YawSpMoveRate
	c.QD = t.QD
	c.ThrustBody = t.ThrustBody
	c.ResetIntegral = t.ResetIntegral
	c.FwControlYawWheel = t.FwControlYawWheel
	return c
}

func (t *VehicleAttitudeSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleAttitudeSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.YawSpMoveRate = 0
	t.QD = [4]float32{}
	t.ThrustBody = [3]float32{}
	t.ResetIntegral = false
	t.FwControlYawWheel = false
}

func (t *VehicleAttitudeSetpoint) GetTypeSupport() types.MessageTypeSupport {
	return VehicleAttitudeSetpointTypeSupport
}

// VehicleAttitudeSetpointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleAttitudeSetpointPublisher struct {
	*rclgo.Publisher
}

// NewVehicleAttitudeSetpointPublisher creates and returns a new publisher for the
// VehicleAttitudeSetpoint
func NewVehicleAttitudeSetpointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleAttitudeSetpointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleAttitudeSetpointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleAttitudeSetpointPublisher{pub}, nil
}

func (p *VehicleAttitudeSetpointPublisher) Publish(msg *VehicleAttitudeSetpoint) error {
	return p.Publisher.Publish(msg)
}

// VehicleAttitudeSetpointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleAttitudeSetpointSubscription struct {
	*rclgo.Subscription
}

// VehicleAttitudeSetpointSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleAttitudeSetpointSubscription.
type VehicleAttitudeSetpointSubscriptionCallback func(msg *VehicleAttitudeSetpoint, info *rclgo.MessageInfo, err error)

// NewVehicleAttitudeSetpointSubscription creates and returns a new subscription for the
// VehicleAttitudeSetpoint
func NewVehicleAttitudeSetpointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleAttitudeSetpointSubscriptionCallback) (*VehicleAttitudeSetpointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleAttitudeSetpoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleAttitudeSetpointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleAttitudeSetpointSubscription{sub}, nil
}

func (s *VehicleAttitudeSetpointSubscription) TakeMessage(out *VehicleAttitudeSetpoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleAttitudeSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleAttitudeSetpointSlice(dst, src []VehicleAttitudeSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleAttitudeSetpointTypeSupport types.MessageTypeSupport = _VehicleAttitudeSetpointTypeSupport{}

type _VehicleAttitudeSetpointTypeSupport struct{}

func (t _VehicleAttitudeSetpointTypeSupport) New() types.Message {
	return NewVehicleAttitudeSetpoint()
}

func (t _VehicleAttitudeSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleAttitudeSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleAttitudeSetpoint__create())
}

func (t _VehicleAttitudeSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleAttitudeSetpoint__destroy((*C.px4_msgs__msg__VehicleAttitudeSetpoint)(pointer_to_free))
}

func (t _VehicleAttitudeSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleAttitudeSetpoint)
	mem := (*C.px4_msgs__msg__VehicleAttitudeSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.yaw_sp_move_rate = C.float(m.YawSpMoveRate)
	cSlice_q_d := mem.q_d[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_q_d)), m.QD[:])
	cSlice_thrust_body := mem.thrust_body[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_thrust_body)), m.ThrustBody[:])
	mem.reset_integral = C.bool(m.ResetIntegral)
	mem.fw_control_yaw_wheel = C.bool(m.FwControlYawWheel)
}

func (t _VehicleAttitudeSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleAttitudeSetpoint)
	mem := (*C.px4_msgs__msg__VehicleAttitudeSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.YawSpMoveRate = float32(mem.yaw_sp_move_rate)
	cSlice_q_d := mem.q_d[:]
	primitives.Float32__Array_to_Go(m.QD[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_q_d)))
	cSlice_thrust_body := mem.thrust_body[:]
	primitives.Float32__Array_to_Go(m.ThrustBody[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_thrust_body)))
	m.ResetIntegral = bool(mem.reset_integral)
	m.FwControlYawWheel = bool(mem.fw_control_yaw_wheel)
}

func (t _VehicleAttitudeSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleAttitudeSetpoint())
}

type CVehicleAttitudeSetpoint = C.px4_msgs__msg__VehicleAttitudeSetpoint
type CVehicleAttitudeSetpoint__Sequence = C.px4_msgs__msg__VehicleAttitudeSetpoint__Sequence

func VehicleAttitudeSetpoint__Sequence_to_Go(goSlice *[]VehicleAttitudeSetpoint, cSlice CVehicleAttitudeSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleAttitudeSetpoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleAttitudeSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleAttitudeSetpoint__Sequence_to_C(cSlice *CVehicleAttitudeSetpoint__Sequence, goSlice []VehicleAttitudeSetpoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleAttitudeSetpoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleAttitudeSetpoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleAttitudeSetpointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleAttitudeSetpoint__Array_to_Go(goSlice []VehicleAttitudeSetpoint, cSlice []CVehicleAttitudeSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		VehicleAttitudeSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleAttitudeSetpoint__Array_to_C(cSlice []CVehicleAttitudeSetpoint, goSlice []VehicleAttitudeSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		VehicleAttitudeSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
