// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/manual_control_switches.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ManualControlSwitches", ManualControlSwitchesTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ManualControlSwitches", ManualControlSwitchesTypeSupport)
}

const (
	ManualControlSwitches_SWITCH_POS_NONE   uint8 = 0 // switch is not mapped
	ManualControlSwitches_SWITCH_POS_ON     uint8 = 1 // switch activated (value = 1)
	ManualControlSwitches_SWITCH_POS_MIDDLE uint8 = 2 // middle position (value = 0)
	ManualControlSwitches_SWITCH_POS_OFF    uint8 = 3 // switch not activated (value = -1)
	ManualControlSwitches_MODE_SLOT_NONE    uint8 = 0 // no mode slot assigned
	ManualControlSwitches_MODE_SLOT_1       uint8 = 1 // mode slot 1 selected
	ManualControlSwitches_MODE_SLOT_2       uint8 = 2 // mode slot 2 selected
	ManualControlSwitches_MODE_SLOT_3       uint8 = 3 // mode slot 3 selected
	ManualControlSwitches_MODE_SLOT_4       uint8 = 4 // mode slot 4 selected
	ManualControlSwitches_MODE_SLOT_5       uint8 = 5 // mode slot 5 selected
	ManualControlSwitches_MODE_SLOT_6       uint8 = 6 // mode slot 6 selected
	ManualControlSwitches_MODE_SLOT_NUM     uint8 = 6 // number of slots
)

type ManualControlSwitches struct {
	Timestamp             uint64 `yaml:"timestamp"`                // time since system start (microseconds)
	TimestampSample       uint64 `yaml:"timestamp_sample"`         // the timestamp of the raw data (microseconds)
	ModeSlot              uint8  `yaml:"mode_slot"`                // the slot a specific model selector is in
	ArmSwitch             uint8  `yaml:"arm_switch"`               // arm/disarm switch: _DISARMED_, ARMED
	ReturnSwitch          uint8  `yaml:"return_switch"`            // return to launch 2 position switch (mandatory): _NORMAL_, RTL
	LoiterSwitch          uint8  `yaml:"loiter_switch"`            // loiter 2 position switch (optional): _MISSION_, LOITER
	OffboardSwitch        uint8  `yaml:"offboard_switch"`          // offboard 2 position switch (optional): _NORMAL_, OFFBOARD
	KillSwitch            uint8  `yaml:"kill_switch"`              // throttle kill: _NORMAL_, KILL
	GearSwitch            uint8  `yaml:"gear_switch"`              // landing gear switch: _DOWN_, UP
	TransitionSwitch      uint8  `yaml:"transition_switch"`        // VTOL transition switch: _HOVER, FORWARD_FLIGHT
	PhotoSwitch           uint8  `yaml:"photo_switch"`             // Photo trigger switch
	VideoSwitch           uint8  `yaml:"video_switch"`             // Photo trigger switch
	EngageMainMotorSwitch uint8  `yaml:"engage_main_motor_switch"` // Engage the main motor (for helicopters)
	SwitchChanges         uint32 `yaml:"switch_changes"`           // number of switch changes
}

// NewManualControlSwitches creates a new ManualControlSwitches with default values.
func NewManualControlSwitches() *ManualControlSwitches {
	self := ManualControlSwitches{}
	self.SetDefaults()
	return &self
}

func (t *ManualControlSwitches) Clone() *ManualControlSwitches {
	c := &ManualControlSwitches{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.ModeSlot = t.ModeSlot
	c.ArmSwitch = t.ArmSwitch
	c.ReturnSwitch = t.ReturnSwitch
	c.LoiterSwitch = t.LoiterSwitch
	c.OffboardSwitch = t.OffboardSwitch
	c.KillSwitch = t.KillSwitch
	c.GearSwitch = t.GearSwitch
	c.TransitionSwitch = t.TransitionSwitch
	c.PhotoSwitch = t.PhotoSwitch
	c.VideoSwitch = t.VideoSwitch
	c.EngageMainMotorSwitch = t.EngageMainMotorSwitch
	c.SwitchChanges = t.SwitchChanges
	return c
}

func (t *ManualControlSwitches) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ManualControlSwitches) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.ModeSlot = 0
	t.ArmSwitch = 0
	t.ReturnSwitch = 0
	t.LoiterSwitch = 0
	t.OffboardSwitch = 0
	t.KillSwitch = 0
	t.GearSwitch = 0
	t.TransitionSwitch = 0
	t.PhotoSwitch = 0
	t.VideoSwitch = 0
	t.EngageMainMotorSwitch = 0
	t.SwitchChanges = 0
}

func (t *ManualControlSwitches) GetTypeSupport() types.MessageTypeSupport {
	return ManualControlSwitchesTypeSupport
}

// ManualControlSwitchesPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ManualControlSwitchesPublisher struct {
	*rclgo.Publisher
}

// NewManualControlSwitchesPublisher creates and returns a new publisher for the
// ManualControlSwitches
func NewManualControlSwitchesPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ManualControlSwitchesPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ManualControlSwitchesTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ManualControlSwitchesPublisher{pub}, nil
}

func (p *ManualControlSwitchesPublisher) Publish(msg *ManualControlSwitches) error {
	return p.Publisher.Publish(msg)
}

// ManualControlSwitchesSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ManualControlSwitchesSubscription struct {
	*rclgo.Subscription
}

// ManualControlSwitchesSubscriptionCallback type is used to provide a subscription
// handler function for a ManualControlSwitchesSubscription.
type ManualControlSwitchesSubscriptionCallback func(msg *ManualControlSwitches, info *rclgo.MessageInfo, err error)

// NewManualControlSwitchesSubscription creates and returns a new subscription for the
// ManualControlSwitches
func NewManualControlSwitchesSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ManualControlSwitchesSubscriptionCallback) (*ManualControlSwitchesSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ManualControlSwitches
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ManualControlSwitchesTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ManualControlSwitchesSubscription{sub}, nil
}

func (s *ManualControlSwitchesSubscription) TakeMessage(out *ManualControlSwitches) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneManualControlSwitchesSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneManualControlSwitchesSlice(dst, src []ManualControlSwitches) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ManualControlSwitchesTypeSupport types.MessageTypeSupport = _ManualControlSwitchesTypeSupport{}

type _ManualControlSwitchesTypeSupport struct{}

func (t _ManualControlSwitchesTypeSupport) New() types.Message {
	return NewManualControlSwitches()
}

func (t _ManualControlSwitchesTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ManualControlSwitches
	return (unsafe.Pointer)(C.px4_msgs__msg__ManualControlSwitches__create())
}

func (t _ManualControlSwitchesTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ManualControlSwitches__destroy((*C.px4_msgs__msg__ManualControlSwitches)(pointer_to_free))
}

func (t _ManualControlSwitchesTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ManualControlSwitches)
	mem := (*C.px4_msgs__msg__ManualControlSwitches)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.mode_slot = C.uint8_t(m.ModeSlot)
	mem.arm_switch = C.uint8_t(m.ArmSwitch)
	mem.return_switch = C.uint8_t(m.ReturnSwitch)
	mem.loiter_switch = C.uint8_t(m.LoiterSwitch)
	mem.offboard_switch = C.uint8_t(m.OffboardSwitch)
	mem.kill_switch = C.uint8_t(m.KillSwitch)
	mem.gear_switch = C.uint8_t(m.GearSwitch)
	mem.transition_switch = C.uint8_t(m.TransitionSwitch)
	mem.photo_switch = C.uint8_t(m.PhotoSwitch)
	mem.video_switch = C.uint8_t(m.VideoSwitch)
	mem.engage_main_motor_switch = C.uint8_t(m.EngageMainMotorSwitch)
	mem.switch_changes = C.uint32_t(m.SwitchChanges)
}

func (t _ManualControlSwitchesTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ManualControlSwitches)
	mem := (*C.px4_msgs__msg__ManualControlSwitches)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.ModeSlot = uint8(mem.mode_slot)
	m.ArmSwitch = uint8(mem.arm_switch)
	m.ReturnSwitch = uint8(mem.return_switch)
	m.LoiterSwitch = uint8(mem.loiter_switch)
	m.OffboardSwitch = uint8(mem.offboard_switch)
	m.KillSwitch = uint8(mem.kill_switch)
	m.GearSwitch = uint8(mem.gear_switch)
	m.TransitionSwitch = uint8(mem.transition_switch)
	m.PhotoSwitch = uint8(mem.photo_switch)
	m.VideoSwitch = uint8(mem.video_switch)
	m.EngageMainMotorSwitch = uint8(mem.engage_main_motor_switch)
	m.SwitchChanges = uint32(mem.switch_changes)
}

func (t _ManualControlSwitchesTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ManualControlSwitches())
}

type CManualControlSwitches = C.px4_msgs__msg__ManualControlSwitches
type CManualControlSwitches__Sequence = C.px4_msgs__msg__ManualControlSwitches__Sequence

func ManualControlSwitches__Sequence_to_Go(goSlice *[]ManualControlSwitches, cSlice CManualControlSwitches__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ManualControlSwitches, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ManualControlSwitchesTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ManualControlSwitches__Sequence_to_C(cSlice *CManualControlSwitches__Sequence, goSlice []ManualControlSwitches) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ManualControlSwitches)(C.malloc(C.sizeof_struct_px4_msgs__msg__ManualControlSwitches * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ManualControlSwitchesTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ManualControlSwitches__Array_to_Go(goSlice []ManualControlSwitches, cSlice []CManualControlSwitches) {
	for i := 0; i < len(cSlice); i++ {
		ManualControlSwitchesTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ManualControlSwitches__Array_to_C(cSlice []CManualControlSwitches, goSlice []ManualControlSwitches) {
	for i := 0; i < len(goSlice); i++ {
		ManualControlSwitchesTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
