// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_constraints.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleConstraints", VehicleConstraintsTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleConstraints", VehicleConstraintsTypeSupport)
}

type VehicleConstraints struct {
	Timestamp   uint64  `yaml:"timestamp"`    // time since system start (microseconds)
	SpeedUp     float32 `yaml:"speed_up"`     // in meters/sec
	SpeedDown   float32 `yaml:"speed_down"`   // in meters/sec
	WantTakeoff bool    `yaml:"want_takeoff"` // tell the controller to initiate takeoff when idling (ignored during flight)
}

// NewVehicleConstraints creates a new VehicleConstraints with default values.
func NewVehicleConstraints() *VehicleConstraints {
	self := VehicleConstraints{}
	self.SetDefaults()
	return &self
}

func (t *VehicleConstraints) Clone() *VehicleConstraints {
	c := &VehicleConstraints{}
	c.Timestamp = t.Timestamp
	c.SpeedUp = t.SpeedUp
	c.SpeedDown = t.SpeedDown
	c.WantTakeoff = t.WantTakeoff
	return c
}

func (t *VehicleConstraints) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleConstraints) SetDefaults() {
	t.Timestamp = 0
	t.SpeedUp = 0
	t.SpeedDown = 0
	t.WantTakeoff = false
}

func (t *VehicleConstraints) GetTypeSupport() types.MessageTypeSupport {
	return VehicleConstraintsTypeSupport
}

// VehicleConstraintsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleConstraintsPublisher struct {
	*rclgo.Publisher
}

// NewVehicleConstraintsPublisher creates and returns a new publisher for the
// VehicleConstraints
func NewVehicleConstraintsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleConstraintsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleConstraintsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleConstraintsPublisher{pub}, nil
}

func (p *VehicleConstraintsPublisher) Publish(msg *VehicleConstraints) error {
	return p.Publisher.Publish(msg)
}

// VehicleConstraintsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleConstraintsSubscription struct {
	*rclgo.Subscription
}

// VehicleConstraintsSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleConstraintsSubscription.
type VehicleConstraintsSubscriptionCallback func(msg *VehicleConstraints, info *rclgo.MessageInfo, err error)

// NewVehicleConstraintsSubscription creates and returns a new subscription for the
// VehicleConstraints
func NewVehicleConstraintsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleConstraintsSubscriptionCallback) (*VehicleConstraintsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleConstraints
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleConstraintsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleConstraintsSubscription{sub}, nil
}

func (s *VehicleConstraintsSubscription) TakeMessage(out *VehicleConstraints) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleConstraintsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleConstraintsSlice(dst, src []VehicleConstraints) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleConstraintsTypeSupport types.MessageTypeSupport = _VehicleConstraintsTypeSupport{}

type _VehicleConstraintsTypeSupport struct{}

func (t _VehicleConstraintsTypeSupport) New() types.Message {
	return NewVehicleConstraints()
}

func (t _VehicleConstraintsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleConstraints
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleConstraints__create())
}

func (t _VehicleConstraintsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleConstraints__destroy((*C.px4_msgs__msg__VehicleConstraints)(pointer_to_free))
}

func (t _VehicleConstraintsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleConstraints)
	mem := (*C.px4_msgs__msg__VehicleConstraints)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.speed_up = C.float(m.SpeedUp)
	mem.speed_down = C.float(m.SpeedDown)
	mem.want_takeoff = C.bool(m.WantTakeoff)
}

func (t _VehicleConstraintsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleConstraints)
	mem := (*C.px4_msgs__msg__VehicleConstraints)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.SpeedUp = float32(mem.speed_up)
	m.SpeedDown = float32(mem.speed_down)
	m.WantTakeoff = bool(mem.want_takeoff)
}

func (t _VehicleConstraintsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleConstraints())
}

type CVehicleConstraints = C.px4_msgs__msg__VehicleConstraints
type CVehicleConstraints__Sequence = C.px4_msgs__msg__VehicleConstraints__Sequence

func VehicleConstraints__Sequence_to_Go(goSlice *[]VehicleConstraints, cSlice CVehicleConstraints__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleConstraints, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleConstraintsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleConstraints__Sequence_to_C(cSlice *CVehicleConstraints__Sequence, goSlice []VehicleConstraints) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleConstraints)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleConstraints * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleConstraintsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleConstraints__Array_to_Go(goSlice []VehicleConstraints, cSlice []CVehicleConstraints) {
	for i := 0; i < len(cSlice); i++ {
		VehicleConstraintsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleConstraints__Array_to_C(cSlice []CVehicleConstraints, goSlice []VehicleConstraints) {
	for i := 0; i < len(goSlice); i++ {
		VehicleConstraintsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
