// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/position_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/PositionSetpoint", PositionSetpointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/PositionSetpoint", PositionSetpointTypeSupport)
}

const (
	PositionSetpoint_SETPOINT_TYPE_POSITION  uint8 = 0 // position setpoint
	PositionSetpoint_SETPOINT_TYPE_VELOCITY  uint8 = 1 // velocity setpoint
	PositionSetpoint_SETPOINT_TYPE_LOITER    uint8 = 2 // loiter setpoint
	PositionSetpoint_SETPOINT_TYPE_TAKEOFF   uint8 = 3 // takeoff setpoint
	PositionSetpoint_SETPOINT_TYPE_LAND      uint8 = 4 // land setpoint, altitude must be ignored, descend until landing
	PositionSetpoint_SETPOINT_TYPE_IDLE      uint8 = 5 // do nothing, switch off motors or keep at idle speed (MC)
	PositionSetpoint_LOITER_TYPE_ORBIT       uint8 = 0 // Circular pattern
	PositionSetpoint_LOITER_TYPE_FIGUREEIGHT uint8 = 1 // Pattern resembling an 8
)

type PositionSetpoint struct {
	Timestamp                       uint64  `yaml:"timestamp"`                          // time since system start (microseconds)
	Valid                           bool    `yaml:"valid"`                              // true if setpoint is valid
	Type                            uint8   `yaml:"type"`                               // setpoint type to adjust behavior of position controller
	Vx                              float32 `yaml:"vx"`                                 // local velocity setpoint in m/s in NED
	Vy                              float32 `yaml:"vy"`                                 // local velocity setpoint in m/s in NED
	Vz                              float32 `yaml:"vz"`                                 // local velocity setpoint in m/s in NED
	Lat                             float64 `yaml:"lat"`                                // latitude, in deg
	Lon                             float64 `yaml:"lon"`                                // longitude, in deg
	Alt                             float32 `yaml:"alt"`                                // altitude AMSL, in m
	Yaw                             float32 `yaml:"yaw"`                                // yaw (only in hover), in rad [-PI..PI), NaN = leave to flight task
	LoiterRadius                    float32 `yaml:"loiter_radius"`                      // loiter major axis radius in m
	LoiterMinorRadius               float32 `yaml:"loiter_minor_radius"`                // loiter minor axis radius (used for non-circular loiter shapes) in m
	LoiterDirectionCounterClockwise bool    `yaml:"loiter_direction_counter_clockwise"` // loiter direction is clockwise by default and can be changed using this field
	LoiterOrientation               float32 `yaml:"loiter_orientation"`                 // Orientation of the major axis with respect to true north in rad [-pi,pi)
	LoiterPattern                   uint8   `yaml:"loiter_pattern"`                     // loitern pattern to follow
	AcceptanceRadius                float32 `yaml:"acceptance_radius"`                  // horizontal acceptance_radius (meters)
	AltAcceptanceRadius             float32 `yaml:"alt_acceptance_radius"`              // vertical acceptance radius, only used for fixed wing guidance, NAN = let guidance choose (meters)
	CruisingSpeed                   float32 `yaml:"cruising_speed"`                     // the generally desired cruising speed (not a hard constraint)
	GlidingEnabled                  bool    `yaml:"gliding_enabled"`                    // commands the vehicle to glide if the capability is available (fixed wing only)
	CruisingThrottle                float32 `yaml:"cruising_throttle"`                  // the generally desired cruising throttle (not a hard constraint), only has an effect for rover
}

// NewPositionSetpoint creates a new PositionSetpoint with default values.
func NewPositionSetpoint() *PositionSetpoint {
	self := PositionSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *PositionSetpoint) Clone() *PositionSetpoint {
	c := &PositionSetpoint{}
	c.Timestamp = t.Timestamp
	c.Valid = t.Valid
	c.Type = t.Type
	c.Vx = t.Vx
	c.Vy = t.Vy
	c.Vz = t.Vz
	c.Lat = t.Lat
	c.Lon = t.Lon
	c.Alt = t.Alt
	c.Yaw = t.Yaw
	c.LoiterRadius = t.LoiterRadius
	c.LoiterMinorRadius = t.LoiterMinorRadius
	c.LoiterDirectionCounterClockwise = t.LoiterDirectionCounterClockwise
	c.LoiterOrientation = t.LoiterOrientation
	c.LoiterPattern = t.LoiterPattern
	c.AcceptanceRadius = t.AcceptanceRadius
	c.AltAcceptanceRadius = t.AltAcceptanceRadius
	c.CruisingSpeed = t.CruisingSpeed
	c.GlidingEnabled = t.GlidingEnabled
	c.CruisingThrottle = t.CruisingThrottle
	return c
}

func (t *PositionSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PositionSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.Valid = false
	t.Type = 0
	t.Vx = 0
	t.Vy = 0
	t.Vz = 0
	t.Lat = 0
	t.Lon = 0
	t.Alt = 0
	t.Yaw = 0
	t.LoiterRadius = 0
	t.LoiterMinorRadius = 0
	t.LoiterDirectionCounterClockwise = false
	t.LoiterOrientation = 0
	t.LoiterPattern = 0
	t.AcceptanceRadius = 0
	t.AltAcceptanceRadius = 0
	t.CruisingSpeed = 0
	t.GlidingEnabled = false
	t.CruisingThrottle = 0
}

func (t *PositionSetpoint) GetTypeSupport() types.MessageTypeSupport {
	return PositionSetpointTypeSupport
}

// PositionSetpointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PositionSetpointPublisher struct {
	*rclgo.Publisher
}

// NewPositionSetpointPublisher creates and returns a new publisher for the
// PositionSetpoint
func NewPositionSetpointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PositionSetpointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PositionSetpointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PositionSetpointPublisher{pub}, nil
}

func (p *PositionSetpointPublisher) Publish(msg *PositionSetpoint) error {
	return p.Publisher.Publish(msg)
}

// PositionSetpointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PositionSetpointSubscription struct {
	*rclgo.Subscription
}

// PositionSetpointSubscriptionCallback type is used to provide a subscription
// handler function for a PositionSetpointSubscription.
type PositionSetpointSubscriptionCallback func(msg *PositionSetpoint, info *rclgo.MessageInfo, err error)

// NewPositionSetpointSubscription creates and returns a new subscription for the
// PositionSetpoint
func NewPositionSetpointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PositionSetpointSubscriptionCallback) (*PositionSetpointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PositionSetpoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PositionSetpointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PositionSetpointSubscription{sub}, nil
}

func (s *PositionSetpointSubscription) TakeMessage(out *PositionSetpoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePositionSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePositionSetpointSlice(dst, src []PositionSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PositionSetpointTypeSupport types.MessageTypeSupport = _PositionSetpointTypeSupport{}

type _PositionSetpointTypeSupport struct{}

func (t _PositionSetpointTypeSupport) New() types.Message {
	return NewPositionSetpoint()
}

func (t _PositionSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__PositionSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__PositionSetpoint__create())
}

func (t _PositionSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__PositionSetpoint__destroy((*C.px4_msgs__msg__PositionSetpoint)(pointer_to_free))
}

func (t _PositionSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PositionSetpoint)
	mem := (*C.px4_msgs__msg__PositionSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.valid = C.bool(m.Valid)
	mem._type = C.uint8_t(m.Type)
	mem.vx = C.float(m.Vx)
	mem.vy = C.float(m.Vy)
	mem.vz = C.float(m.Vz)
	mem.lat = C.double(m.Lat)
	mem.lon = C.double(m.Lon)
	mem.alt = C.float(m.Alt)
	mem.yaw = C.float(m.Yaw)
	mem.loiter_radius = C.float(m.LoiterRadius)
	mem.loiter_minor_radius = C.float(m.LoiterMinorRadius)
	mem.loiter_direction_counter_clockwise = C.bool(m.LoiterDirectionCounterClockwise)
	mem.loiter_orientation = C.float(m.LoiterOrientation)
	mem.loiter_pattern = C.uint8_t(m.LoiterPattern)
	mem.acceptance_radius = C.float(m.AcceptanceRadius)
	mem.alt_acceptance_radius = C.float(m.AltAcceptanceRadius)
	mem.cruising_speed = C.float(m.CruisingSpeed)
	mem.gliding_enabled = C.bool(m.GlidingEnabled)
	mem.cruising_throttle = C.float(m.CruisingThrottle)
}

func (t _PositionSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PositionSetpoint)
	mem := (*C.px4_msgs__msg__PositionSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Valid = bool(mem.valid)
	m.Type = uint8(mem._type)
	m.Vx = float32(mem.vx)
	m.Vy = float32(mem.vy)
	m.Vz = float32(mem.vz)
	m.Lat = float64(mem.lat)
	m.Lon = float64(mem.lon)
	m.Alt = float32(mem.alt)
	m.Yaw = float32(mem.yaw)
	m.LoiterRadius = float32(mem.loiter_radius)
	m.LoiterMinorRadius = float32(mem.loiter_minor_radius)
	m.LoiterDirectionCounterClockwise = bool(mem.loiter_direction_counter_clockwise)
	m.LoiterOrientation = float32(mem.loiter_orientation)
	m.LoiterPattern = uint8(mem.loiter_pattern)
	m.AcceptanceRadius = float32(mem.acceptance_radius)
	m.AltAcceptanceRadius = float32(mem.alt_acceptance_radius)
	m.CruisingSpeed = float32(mem.cruising_speed)
	m.GlidingEnabled = bool(mem.gliding_enabled)
	m.CruisingThrottle = float32(mem.cruising_throttle)
}

func (t _PositionSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__PositionSetpoint())
}

type CPositionSetpoint = C.px4_msgs__msg__PositionSetpoint
type CPositionSetpoint__Sequence = C.px4_msgs__msg__PositionSetpoint__Sequence

func PositionSetpoint__Sequence_to_Go(goSlice *[]PositionSetpoint, cSlice CPositionSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PositionSetpoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PositionSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PositionSetpoint__Sequence_to_C(cSlice *CPositionSetpoint__Sequence, goSlice []PositionSetpoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__PositionSetpoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__PositionSetpoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PositionSetpointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PositionSetpoint__Array_to_Go(goSlice []PositionSetpoint, cSlice []CPositionSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		PositionSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PositionSetpoint__Array_to_C(cSlice []CPositionSetpoint, goSlice []PositionSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		PositionSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
