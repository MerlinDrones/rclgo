// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/landing_target_pose.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/LandingTargetPose", LandingTargetPoseTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/LandingTargetPose", LandingTargetPoseTypeSupport)
}

type LandingTargetPose struct {
	Timestamp   uint64  `yaml:"timestamp"`     // time since system start (microseconds)
	IsStatic    bool    `yaml:"is_static"`     // Flag indicating whether the landing target is static or moving with respect to the ground
	RelPosValid bool    `yaml:"rel_pos_valid"` // Flag showing whether relative position is valid
	RelVelValid bool    `yaml:"rel_vel_valid"` // Flag showing whether relative velocity is valid
	XRel        float32 `yaml:"x_rel"`         // X/north position of target, relative to vehicle (navigation frame) [meters]
	YRel        float32 `yaml:"y_rel"`         // Y/east position of target, relative to vehicle (navigation frame) [meters]
	ZRel        float32 `yaml:"z_rel"`         // Z/down position of target, relative to vehicle (navigation frame) [meters]
	VxRel       float32 `yaml:"vx_rel"`        // X/north velocity  of target, relative to vehicle (navigation frame) [meters/second]
	VyRel       float32 `yaml:"vy_rel"`        // Y/east velocity of target, relative to vehicle (navigation frame) [meters/second]
	CovXRel     float32 `yaml:"cov_x_rel"`     // X/north position variance [meters^2]
	CovYRel     float32 `yaml:"cov_y_rel"`     // Y/east position variance [meters^2]
	CovVxRel    float32 `yaml:"cov_vx_rel"`    // X/north velocity variance [(meters/second)^2]
	CovVyRel    float32 `yaml:"cov_vy_rel"`    // Y/east velocity variance [(meters/second)^2]
	AbsPosValid bool    `yaml:"abs_pos_valid"` // Flag showing whether absolute position is valid
	XAbs        float32 `yaml:"x_abs"`         // X/north position of target, relative to origin (navigation frame) [meters]
	YAbs        float32 `yaml:"y_abs"`         // Y/east position of target, relative to origin (navigation frame) [meters]
	ZAbs        float32 `yaml:"z_abs"`         // Z/down position of target, relative to origin (navigation frame) [meters]
}

// NewLandingTargetPose creates a new LandingTargetPose with default values.
func NewLandingTargetPose() *LandingTargetPose {
	self := LandingTargetPose{}
	self.SetDefaults()
	return &self
}

func (t *LandingTargetPose) Clone() *LandingTargetPose {
	c := &LandingTargetPose{}
	c.Timestamp = t.Timestamp
	c.IsStatic = t.IsStatic
	c.RelPosValid = t.RelPosValid
	c.RelVelValid = t.RelVelValid
	c.XRel = t.XRel
	c.YRel = t.YRel
	c.ZRel = t.ZRel
	c.VxRel = t.VxRel
	c.VyRel = t.VyRel
	c.CovXRel = t.CovXRel
	c.CovYRel = t.CovYRel
	c.CovVxRel = t.CovVxRel
	c.CovVyRel = t.CovVyRel
	c.AbsPosValid = t.AbsPosValid
	c.XAbs = t.XAbs
	c.YAbs = t.YAbs
	c.ZAbs = t.ZAbs
	return c
}

func (t *LandingTargetPose) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LandingTargetPose) SetDefaults() {
	t.Timestamp = 0
	t.IsStatic = false
	t.RelPosValid = false
	t.RelVelValid = false
	t.XRel = 0
	t.YRel = 0
	t.ZRel = 0
	t.VxRel = 0
	t.VyRel = 0
	t.CovXRel = 0
	t.CovYRel = 0
	t.CovVxRel = 0
	t.CovVyRel = 0
	t.AbsPosValid = false
	t.XAbs = 0
	t.YAbs = 0
	t.ZAbs = 0
}

func (t *LandingTargetPose) GetTypeSupport() types.MessageTypeSupport {
	return LandingTargetPoseTypeSupport
}

// LandingTargetPosePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LandingTargetPosePublisher struct {
	*rclgo.Publisher
}

// NewLandingTargetPosePublisher creates and returns a new publisher for the
// LandingTargetPose
func NewLandingTargetPosePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LandingTargetPosePublisher, error) {
	pub, err := node.NewPublisher(topic_name, LandingTargetPoseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LandingTargetPosePublisher{pub}, nil
}

func (p *LandingTargetPosePublisher) Publish(msg *LandingTargetPose) error {
	return p.Publisher.Publish(msg)
}

// LandingTargetPoseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LandingTargetPoseSubscription struct {
	*rclgo.Subscription
}

// LandingTargetPoseSubscriptionCallback type is used to provide a subscription
// handler function for a LandingTargetPoseSubscription.
type LandingTargetPoseSubscriptionCallback func(msg *LandingTargetPose, info *rclgo.MessageInfo, err error)

// NewLandingTargetPoseSubscription creates and returns a new subscription for the
// LandingTargetPose
func NewLandingTargetPoseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LandingTargetPoseSubscriptionCallback) (*LandingTargetPoseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LandingTargetPose
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LandingTargetPoseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LandingTargetPoseSubscription{sub}, nil
}

func (s *LandingTargetPoseSubscription) TakeMessage(out *LandingTargetPose) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLandingTargetPoseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLandingTargetPoseSlice(dst, src []LandingTargetPose) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LandingTargetPoseTypeSupport types.MessageTypeSupport = _LandingTargetPoseTypeSupport{}

type _LandingTargetPoseTypeSupport struct{}

func (t _LandingTargetPoseTypeSupport) New() types.Message {
	return NewLandingTargetPose()
}

func (t _LandingTargetPoseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__LandingTargetPose
	return (unsafe.Pointer)(C.px4_msgs__msg__LandingTargetPose__create())
}

func (t _LandingTargetPoseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__LandingTargetPose__destroy((*C.px4_msgs__msg__LandingTargetPose)(pointer_to_free))
}

func (t _LandingTargetPoseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LandingTargetPose)
	mem := (*C.px4_msgs__msg__LandingTargetPose)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.is_static = C.bool(m.IsStatic)
	mem.rel_pos_valid = C.bool(m.RelPosValid)
	mem.rel_vel_valid = C.bool(m.RelVelValid)
	mem.x_rel = C.float(m.XRel)
	mem.y_rel = C.float(m.YRel)
	mem.z_rel = C.float(m.ZRel)
	mem.vx_rel = C.float(m.VxRel)
	mem.vy_rel = C.float(m.VyRel)
	mem.cov_x_rel = C.float(m.CovXRel)
	mem.cov_y_rel = C.float(m.CovYRel)
	mem.cov_vx_rel = C.float(m.CovVxRel)
	mem.cov_vy_rel = C.float(m.CovVyRel)
	mem.abs_pos_valid = C.bool(m.AbsPosValid)
	mem.x_abs = C.float(m.XAbs)
	mem.y_abs = C.float(m.YAbs)
	mem.z_abs = C.float(m.ZAbs)
}

func (t _LandingTargetPoseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LandingTargetPose)
	mem := (*C.px4_msgs__msg__LandingTargetPose)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.IsStatic = bool(mem.is_static)
	m.RelPosValid = bool(mem.rel_pos_valid)
	m.RelVelValid = bool(mem.rel_vel_valid)
	m.XRel = float32(mem.x_rel)
	m.YRel = float32(mem.y_rel)
	m.ZRel = float32(mem.z_rel)
	m.VxRel = float32(mem.vx_rel)
	m.VyRel = float32(mem.vy_rel)
	m.CovXRel = float32(mem.cov_x_rel)
	m.CovYRel = float32(mem.cov_y_rel)
	m.CovVxRel = float32(mem.cov_vx_rel)
	m.CovVyRel = float32(mem.cov_vy_rel)
	m.AbsPosValid = bool(mem.abs_pos_valid)
	m.XAbs = float32(mem.x_abs)
	m.YAbs = float32(mem.y_abs)
	m.ZAbs = float32(mem.z_abs)
}

func (t _LandingTargetPoseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__LandingTargetPose())
}

type CLandingTargetPose = C.px4_msgs__msg__LandingTargetPose
type CLandingTargetPose__Sequence = C.px4_msgs__msg__LandingTargetPose__Sequence

func LandingTargetPose__Sequence_to_Go(goSlice *[]LandingTargetPose, cSlice CLandingTargetPose__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LandingTargetPose, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LandingTargetPoseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LandingTargetPose__Sequence_to_C(cSlice *CLandingTargetPose__Sequence, goSlice []LandingTargetPose) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__LandingTargetPose)(C.malloc(C.sizeof_struct_px4_msgs__msg__LandingTargetPose * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LandingTargetPoseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LandingTargetPose__Array_to_Go(goSlice []LandingTargetPose, cSlice []CLandingTargetPose) {
	for i := 0; i < len(cSlice); i++ {
		LandingTargetPoseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LandingTargetPose__Array_to_C(cSlice []CLandingTargetPose, goSlice []LandingTargetPose) {
	for i := 0; i < len(goSlice); i++ {
		LandingTargetPoseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
