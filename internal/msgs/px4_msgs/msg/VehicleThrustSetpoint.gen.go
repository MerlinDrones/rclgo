// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_thrust_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleThrustSetpoint", VehicleThrustSetpointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleThrustSetpoint", VehicleThrustSetpointTypeSupport)
}

type VehicleThrustSetpoint struct {
	Timestamp       uint64     `yaml:"timestamp"`        // time since system start (microseconds)
	TimestampSample uint64     `yaml:"timestamp_sample"` // timestamp of the data sample on which this message is based (microseconds)
	Xyz             [3]float32 `yaml:"xyz"`              // thrust setpoint along X, Y, Z body axis [-1, 1]
}

// NewVehicleThrustSetpoint creates a new VehicleThrustSetpoint with default values.
func NewVehicleThrustSetpoint() *VehicleThrustSetpoint {
	self := VehicleThrustSetpoint{}
	self.SetDefaults()
	return &self
}

func (t *VehicleThrustSetpoint) Clone() *VehicleThrustSetpoint {
	c := &VehicleThrustSetpoint{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.Xyz = t.Xyz
	return c
}

func (t *VehicleThrustSetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleThrustSetpoint) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.Xyz = [3]float32{}
}

func (t *VehicleThrustSetpoint) GetTypeSupport() types.MessageTypeSupport {
	return VehicleThrustSetpointTypeSupport
}

// VehicleThrustSetpointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleThrustSetpointPublisher struct {
	*rclgo.Publisher
}

// NewVehicleThrustSetpointPublisher creates and returns a new publisher for the
// VehicleThrustSetpoint
func NewVehicleThrustSetpointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleThrustSetpointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleThrustSetpointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleThrustSetpointPublisher{pub}, nil
}

func (p *VehicleThrustSetpointPublisher) Publish(msg *VehicleThrustSetpoint) error {
	return p.Publisher.Publish(msg)
}

// VehicleThrustSetpointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleThrustSetpointSubscription struct {
	*rclgo.Subscription
}

// VehicleThrustSetpointSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleThrustSetpointSubscription.
type VehicleThrustSetpointSubscriptionCallback func(msg *VehicleThrustSetpoint, info *rclgo.MessageInfo, err error)

// NewVehicleThrustSetpointSubscription creates and returns a new subscription for the
// VehicleThrustSetpoint
func NewVehicleThrustSetpointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleThrustSetpointSubscriptionCallback) (*VehicleThrustSetpointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleThrustSetpoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleThrustSetpointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleThrustSetpointSubscription{sub}, nil
}

func (s *VehicleThrustSetpointSubscription) TakeMessage(out *VehicleThrustSetpoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleThrustSetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleThrustSetpointSlice(dst, src []VehicleThrustSetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleThrustSetpointTypeSupport types.MessageTypeSupport = _VehicleThrustSetpointTypeSupport{}

type _VehicleThrustSetpointTypeSupport struct{}

func (t _VehicleThrustSetpointTypeSupport) New() types.Message {
	return NewVehicleThrustSetpoint()
}

func (t _VehicleThrustSetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleThrustSetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleThrustSetpoint__create())
}

func (t _VehicleThrustSetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleThrustSetpoint__destroy((*C.px4_msgs__msg__VehicleThrustSetpoint)(pointer_to_free))
}

func (t _VehicleThrustSetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleThrustSetpoint)
	mem := (*C.px4_msgs__msg__VehicleThrustSetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	cSlice_xyz := mem.xyz[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_xyz)), m.Xyz[:])
}

func (t _VehicleThrustSetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleThrustSetpoint)
	mem := (*C.px4_msgs__msg__VehicleThrustSetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	cSlice_xyz := mem.xyz[:]
	primitives.Float32__Array_to_Go(m.Xyz[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_xyz)))
}

func (t _VehicleThrustSetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleThrustSetpoint())
}

type CVehicleThrustSetpoint = C.px4_msgs__msg__VehicleThrustSetpoint
type CVehicleThrustSetpoint__Sequence = C.px4_msgs__msg__VehicleThrustSetpoint__Sequence

func VehicleThrustSetpoint__Sequence_to_Go(goSlice *[]VehicleThrustSetpoint, cSlice CVehicleThrustSetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleThrustSetpoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleThrustSetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleThrustSetpoint__Sequence_to_C(cSlice *CVehicleThrustSetpoint__Sequence, goSlice []VehicleThrustSetpoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleThrustSetpoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleThrustSetpoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleThrustSetpointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleThrustSetpoint__Array_to_Go(goSlice []VehicleThrustSetpoint, cSlice []CVehicleThrustSetpoint) {
	for i := 0; i < len(cSlice); i++ {
		VehicleThrustSetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleThrustSetpoint__Array_to_C(cSlice []CVehicleThrustSetpoint, goSlice []VehicleThrustSetpoint) {
	for i := 0; i < len(goSlice); i++ {
		VehicleThrustSetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
