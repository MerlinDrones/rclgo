// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/estimator_gps_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/EstimatorGpsStatus", EstimatorGpsStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/EstimatorGpsStatus", EstimatorGpsStatusTypeSupport)
}

type EstimatorGpsStatus struct {
	Timestamp                     uint64  `yaml:"timestamp"`        // time since system start (microseconds)
	TimestampSample               uint64  `yaml:"timestamp_sample"` // the timestamp of the raw data (microseconds)
	ChecksPassed                  bool    `yaml:"checks_passed"`
	CheckFailGpsFix               bool    `yaml:"check_fail_gps_fix"`                 // 0 : insufficient fix type (no 3D solution)
	CheckFailMinSatCount          bool    `yaml:"check_fail_min_sat_count"`           // 1 : minimum required sat count fail
	CheckFailMaxPdop              bool    `yaml:"check_fail_max_pdop"`                // 2 : maximum allowed PDOP fail
	CheckFailMaxHorzErr           bool    `yaml:"check_fail_max_horz_err"`            // 3 : maximum allowed horizontal position error fail
	CheckFailMaxVertErr           bool    `yaml:"check_fail_max_vert_err"`            // 4 : maximum allowed vertical position error fail
	CheckFailMaxSpdErr            bool    `yaml:"check_fail_max_spd_err"`             // 5 : maximum allowed speed error fail
	CheckFailMaxHorzDrift         bool    `yaml:"check_fail_max_horz_drift"`          // 6 : maximum allowed horizontal position drift fail - requires stationary vehicle
	CheckFailMaxVertDrift         bool    `yaml:"check_fail_max_vert_drift"`          // 7 : maximum allowed vertical position drift fail - requires stationary vehicle
	CheckFailMaxHorzSpdErr        bool    `yaml:"check_fail_max_horz_spd_err"`        // 8 : maximum allowed horizontal speed fail - requires stationary vehicle
	CheckFailMaxVertSpdErr        bool    `yaml:"check_fail_max_vert_spd_err"`        // 9 : maximum allowed vertical velocity discrepancy fail
	CheckFailSpoofedGps           bool    `yaml:"check_fail_spoofed_gps"`             // 10 : GPS signal is spoofed
	PositionDriftRateHorizontalMS float32 `yaml:"position_drift_rate_horizontal_m_s"` // Horizontal position rate magnitude (m/s)
	PositionDriftRateVerticalMS   float32 `yaml:"position_drift_rate_vertical_m_s"`   // Vertical position rate magnitude (m/s)
	FilteredHorizontalSpeedMS     float32 `yaml:"filtered_horizontal_speed_m_s"`      // Filtered horizontal velocity magnitude (m/s)
}

// NewEstimatorGpsStatus creates a new EstimatorGpsStatus with default values.
func NewEstimatorGpsStatus() *EstimatorGpsStatus {
	self := EstimatorGpsStatus{}
	self.SetDefaults()
	return &self
}

func (t *EstimatorGpsStatus) Clone() *EstimatorGpsStatus {
	c := &EstimatorGpsStatus{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.ChecksPassed = t.ChecksPassed
	c.CheckFailGpsFix = t.CheckFailGpsFix
	c.CheckFailMinSatCount = t.CheckFailMinSatCount
	c.CheckFailMaxPdop = t.CheckFailMaxPdop
	c.CheckFailMaxHorzErr = t.CheckFailMaxHorzErr
	c.CheckFailMaxVertErr = t.CheckFailMaxVertErr
	c.CheckFailMaxSpdErr = t.CheckFailMaxSpdErr
	c.CheckFailMaxHorzDrift = t.CheckFailMaxHorzDrift
	c.CheckFailMaxVertDrift = t.CheckFailMaxVertDrift
	c.CheckFailMaxHorzSpdErr = t.CheckFailMaxHorzSpdErr
	c.CheckFailMaxVertSpdErr = t.CheckFailMaxVertSpdErr
	c.CheckFailSpoofedGps = t.CheckFailSpoofedGps
	c.PositionDriftRateHorizontalMS = t.PositionDriftRateHorizontalMS
	c.PositionDriftRateVerticalMS = t.PositionDriftRateVerticalMS
	c.FilteredHorizontalSpeedMS = t.FilteredHorizontalSpeedMS
	return c
}

func (t *EstimatorGpsStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EstimatorGpsStatus) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.ChecksPassed = false
	t.CheckFailGpsFix = false
	t.CheckFailMinSatCount = false
	t.CheckFailMaxPdop = false
	t.CheckFailMaxHorzErr = false
	t.CheckFailMaxVertErr = false
	t.CheckFailMaxSpdErr = false
	t.CheckFailMaxHorzDrift = false
	t.CheckFailMaxVertDrift = false
	t.CheckFailMaxHorzSpdErr = false
	t.CheckFailMaxVertSpdErr = false
	t.CheckFailSpoofedGps = false
	t.PositionDriftRateHorizontalMS = 0
	t.PositionDriftRateVerticalMS = 0
	t.FilteredHorizontalSpeedMS = 0
}

func (t *EstimatorGpsStatus) GetTypeSupport() types.MessageTypeSupport {
	return EstimatorGpsStatusTypeSupport
}

// EstimatorGpsStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EstimatorGpsStatusPublisher struct {
	*rclgo.Publisher
}

// NewEstimatorGpsStatusPublisher creates and returns a new publisher for the
// EstimatorGpsStatus
func NewEstimatorGpsStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EstimatorGpsStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EstimatorGpsStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EstimatorGpsStatusPublisher{pub}, nil
}

func (p *EstimatorGpsStatusPublisher) Publish(msg *EstimatorGpsStatus) error {
	return p.Publisher.Publish(msg)
}

// EstimatorGpsStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EstimatorGpsStatusSubscription struct {
	*rclgo.Subscription
}

// EstimatorGpsStatusSubscriptionCallback type is used to provide a subscription
// handler function for a EstimatorGpsStatusSubscription.
type EstimatorGpsStatusSubscriptionCallback func(msg *EstimatorGpsStatus, info *rclgo.MessageInfo, err error)

// NewEstimatorGpsStatusSubscription creates and returns a new subscription for the
// EstimatorGpsStatus
func NewEstimatorGpsStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EstimatorGpsStatusSubscriptionCallback) (*EstimatorGpsStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg EstimatorGpsStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EstimatorGpsStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EstimatorGpsStatusSubscription{sub}, nil
}

func (s *EstimatorGpsStatusSubscription) TakeMessage(out *EstimatorGpsStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEstimatorGpsStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEstimatorGpsStatusSlice(dst, src []EstimatorGpsStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EstimatorGpsStatusTypeSupport types.MessageTypeSupport = _EstimatorGpsStatusTypeSupport{}

type _EstimatorGpsStatusTypeSupport struct{}

func (t _EstimatorGpsStatusTypeSupport) New() types.Message {
	return NewEstimatorGpsStatus()
}

func (t _EstimatorGpsStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorGpsStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorGpsStatus__create())
}

func (t _EstimatorGpsStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorGpsStatus__destroy((*C.px4_msgs__msg__EstimatorGpsStatus)(pointer_to_free))
}

func (t _EstimatorGpsStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EstimatorGpsStatus)
	mem := (*C.px4_msgs__msg__EstimatorGpsStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.checks_passed = C.bool(m.ChecksPassed)
	mem.check_fail_gps_fix = C.bool(m.CheckFailGpsFix)
	mem.check_fail_min_sat_count = C.bool(m.CheckFailMinSatCount)
	mem.check_fail_max_pdop = C.bool(m.CheckFailMaxPdop)
	mem.check_fail_max_horz_err = C.bool(m.CheckFailMaxHorzErr)
	mem.check_fail_max_vert_err = C.bool(m.CheckFailMaxVertErr)
	mem.check_fail_max_spd_err = C.bool(m.CheckFailMaxSpdErr)
	mem.check_fail_max_horz_drift = C.bool(m.CheckFailMaxHorzDrift)
	mem.check_fail_max_vert_drift = C.bool(m.CheckFailMaxVertDrift)
	mem.check_fail_max_horz_spd_err = C.bool(m.CheckFailMaxHorzSpdErr)
	mem.check_fail_max_vert_spd_err = C.bool(m.CheckFailMaxVertSpdErr)
	mem.check_fail_spoofed_gps = C.bool(m.CheckFailSpoofedGps)
	mem.position_drift_rate_horizontal_m_s = C.float(m.PositionDriftRateHorizontalMS)
	mem.position_drift_rate_vertical_m_s = C.float(m.PositionDriftRateVerticalMS)
	mem.filtered_horizontal_speed_m_s = C.float(m.FilteredHorizontalSpeedMS)
}

func (t _EstimatorGpsStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EstimatorGpsStatus)
	mem := (*C.px4_msgs__msg__EstimatorGpsStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.ChecksPassed = bool(mem.checks_passed)
	m.CheckFailGpsFix = bool(mem.check_fail_gps_fix)
	m.CheckFailMinSatCount = bool(mem.check_fail_min_sat_count)
	m.CheckFailMaxPdop = bool(mem.check_fail_max_pdop)
	m.CheckFailMaxHorzErr = bool(mem.check_fail_max_horz_err)
	m.CheckFailMaxVertErr = bool(mem.check_fail_max_vert_err)
	m.CheckFailMaxSpdErr = bool(mem.check_fail_max_spd_err)
	m.CheckFailMaxHorzDrift = bool(mem.check_fail_max_horz_drift)
	m.CheckFailMaxVertDrift = bool(mem.check_fail_max_vert_drift)
	m.CheckFailMaxHorzSpdErr = bool(mem.check_fail_max_horz_spd_err)
	m.CheckFailMaxVertSpdErr = bool(mem.check_fail_max_vert_spd_err)
	m.CheckFailSpoofedGps = bool(mem.check_fail_spoofed_gps)
	m.PositionDriftRateHorizontalMS = float32(mem.position_drift_rate_horizontal_m_s)
	m.PositionDriftRateVerticalMS = float32(mem.position_drift_rate_vertical_m_s)
	m.FilteredHorizontalSpeedMS = float32(mem.filtered_horizontal_speed_m_s)
}

func (t _EstimatorGpsStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorGpsStatus())
}

type CEstimatorGpsStatus = C.px4_msgs__msg__EstimatorGpsStatus
type CEstimatorGpsStatus__Sequence = C.px4_msgs__msg__EstimatorGpsStatus__Sequence

func EstimatorGpsStatus__Sequence_to_Go(goSlice *[]EstimatorGpsStatus, cSlice CEstimatorGpsStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorGpsStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EstimatorGpsStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func EstimatorGpsStatus__Sequence_to_C(cSlice *CEstimatorGpsStatus__Sequence, goSlice []EstimatorGpsStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorGpsStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__EstimatorGpsStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EstimatorGpsStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func EstimatorGpsStatus__Array_to_Go(goSlice []EstimatorGpsStatus, cSlice []CEstimatorGpsStatus) {
	for i := 0; i < len(cSlice); i++ {
		EstimatorGpsStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorGpsStatus__Array_to_C(cSlice []CEstimatorGpsStatus, goSlice []EstimatorGpsStatus) {
	for i := 0; i < len(goSlice); i++ {
		EstimatorGpsStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
