// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/open_drone_id_system.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/OpenDroneIdSystem", OpenDroneIdSystemTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/OpenDroneIdSystem", OpenDroneIdSystemTypeSupport)
}

type OpenDroneIdSystem struct {
	Timestamp            uint64    `yaml:"timestamp"`
	IdOrMac              [20]uint8 `yaml:"id_or_mac"`
	OperatorLocationType uint8     `yaml:"operator_location_type"`
	ClassificationType   uint8     `yaml:"classification_type"`
	OperatorLatitude     int32     `yaml:"operator_latitude"`
	OperatorLongitude    int32     `yaml:"operator_longitude"`
	AreaCount            uint16    `yaml:"area_count"`
	AreaRadius           uint16    `yaml:"area_radius"`
	AreaCeiling          float32   `yaml:"area_ceiling"`
	AreaFloor            float32   `yaml:"area_floor"`
	CategoryEu           uint8     `yaml:"category_eu"`
	ClassEu              uint8     `yaml:"class_eu"`
	OperatorAltitudeGeo  float32   `yaml:"operator_altitude_geo"`
}

// NewOpenDroneIdSystem creates a new OpenDroneIdSystem with default values.
func NewOpenDroneIdSystem() *OpenDroneIdSystem {
	self := OpenDroneIdSystem{}
	self.SetDefaults()
	return &self
}

func (t *OpenDroneIdSystem) Clone() *OpenDroneIdSystem {
	c := &OpenDroneIdSystem{}
	c.Timestamp = t.Timestamp
	c.IdOrMac = t.IdOrMac
	c.OperatorLocationType = t.OperatorLocationType
	c.ClassificationType = t.ClassificationType
	c.OperatorLatitude = t.OperatorLatitude
	c.OperatorLongitude = t.OperatorLongitude
	c.AreaCount = t.AreaCount
	c.AreaRadius = t.AreaRadius
	c.AreaCeiling = t.AreaCeiling
	c.AreaFloor = t.AreaFloor
	c.CategoryEu = t.CategoryEu
	c.ClassEu = t.ClassEu
	c.OperatorAltitudeGeo = t.OperatorAltitudeGeo
	return c
}

func (t *OpenDroneIdSystem) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OpenDroneIdSystem) SetDefaults() {
	t.Timestamp = 0
	t.IdOrMac = [20]uint8{}
	t.OperatorLocationType = 0
	t.ClassificationType = 0
	t.OperatorLatitude = 0
	t.OperatorLongitude = 0
	t.AreaCount = 0
	t.AreaRadius = 0
	t.AreaCeiling = 0
	t.AreaFloor = 0
	t.CategoryEu = 0
	t.ClassEu = 0
	t.OperatorAltitudeGeo = 0
}

func (t *OpenDroneIdSystem) GetTypeSupport() types.MessageTypeSupport {
	return OpenDroneIdSystemTypeSupport
}

// OpenDroneIdSystemPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OpenDroneIdSystemPublisher struct {
	*rclgo.Publisher
}

// NewOpenDroneIdSystemPublisher creates and returns a new publisher for the
// OpenDroneIdSystem
func NewOpenDroneIdSystemPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OpenDroneIdSystemPublisher, error) {
	pub, err := node.NewPublisher(topic_name, OpenDroneIdSystemTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OpenDroneIdSystemPublisher{pub}, nil
}

func (p *OpenDroneIdSystemPublisher) Publish(msg *OpenDroneIdSystem) error {
	return p.Publisher.Publish(msg)
}

// OpenDroneIdSystemSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OpenDroneIdSystemSubscription struct {
	*rclgo.Subscription
}

// OpenDroneIdSystemSubscriptionCallback type is used to provide a subscription
// handler function for a OpenDroneIdSystemSubscription.
type OpenDroneIdSystemSubscriptionCallback func(msg *OpenDroneIdSystem, info *rclgo.MessageInfo, err error)

// NewOpenDroneIdSystemSubscription creates and returns a new subscription for the
// OpenDroneIdSystem
func NewOpenDroneIdSystemSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OpenDroneIdSystemSubscriptionCallback) (*OpenDroneIdSystemSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OpenDroneIdSystem
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OpenDroneIdSystemTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OpenDroneIdSystemSubscription{sub}, nil
}

func (s *OpenDroneIdSystemSubscription) TakeMessage(out *OpenDroneIdSystem) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOpenDroneIdSystemSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOpenDroneIdSystemSlice(dst, src []OpenDroneIdSystem) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OpenDroneIdSystemTypeSupport types.MessageTypeSupport = _OpenDroneIdSystemTypeSupport{}

type _OpenDroneIdSystemTypeSupport struct{}

func (t _OpenDroneIdSystemTypeSupport) New() types.Message {
	return NewOpenDroneIdSystem()
}

func (t _OpenDroneIdSystemTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__OpenDroneIdSystem
	return (unsafe.Pointer)(C.px4_msgs__msg__OpenDroneIdSystem__create())
}

func (t _OpenDroneIdSystemTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__OpenDroneIdSystem__destroy((*C.px4_msgs__msg__OpenDroneIdSystem)(pointer_to_free))
}

func (t _OpenDroneIdSystemTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OpenDroneIdSystem)
	mem := (*C.px4_msgs__msg__OpenDroneIdSystem)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_id_or_mac := mem.id_or_mac[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_id_or_mac)), m.IdOrMac[:])
	mem.operator_location_type = C.uint8_t(m.OperatorLocationType)
	mem.classification_type = C.uint8_t(m.ClassificationType)
	mem.operator_latitude = C.int32_t(m.OperatorLatitude)
	mem.operator_longitude = C.int32_t(m.OperatorLongitude)
	mem.area_count = C.uint16_t(m.AreaCount)
	mem.area_radius = C.uint16_t(m.AreaRadius)
	mem.area_ceiling = C.float(m.AreaCeiling)
	mem.area_floor = C.float(m.AreaFloor)
	mem.category_eu = C.uint8_t(m.CategoryEu)
	mem.class_eu = C.uint8_t(m.ClassEu)
	mem.operator_altitude_geo = C.float(m.OperatorAltitudeGeo)
}

func (t _OpenDroneIdSystemTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OpenDroneIdSystem)
	mem := (*C.px4_msgs__msg__OpenDroneIdSystem)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_id_or_mac := mem.id_or_mac[:]
	primitives.Uint8__Array_to_Go(m.IdOrMac[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_id_or_mac)))
	m.OperatorLocationType = uint8(mem.operator_location_type)
	m.ClassificationType = uint8(mem.classification_type)
	m.OperatorLatitude = int32(mem.operator_latitude)
	m.OperatorLongitude = int32(mem.operator_longitude)
	m.AreaCount = uint16(mem.area_count)
	m.AreaRadius = uint16(mem.area_radius)
	m.AreaCeiling = float32(mem.area_ceiling)
	m.AreaFloor = float32(mem.area_floor)
	m.CategoryEu = uint8(mem.category_eu)
	m.ClassEu = uint8(mem.class_eu)
	m.OperatorAltitudeGeo = float32(mem.operator_altitude_geo)
}

func (t _OpenDroneIdSystemTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__OpenDroneIdSystem())
}

type COpenDroneIdSystem = C.px4_msgs__msg__OpenDroneIdSystem
type COpenDroneIdSystem__Sequence = C.px4_msgs__msg__OpenDroneIdSystem__Sequence

func OpenDroneIdSystem__Sequence_to_Go(goSlice *[]OpenDroneIdSystem, cSlice COpenDroneIdSystem__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OpenDroneIdSystem, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OpenDroneIdSystemTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OpenDroneIdSystem__Sequence_to_C(cSlice *COpenDroneIdSystem__Sequence, goSlice []OpenDroneIdSystem) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__OpenDroneIdSystem)(C.malloc(C.sizeof_struct_px4_msgs__msg__OpenDroneIdSystem * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OpenDroneIdSystemTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OpenDroneIdSystem__Array_to_Go(goSlice []OpenDroneIdSystem, cSlice []COpenDroneIdSystem) {
	for i := 0; i < len(cSlice); i++ {
		OpenDroneIdSystemTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OpenDroneIdSystem__Array_to_C(cSlice []COpenDroneIdSystem, goSlice []OpenDroneIdSystem) {
	for i := 0; i < len(goSlice); i++ {
		OpenDroneIdSystemTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
