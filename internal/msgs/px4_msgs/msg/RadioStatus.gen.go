// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/radio_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RadioStatus", RadioStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RadioStatus", RadioStatusTypeSupport)
}

type RadioStatus struct {
	Timestamp   uint64 `yaml:"timestamp"`    // time since system start (microseconds)
	Rssi        uint8  `yaml:"rssi"`         // local signal strength
	RemoteRssi  uint8  `yaml:"remote_rssi"`  // remote signal strength
	Txbuf       uint8  `yaml:"txbuf"`        // how full the tx buffer is as a percentage
	Noise       uint8  `yaml:"noise"`        // background noise level
	RemoteNoise uint8  `yaml:"remote_noise"` // remote background noise level
	Rxerrors    uint16 `yaml:"rxerrors"`     // receive errors
	Fix         uint16 `yaml:"fix"`          // count of error corrected packets
}

// NewRadioStatus creates a new RadioStatus with default values.
func NewRadioStatus() *RadioStatus {
	self := RadioStatus{}
	self.SetDefaults()
	return &self
}

func (t *RadioStatus) Clone() *RadioStatus {
	c := &RadioStatus{}
	c.Timestamp = t.Timestamp
	c.Rssi = t.Rssi
	c.RemoteRssi = t.RemoteRssi
	c.Txbuf = t.Txbuf
	c.Noise = t.Noise
	c.RemoteNoise = t.RemoteNoise
	c.Rxerrors = t.Rxerrors
	c.Fix = t.Fix
	return c
}

func (t *RadioStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RadioStatus) SetDefaults() {
	t.Timestamp = 0
	t.Rssi = 0
	t.RemoteRssi = 0
	t.Txbuf = 0
	t.Noise = 0
	t.RemoteNoise = 0
	t.Rxerrors = 0
	t.Fix = 0
}

func (t *RadioStatus) GetTypeSupport() types.MessageTypeSupport {
	return RadioStatusTypeSupport
}

// RadioStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RadioStatusPublisher struct {
	*rclgo.Publisher
}

// NewRadioStatusPublisher creates and returns a new publisher for the
// RadioStatus
func NewRadioStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RadioStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RadioStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RadioStatusPublisher{pub}, nil
}

func (p *RadioStatusPublisher) Publish(msg *RadioStatus) error {
	return p.Publisher.Publish(msg)
}

// RadioStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RadioStatusSubscription struct {
	*rclgo.Subscription
}

// RadioStatusSubscriptionCallback type is used to provide a subscription
// handler function for a RadioStatusSubscription.
type RadioStatusSubscriptionCallback func(msg *RadioStatus, info *rclgo.MessageInfo, err error)

// NewRadioStatusSubscription creates and returns a new subscription for the
// RadioStatus
func NewRadioStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RadioStatusSubscriptionCallback) (*RadioStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RadioStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RadioStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RadioStatusSubscription{sub}, nil
}

func (s *RadioStatusSubscription) TakeMessage(out *RadioStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRadioStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRadioStatusSlice(dst, src []RadioStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RadioStatusTypeSupport types.MessageTypeSupport = _RadioStatusTypeSupport{}

type _RadioStatusTypeSupport struct{}

func (t _RadioStatusTypeSupport) New() types.Message {
	return NewRadioStatus()
}

func (t _RadioStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RadioStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__RadioStatus__create())
}

func (t _RadioStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RadioStatus__destroy((*C.px4_msgs__msg__RadioStatus)(pointer_to_free))
}

func (t _RadioStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RadioStatus)
	mem := (*C.px4_msgs__msg__RadioStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.rssi = C.uint8_t(m.Rssi)
	mem.remote_rssi = C.uint8_t(m.RemoteRssi)
	mem.txbuf = C.uint8_t(m.Txbuf)
	mem.noise = C.uint8_t(m.Noise)
	mem.remote_noise = C.uint8_t(m.RemoteNoise)
	mem.rxerrors = C.uint16_t(m.Rxerrors)
	mem.fix = C.uint16_t(m.Fix)
}

func (t _RadioStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RadioStatus)
	mem := (*C.px4_msgs__msg__RadioStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Rssi = uint8(mem.rssi)
	m.RemoteRssi = uint8(mem.remote_rssi)
	m.Txbuf = uint8(mem.txbuf)
	m.Noise = uint8(mem.noise)
	m.RemoteNoise = uint8(mem.remote_noise)
	m.Rxerrors = uint16(mem.rxerrors)
	m.Fix = uint16(mem.fix)
}

func (t _RadioStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RadioStatus())
}

type CRadioStatus = C.px4_msgs__msg__RadioStatus
type CRadioStatus__Sequence = C.px4_msgs__msg__RadioStatus__Sequence

func RadioStatus__Sequence_to_Go(goSlice *[]RadioStatus, cSlice CRadioStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RadioStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RadioStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RadioStatus__Sequence_to_C(cSlice *CRadioStatus__Sequence, goSlice []RadioStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RadioStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__RadioStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RadioStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RadioStatus__Array_to_Go(goSlice []RadioStatus, cSlice []CRadioStatus) {
	for i := 0; i < len(cSlice); i++ {
		RadioStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RadioStatus__Array_to_C(cSlice []CRadioStatus, goSlice []RadioStatus) {
	for i := 0; i < len(goSlice); i++ {
		RadioStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
