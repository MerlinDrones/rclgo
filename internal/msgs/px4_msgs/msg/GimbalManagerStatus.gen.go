// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gimbal_manager_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GimbalManagerStatus", GimbalManagerStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GimbalManagerStatus", GimbalManagerStatusTypeSupport)
}

type GimbalManagerStatus struct {
	Timestamp              uint64 `yaml:"timestamp"` // time since system start (microseconds)
	Flags                  uint32 `yaml:"flags"`
	GimbalDeviceId         uint8  `yaml:"gimbal_device_id"`
	PrimaryControlSysid    uint8  `yaml:"primary_control_sysid"`
	PrimaryControlCompid   uint8  `yaml:"primary_control_compid"`
	SecondaryControlSysid  uint8  `yaml:"secondary_control_sysid"`
	SecondaryControlCompid uint8  `yaml:"secondary_control_compid"`
}

// NewGimbalManagerStatus creates a new GimbalManagerStatus with default values.
func NewGimbalManagerStatus() *GimbalManagerStatus {
	self := GimbalManagerStatus{}
	self.SetDefaults()
	return &self
}

func (t *GimbalManagerStatus) Clone() *GimbalManagerStatus {
	c := &GimbalManagerStatus{}
	c.Timestamp = t.Timestamp
	c.Flags = t.Flags
	c.GimbalDeviceId = t.GimbalDeviceId
	c.PrimaryControlSysid = t.PrimaryControlSysid
	c.PrimaryControlCompid = t.PrimaryControlCompid
	c.SecondaryControlSysid = t.SecondaryControlSysid
	c.SecondaryControlCompid = t.SecondaryControlCompid
	return c
}

func (t *GimbalManagerStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalManagerStatus) SetDefaults() {
	t.Timestamp = 0
	t.Flags = 0
	t.GimbalDeviceId = 0
	t.PrimaryControlSysid = 0
	t.PrimaryControlCompid = 0
	t.SecondaryControlSysid = 0
	t.SecondaryControlCompid = 0
}

func (t *GimbalManagerStatus) GetTypeSupport() types.MessageTypeSupport {
	return GimbalManagerStatusTypeSupport
}

// GimbalManagerStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalManagerStatusPublisher struct {
	*rclgo.Publisher
}

// NewGimbalManagerStatusPublisher creates and returns a new publisher for the
// GimbalManagerStatus
func NewGimbalManagerStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalManagerStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalManagerStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerStatusPublisher{pub}, nil
}

func (p *GimbalManagerStatusPublisher) Publish(msg *GimbalManagerStatus) error {
	return p.Publisher.Publish(msg)
}

// GimbalManagerStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalManagerStatusSubscription struct {
	*rclgo.Subscription
}

// GimbalManagerStatusSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalManagerStatusSubscription.
type GimbalManagerStatusSubscriptionCallback func(msg *GimbalManagerStatus, info *rclgo.MessageInfo, err error)

// NewGimbalManagerStatusSubscription creates and returns a new subscription for the
// GimbalManagerStatus
func NewGimbalManagerStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalManagerStatusSubscriptionCallback) (*GimbalManagerStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalManagerStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalManagerStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalManagerStatusSubscription{sub}, nil
}

func (s *GimbalManagerStatusSubscription) TakeMessage(out *GimbalManagerStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalManagerStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalManagerStatusSlice(dst, src []GimbalManagerStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalManagerStatusTypeSupport types.MessageTypeSupport = _GimbalManagerStatusTypeSupport{}

type _GimbalManagerStatusTypeSupport struct{}

func (t _GimbalManagerStatusTypeSupport) New() types.Message {
	return NewGimbalManagerStatus()
}

func (t _GimbalManagerStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GimbalManagerStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__GimbalManagerStatus__create())
}

func (t _GimbalManagerStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GimbalManagerStatus__destroy((*C.px4_msgs__msg__GimbalManagerStatus)(pointer_to_free))
}

func (t _GimbalManagerStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalManagerStatus)
	mem := (*C.px4_msgs__msg__GimbalManagerStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.flags = C.uint32_t(m.Flags)
	mem.gimbal_device_id = C.uint8_t(m.GimbalDeviceId)
	mem.primary_control_sysid = C.uint8_t(m.PrimaryControlSysid)
	mem.primary_control_compid = C.uint8_t(m.PrimaryControlCompid)
	mem.secondary_control_sysid = C.uint8_t(m.SecondaryControlSysid)
	mem.secondary_control_compid = C.uint8_t(m.SecondaryControlCompid)
}

func (t _GimbalManagerStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalManagerStatus)
	mem := (*C.px4_msgs__msg__GimbalManagerStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Flags = uint32(mem.flags)
	m.GimbalDeviceId = uint8(mem.gimbal_device_id)
	m.PrimaryControlSysid = uint8(mem.primary_control_sysid)
	m.PrimaryControlCompid = uint8(mem.primary_control_compid)
	m.SecondaryControlSysid = uint8(mem.secondary_control_sysid)
	m.SecondaryControlCompid = uint8(mem.secondary_control_compid)
}

func (t _GimbalManagerStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GimbalManagerStatus())
}

type CGimbalManagerStatus = C.px4_msgs__msg__GimbalManagerStatus
type CGimbalManagerStatus__Sequence = C.px4_msgs__msg__GimbalManagerStatus__Sequence

func GimbalManagerStatus__Sequence_to_Go(goSlice *[]GimbalManagerStatus, cSlice CGimbalManagerStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalManagerStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalManagerStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalManagerStatus__Sequence_to_C(cSlice *CGimbalManagerStatus__Sequence, goSlice []GimbalManagerStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GimbalManagerStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__GimbalManagerStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalManagerStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalManagerStatus__Array_to_Go(goSlice []GimbalManagerStatus, cSlice []CGimbalManagerStatus) {
	for i := 0; i < len(cSlice); i++ {
		GimbalManagerStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalManagerStatus__Array_to_C(cSlice []CGimbalManagerStatus, goSlice []GimbalManagerStatus) {
	for i := 0; i < len(goSlice); i++ {
		GimbalManagerStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
