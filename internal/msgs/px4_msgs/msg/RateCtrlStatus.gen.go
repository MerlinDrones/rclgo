// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rate_ctrl_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RateCtrlStatus", RateCtrlStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RateCtrlStatus", RateCtrlStatusTypeSupport)
}

type RateCtrlStatus struct {
	Timestamp       uint64  `yaml:"timestamp"`       // time since system start (microseconds)
	RollspeedInteg  float32 `yaml:"rollspeed_integ"` // rate controller integrator status
	PitchspeedInteg float32 `yaml:"pitchspeed_integ"`
	YawspeedInteg   float32 `yaml:"yawspeed_integ"`
	WheelRateInteg  float32 `yaml:"wheel_rate_integ"` // FW only and optional
}

// NewRateCtrlStatus creates a new RateCtrlStatus with default values.
func NewRateCtrlStatus() *RateCtrlStatus {
	self := RateCtrlStatus{}
	self.SetDefaults()
	return &self
}

func (t *RateCtrlStatus) Clone() *RateCtrlStatus {
	c := &RateCtrlStatus{}
	c.Timestamp = t.Timestamp
	c.RollspeedInteg = t.RollspeedInteg
	c.PitchspeedInteg = t.PitchspeedInteg
	c.YawspeedInteg = t.YawspeedInteg
	c.WheelRateInteg = t.WheelRateInteg
	return c
}

func (t *RateCtrlStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RateCtrlStatus) SetDefaults() {
	t.Timestamp = 0
	t.RollspeedInteg = 0
	t.PitchspeedInteg = 0
	t.YawspeedInteg = 0
	t.WheelRateInteg = 0
}

func (t *RateCtrlStatus) GetTypeSupport() types.MessageTypeSupport {
	return RateCtrlStatusTypeSupport
}

// RateCtrlStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RateCtrlStatusPublisher struct {
	*rclgo.Publisher
}

// NewRateCtrlStatusPublisher creates and returns a new publisher for the
// RateCtrlStatus
func NewRateCtrlStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RateCtrlStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RateCtrlStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RateCtrlStatusPublisher{pub}, nil
}

func (p *RateCtrlStatusPublisher) Publish(msg *RateCtrlStatus) error {
	return p.Publisher.Publish(msg)
}

// RateCtrlStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RateCtrlStatusSubscription struct {
	*rclgo.Subscription
}

// RateCtrlStatusSubscriptionCallback type is used to provide a subscription
// handler function for a RateCtrlStatusSubscription.
type RateCtrlStatusSubscriptionCallback func(msg *RateCtrlStatus, info *rclgo.MessageInfo, err error)

// NewRateCtrlStatusSubscription creates and returns a new subscription for the
// RateCtrlStatus
func NewRateCtrlStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RateCtrlStatusSubscriptionCallback) (*RateCtrlStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RateCtrlStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RateCtrlStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RateCtrlStatusSubscription{sub}, nil
}

func (s *RateCtrlStatusSubscription) TakeMessage(out *RateCtrlStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRateCtrlStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRateCtrlStatusSlice(dst, src []RateCtrlStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RateCtrlStatusTypeSupport types.MessageTypeSupport = _RateCtrlStatusTypeSupport{}

type _RateCtrlStatusTypeSupport struct{}

func (t _RateCtrlStatusTypeSupport) New() types.Message {
	return NewRateCtrlStatus()
}

func (t _RateCtrlStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RateCtrlStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__RateCtrlStatus__create())
}

func (t _RateCtrlStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RateCtrlStatus__destroy((*C.px4_msgs__msg__RateCtrlStatus)(pointer_to_free))
}

func (t _RateCtrlStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RateCtrlStatus)
	mem := (*C.px4_msgs__msg__RateCtrlStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.rollspeed_integ = C.float(m.RollspeedInteg)
	mem.pitchspeed_integ = C.float(m.PitchspeedInteg)
	mem.yawspeed_integ = C.float(m.YawspeedInteg)
	mem.wheel_rate_integ = C.float(m.WheelRateInteg)
}

func (t _RateCtrlStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RateCtrlStatus)
	mem := (*C.px4_msgs__msg__RateCtrlStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.RollspeedInteg = float32(mem.rollspeed_integ)
	m.PitchspeedInteg = float32(mem.pitchspeed_integ)
	m.YawspeedInteg = float32(mem.yawspeed_integ)
	m.WheelRateInteg = float32(mem.wheel_rate_integ)
}

func (t _RateCtrlStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RateCtrlStatus())
}

type CRateCtrlStatus = C.px4_msgs__msg__RateCtrlStatus
type CRateCtrlStatus__Sequence = C.px4_msgs__msg__RateCtrlStatus__Sequence

func RateCtrlStatus__Sequence_to_Go(goSlice *[]RateCtrlStatus, cSlice CRateCtrlStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RateCtrlStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RateCtrlStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RateCtrlStatus__Sequence_to_C(cSlice *CRateCtrlStatus__Sequence, goSlice []RateCtrlStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RateCtrlStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__RateCtrlStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RateCtrlStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RateCtrlStatus__Array_to_Go(goSlice []RateCtrlStatus, cSlice []CRateCtrlStatus) {
	for i := 0; i < len(cSlice); i++ {
		RateCtrlStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RateCtrlStatus__Array_to_C(cSlice []CRateCtrlStatus, goSlice []RateCtrlStatus) {
	for i := 0; i < len(goSlice); i++ {
		RateCtrlStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
