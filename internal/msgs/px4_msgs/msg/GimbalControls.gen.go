// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gimbal_controls.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GimbalControls", GimbalControlsTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GimbalControls", GimbalControlsTypeSupport)
}

const (
	GimbalControls_INDEX_ROLL  uint8 = 0
	GimbalControls_INDEX_PITCH uint8 = 1
	GimbalControls_INDEX_YAW   uint8 = 2
)

type GimbalControls struct {
	Timestamp       uint64     `yaml:"timestamp"`        // time since system start (microseconds)
	TimestampSample uint64     `yaml:"timestamp_sample"` // the timestamp the data this control response is based on was sampled
	Control         [3]float32 `yaml:"control"`
}

// NewGimbalControls creates a new GimbalControls with default values.
func NewGimbalControls() *GimbalControls {
	self := GimbalControls{}
	self.SetDefaults()
	return &self
}

func (t *GimbalControls) Clone() *GimbalControls {
	c := &GimbalControls{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.Control = t.Control
	return c
}

func (t *GimbalControls) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GimbalControls) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.Control = [3]float32{}
}

func (t *GimbalControls) GetTypeSupport() types.MessageTypeSupport {
	return GimbalControlsTypeSupport
}

// GimbalControlsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GimbalControlsPublisher struct {
	*rclgo.Publisher
}

// NewGimbalControlsPublisher creates and returns a new publisher for the
// GimbalControls
func NewGimbalControlsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GimbalControlsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GimbalControlsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GimbalControlsPublisher{pub}, nil
}

func (p *GimbalControlsPublisher) Publish(msg *GimbalControls) error {
	return p.Publisher.Publish(msg)
}

// GimbalControlsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GimbalControlsSubscription struct {
	*rclgo.Subscription
}

// GimbalControlsSubscriptionCallback type is used to provide a subscription
// handler function for a GimbalControlsSubscription.
type GimbalControlsSubscriptionCallback func(msg *GimbalControls, info *rclgo.MessageInfo, err error)

// NewGimbalControlsSubscription creates and returns a new subscription for the
// GimbalControls
func NewGimbalControlsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GimbalControlsSubscriptionCallback) (*GimbalControlsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GimbalControls
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GimbalControlsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GimbalControlsSubscription{sub}, nil
}

func (s *GimbalControlsSubscription) TakeMessage(out *GimbalControls) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGimbalControlsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGimbalControlsSlice(dst, src []GimbalControls) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GimbalControlsTypeSupport types.MessageTypeSupport = _GimbalControlsTypeSupport{}

type _GimbalControlsTypeSupport struct{}

func (t _GimbalControlsTypeSupport) New() types.Message {
	return NewGimbalControls()
}

func (t _GimbalControlsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GimbalControls
	return (unsafe.Pointer)(C.px4_msgs__msg__GimbalControls__create())
}

func (t _GimbalControlsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GimbalControls__destroy((*C.px4_msgs__msg__GimbalControls)(pointer_to_free))
}

func (t _GimbalControlsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GimbalControls)
	mem := (*C.px4_msgs__msg__GimbalControls)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	cSlice_control := mem.control[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_control)), m.Control[:])
}

func (t _GimbalControlsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GimbalControls)
	mem := (*C.px4_msgs__msg__GimbalControls)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	cSlice_control := mem.control[:]
	primitives.Float32__Array_to_Go(m.Control[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_control)))
}

func (t _GimbalControlsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GimbalControls())
}

type CGimbalControls = C.px4_msgs__msg__GimbalControls
type CGimbalControls__Sequence = C.px4_msgs__msg__GimbalControls__Sequence

func GimbalControls__Sequence_to_Go(goSlice *[]GimbalControls, cSlice CGimbalControls__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GimbalControls, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GimbalControlsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GimbalControls__Sequence_to_C(cSlice *CGimbalControls__Sequence, goSlice []GimbalControls) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GimbalControls)(C.malloc(C.sizeof_struct_px4_msgs__msg__GimbalControls * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GimbalControlsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GimbalControls__Array_to_Go(goSlice []GimbalControls, cSlice []CGimbalControls) {
	for i := 0; i < len(cSlice); i++ {
		GimbalControlsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GimbalControls__Array_to_C(cSlice []CGimbalControls, goSlice []GimbalControls) {
	for i := 0; i < len(goSlice); i++ {
		GimbalControlsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
