// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/camera_trigger.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/CameraTrigger", CameraTriggerTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/CameraTrigger", CameraTriggerTypeSupport)
}

const (
	CameraTrigger_ORB_QUEUE_LENGTH uint32 = 2
)

type CameraTrigger struct {
	Timestamp    uint64 `yaml:"timestamp"`     // time since system start (microseconds)
	TimestampUtc uint64 `yaml:"timestamp_utc"` // UTC timestamp
	Seq          uint32 `yaml:"seq"`           // Image sequence number
	Feedback     bool   `yaml:"feedback"`      // Trigger feedback from camera
}

// NewCameraTrigger creates a new CameraTrigger with default values.
func NewCameraTrigger() *CameraTrigger {
	self := CameraTrigger{}
	self.SetDefaults()
	return &self
}

func (t *CameraTrigger) Clone() *CameraTrigger {
	c := &CameraTrigger{}
	c.Timestamp = t.Timestamp
	c.TimestampUtc = t.TimestampUtc
	c.Seq = t.Seq
	c.Feedback = t.Feedback
	return c
}

func (t *CameraTrigger) CloneMsg() types.Message {
	return t.Clone()
}

func (t *CameraTrigger) SetDefaults() {
	t.Timestamp = 0
	t.TimestampUtc = 0
	t.Seq = 0
	t.Feedback = false
}

func (t *CameraTrigger) GetTypeSupport() types.MessageTypeSupport {
	return CameraTriggerTypeSupport
}

// CameraTriggerPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type CameraTriggerPublisher struct {
	*rclgo.Publisher
}

// NewCameraTriggerPublisher creates and returns a new publisher for the
// CameraTrigger
func NewCameraTriggerPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*CameraTriggerPublisher, error) {
	pub, err := node.NewPublisher(topic_name, CameraTriggerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &CameraTriggerPublisher{pub}, nil
}

func (p *CameraTriggerPublisher) Publish(msg *CameraTrigger) error {
	return p.Publisher.Publish(msg)
}

// CameraTriggerSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type CameraTriggerSubscription struct {
	*rclgo.Subscription
}

// CameraTriggerSubscriptionCallback type is used to provide a subscription
// handler function for a CameraTriggerSubscription.
type CameraTriggerSubscriptionCallback func(msg *CameraTrigger, info *rclgo.MessageInfo, err error)

// NewCameraTriggerSubscription creates and returns a new subscription for the
// CameraTrigger
func NewCameraTriggerSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback CameraTriggerSubscriptionCallback) (*CameraTriggerSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg CameraTrigger
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, CameraTriggerTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &CameraTriggerSubscription{sub}, nil
}

func (s *CameraTriggerSubscription) TakeMessage(out *CameraTrigger) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneCameraTriggerSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneCameraTriggerSlice(dst, src []CameraTrigger) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var CameraTriggerTypeSupport types.MessageTypeSupport = _CameraTriggerTypeSupport{}

type _CameraTriggerTypeSupport struct{}

func (t _CameraTriggerTypeSupport) New() types.Message {
	return NewCameraTrigger()
}

func (t _CameraTriggerTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__CameraTrigger
	return (unsafe.Pointer)(C.px4_msgs__msg__CameraTrigger__create())
}

func (t _CameraTriggerTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__CameraTrigger__destroy((*C.px4_msgs__msg__CameraTrigger)(pointer_to_free))
}

func (t _CameraTriggerTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*CameraTrigger)
	mem := (*C.px4_msgs__msg__CameraTrigger)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_utc = C.uint64_t(m.TimestampUtc)
	mem.seq = C.uint32_t(m.Seq)
	mem.feedback = C.bool(m.Feedback)
}

func (t _CameraTriggerTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*CameraTrigger)
	mem := (*C.px4_msgs__msg__CameraTrigger)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampUtc = uint64(mem.timestamp_utc)
	m.Seq = uint32(mem.seq)
	m.Feedback = bool(mem.feedback)
}

func (t _CameraTriggerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__CameraTrigger())
}

type CCameraTrigger = C.px4_msgs__msg__CameraTrigger
type CCameraTrigger__Sequence = C.px4_msgs__msg__CameraTrigger__Sequence

func CameraTrigger__Sequence_to_Go(goSlice *[]CameraTrigger, cSlice CCameraTrigger__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]CameraTrigger, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		CameraTriggerTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func CameraTrigger__Sequence_to_C(cSlice *CCameraTrigger__Sequence, goSlice []CameraTrigger) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__CameraTrigger)(C.malloc(C.sizeof_struct_px4_msgs__msg__CameraTrigger * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		CameraTriggerTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func CameraTrigger__Array_to_Go(goSlice []CameraTrigger, cSlice []CCameraTrigger) {
	for i := 0; i < len(cSlice); i++ {
		CameraTriggerTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func CameraTrigger__Array_to_C(cSlice []CCameraTrigger, goSlice []CameraTrigger) {
	for i := 0; i < len(goSlice); i++ {
		CameraTriggerTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
