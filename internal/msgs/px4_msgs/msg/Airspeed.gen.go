// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/airspeed.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Airspeed", AirspeedTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/Airspeed", AirspeedTypeSupport)
}

type Airspeed struct {
	Timestamp             uint64  `yaml:"timestamp"` // time since system start (microseconds)
	TimestampSample       uint64  `yaml:"timestamp_sample"`
	IndicatedAirspeedMS   float32 `yaml:"indicated_airspeed_m_s"`  // indicated airspeed in m/s
	TrueAirspeedMS        float32 `yaml:"true_airspeed_m_s"`       // true filtered airspeed in m/s
	AirTemperatureCelsius float32 `yaml:"air_temperature_celsius"` // air temperature in degrees Celsius, -1000 if unknown
	Confidence            float32 `yaml:"confidence"`              // confidence value from 0 to 1 for this sensor
}

// NewAirspeed creates a new Airspeed with default values.
func NewAirspeed() *Airspeed {
	self := Airspeed{}
	self.SetDefaults()
	return &self
}

func (t *Airspeed) Clone() *Airspeed {
	c := &Airspeed{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.IndicatedAirspeedMS = t.IndicatedAirspeedMS
	c.TrueAirspeedMS = t.TrueAirspeedMS
	c.AirTemperatureCelsius = t.AirTemperatureCelsius
	c.Confidence = t.Confidence
	return c
}

func (t *Airspeed) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Airspeed) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.IndicatedAirspeedMS = 0
	t.TrueAirspeedMS = 0
	t.AirTemperatureCelsius = 0
	t.Confidence = 0
}

func (t *Airspeed) GetTypeSupport() types.MessageTypeSupport {
	return AirspeedTypeSupport
}

// AirspeedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type AirspeedPublisher struct {
	*rclgo.Publisher
}

// NewAirspeedPublisher creates and returns a new publisher for the
// Airspeed
func NewAirspeedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*AirspeedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, AirspeedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &AirspeedPublisher{pub}, nil
}

func (p *AirspeedPublisher) Publish(msg *Airspeed) error {
	return p.Publisher.Publish(msg)
}

// AirspeedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type AirspeedSubscription struct {
	*rclgo.Subscription
}

// AirspeedSubscriptionCallback type is used to provide a subscription
// handler function for a AirspeedSubscription.
type AirspeedSubscriptionCallback func(msg *Airspeed, info *rclgo.MessageInfo, err error)

// NewAirspeedSubscription creates and returns a new subscription for the
// Airspeed
func NewAirspeedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback AirspeedSubscriptionCallback) (*AirspeedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Airspeed
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, AirspeedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &AirspeedSubscription{sub}, nil
}

func (s *AirspeedSubscription) TakeMessage(out *Airspeed) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneAirspeedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneAirspeedSlice(dst, src []Airspeed) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var AirspeedTypeSupport types.MessageTypeSupport = _AirspeedTypeSupport{}

type _AirspeedTypeSupport struct{}

func (t _AirspeedTypeSupport) New() types.Message {
	return NewAirspeed()
}

func (t _AirspeedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Airspeed
	return (unsafe.Pointer)(C.px4_msgs__msg__Airspeed__create())
}

func (t _AirspeedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Airspeed__destroy((*C.px4_msgs__msg__Airspeed)(pointer_to_free))
}

func (t _AirspeedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Airspeed)
	mem := (*C.px4_msgs__msg__Airspeed)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.indicated_airspeed_m_s = C.float(m.IndicatedAirspeedMS)
	mem.true_airspeed_m_s = C.float(m.TrueAirspeedMS)
	mem.air_temperature_celsius = C.float(m.AirTemperatureCelsius)
	mem.confidence = C.float(m.Confidence)
}

func (t _AirspeedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Airspeed)
	mem := (*C.px4_msgs__msg__Airspeed)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.IndicatedAirspeedMS = float32(mem.indicated_airspeed_m_s)
	m.TrueAirspeedMS = float32(mem.true_airspeed_m_s)
	m.AirTemperatureCelsius = float32(mem.air_temperature_celsius)
	m.Confidence = float32(mem.confidence)
}

func (t _AirspeedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Airspeed())
}

type CAirspeed = C.px4_msgs__msg__Airspeed
type CAirspeed__Sequence = C.px4_msgs__msg__Airspeed__Sequence

func Airspeed__Sequence_to_Go(goSlice *[]Airspeed, cSlice CAirspeed__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Airspeed, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		AirspeedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Airspeed__Sequence_to_C(cSlice *CAirspeed__Sequence, goSlice []Airspeed) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Airspeed)(C.malloc(C.sizeof_struct_px4_msgs__msg__Airspeed * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		AirspeedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Airspeed__Array_to_Go(goSlice []Airspeed, cSlice []CAirspeed) {
	for i := 0; i < len(cSlice); i++ {
		AirspeedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Airspeed__Array_to_C(cSlice []CAirspeed, goSlice []Airspeed) {
	for i := 0; i < len(goSlice); i++ {
		AirspeedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
