// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/pps_capture.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/PpsCapture", PpsCaptureTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/PpsCapture", PpsCaptureTypeSupport)
}

type PpsCapture struct {
	Timestamp              uint64 `yaml:"timestamp"`                 // time since system start (microseconds) at PPS capture event
	RtcTimestamp           uint64 `yaml:"rtc_timestamp"`             // Corrected GPS UTC timestamp at PPS capture event
	PpsRateExceededCounter uint8  `yaml:"pps_rate_exceeded_counter"` // Increments when PPS dt < 50ms
}

// NewPpsCapture creates a new PpsCapture with default values.
func NewPpsCapture() *PpsCapture {
	self := PpsCapture{}
	self.SetDefaults()
	return &self
}

func (t *PpsCapture) Clone() *PpsCapture {
	c := &PpsCapture{}
	c.Timestamp = t.Timestamp
	c.RtcTimestamp = t.RtcTimestamp
	c.PpsRateExceededCounter = t.PpsRateExceededCounter
	return c
}

func (t *PpsCapture) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PpsCapture) SetDefaults() {
	t.Timestamp = 0
	t.RtcTimestamp = 0
	t.PpsRateExceededCounter = 0
}

func (t *PpsCapture) GetTypeSupport() types.MessageTypeSupport {
	return PpsCaptureTypeSupport
}

// PpsCapturePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PpsCapturePublisher struct {
	*rclgo.Publisher
}

// NewPpsCapturePublisher creates and returns a new publisher for the
// PpsCapture
func NewPpsCapturePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PpsCapturePublisher, error) {
	pub, err := node.NewPublisher(topic_name, PpsCaptureTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PpsCapturePublisher{pub}, nil
}

func (p *PpsCapturePublisher) Publish(msg *PpsCapture) error {
	return p.Publisher.Publish(msg)
}

// PpsCaptureSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PpsCaptureSubscription struct {
	*rclgo.Subscription
}

// PpsCaptureSubscriptionCallback type is used to provide a subscription
// handler function for a PpsCaptureSubscription.
type PpsCaptureSubscriptionCallback func(msg *PpsCapture, info *rclgo.MessageInfo, err error)

// NewPpsCaptureSubscription creates and returns a new subscription for the
// PpsCapture
func NewPpsCaptureSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PpsCaptureSubscriptionCallback) (*PpsCaptureSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PpsCapture
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PpsCaptureTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PpsCaptureSubscription{sub}, nil
}

func (s *PpsCaptureSubscription) TakeMessage(out *PpsCapture) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePpsCaptureSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePpsCaptureSlice(dst, src []PpsCapture) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PpsCaptureTypeSupport types.MessageTypeSupport = _PpsCaptureTypeSupport{}

type _PpsCaptureTypeSupport struct{}

func (t _PpsCaptureTypeSupport) New() types.Message {
	return NewPpsCapture()
}

func (t _PpsCaptureTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__PpsCapture
	return (unsafe.Pointer)(C.px4_msgs__msg__PpsCapture__create())
}

func (t _PpsCaptureTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__PpsCapture__destroy((*C.px4_msgs__msg__PpsCapture)(pointer_to_free))
}

func (t _PpsCaptureTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PpsCapture)
	mem := (*C.px4_msgs__msg__PpsCapture)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.rtc_timestamp = C.uint64_t(m.RtcTimestamp)
	mem.pps_rate_exceeded_counter = C.uint8_t(m.PpsRateExceededCounter)
}

func (t _PpsCaptureTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PpsCapture)
	mem := (*C.px4_msgs__msg__PpsCapture)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.RtcTimestamp = uint64(mem.rtc_timestamp)
	m.PpsRateExceededCounter = uint8(mem.pps_rate_exceeded_counter)
}

func (t _PpsCaptureTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__PpsCapture())
}

type CPpsCapture = C.px4_msgs__msg__PpsCapture
type CPpsCapture__Sequence = C.px4_msgs__msg__PpsCapture__Sequence

func PpsCapture__Sequence_to_Go(goSlice *[]PpsCapture, cSlice CPpsCapture__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PpsCapture, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PpsCaptureTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PpsCapture__Sequence_to_C(cSlice *CPpsCapture__Sequence, goSlice []PpsCapture) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__PpsCapture)(C.malloc(C.sizeof_struct_px4_msgs__msg__PpsCapture * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PpsCaptureTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PpsCapture__Array_to_Go(goSlice []PpsCapture, cSlice []CPpsCapture) {
	for i := 0; i < len(cSlice); i++ {
		PpsCaptureTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PpsCapture__Array_to_C(cSlice []CPpsCapture, goSlice []PpsCapture) {
	for i := 0; i < len(goSlice); i++ {
		PpsCaptureTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
