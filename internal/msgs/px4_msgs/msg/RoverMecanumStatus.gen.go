// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rover_mecanum_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RoverMecanumStatus", RoverMecanumStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RoverMecanumStatus", RoverMecanumStatusTypeSupport)
}

type RoverMecanumStatus struct {
	Timestamp                  uint64  `yaml:"timestamp"`                     // time since system start (microseconds)
	MeasuredForwardSpeed       float32 `yaml:"measured_forward_speed"`        // [m/s] Measured speed in body x direction. Positiv: forwards, Negativ: backwards
	MeasuredLateralSpeed       float32 `yaml:"measured_lateral_speed"`        // [m/s] Measured speed in body y direction. Positiv: right, Negativ: left
	AdjustedYawRateSetpoint    float32 `yaml:"adjusted_yaw_rate_setpoint"`    // [rad/s] Yaw rate setpoint output of the closed loop yaw controller
	MeasuredYawRate            float32 `yaml:"measured_yaw_rate"`             // [rad/s] Measured yaw rate
	MeasuredYaw                float32 `yaml:"measured_yaw"`                  // [rad] Measured yaw
	PidYawRateIntegral         float32 `yaml:"pid_yaw_rate_integral"`         // Integral of the PID for the closed loop yaw rate controller
	PidYawIntegral             float32 `yaml:"pid_yaw_integral"`              // Integral of the PID for the closed loop yaw controller
	PidForwardThrottleIntegral float32 `yaml:"pid_forward_throttle_integral"` // Integral of the PID for the closed loop forward speed controller
	PidLateralThrottleIntegral float32 `yaml:"pid_lateral_throttle_integral"` // Integral of the PID for the closed loop lateral speed controller
}

// NewRoverMecanumStatus creates a new RoverMecanumStatus with default values.
func NewRoverMecanumStatus() *RoverMecanumStatus {
	self := RoverMecanumStatus{}
	self.SetDefaults()
	return &self
}

func (t *RoverMecanumStatus) Clone() *RoverMecanumStatus {
	c := &RoverMecanumStatus{}
	c.Timestamp = t.Timestamp
	c.MeasuredForwardSpeed = t.MeasuredForwardSpeed
	c.MeasuredLateralSpeed = t.MeasuredLateralSpeed
	c.AdjustedYawRateSetpoint = t.AdjustedYawRateSetpoint
	c.MeasuredYawRate = t.MeasuredYawRate
	c.MeasuredYaw = t.MeasuredYaw
	c.PidYawRateIntegral = t.PidYawRateIntegral
	c.PidYawIntegral = t.PidYawIntegral
	c.PidForwardThrottleIntegral = t.PidForwardThrottleIntegral
	c.PidLateralThrottleIntegral = t.PidLateralThrottleIntegral
	return c
}

func (t *RoverMecanumStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RoverMecanumStatus) SetDefaults() {
	t.Timestamp = 0
	t.MeasuredForwardSpeed = 0
	t.MeasuredLateralSpeed = 0
	t.AdjustedYawRateSetpoint = 0
	t.MeasuredYawRate = 0
	t.MeasuredYaw = 0
	t.PidYawRateIntegral = 0
	t.PidYawIntegral = 0
	t.PidForwardThrottleIntegral = 0
	t.PidLateralThrottleIntegral = 0
}

func (t *RoverMecanumStatus) GetTypeSupport() types.MessageTypeSupport {
	return RoverMecanumStatusTypeSupport
}

// RoverMecanumStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RoverMecanumStatusPublisher struct {
	*rclgo.Publisher
}

// NewRoverMecanumStatusPublisher creates and returns a new publisher for the
// RoverMecanumStatus
func NewRoverMecanumStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RoverMecanumStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RoverMecanumStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RoverMecanumStatusPublisher{pub}, nil
}

func (p *RoverMecanumStatusPublisher) Publish(msg *RoverMecanumStatus) error {
	return p.Publisher.Publish(msg)
}

// RoverMecanumStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RoverMecanumStatusSubscription struct {
	*rclgo.Subscription
}

// RoverMecanumStatusSubscriptionCallback type is used to provide a subscription
// handler function for a RoverMecanumStatusSubscription.
type RoverMecanumStatusSubscriptionCallback func(msg *RoverMecanumStatus, info *rclgo.MessageInfo, err error)

// NewRoverMecanumStatusSubscription creates and returns a new subscription for the
// RoverMecanumStatus
func NewRoverMecanumStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RoverMecanumStatusSubscriptionCallback) (*RoverMecanumStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RoverMecanumStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RoverMecanumStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RoverMecanumStatusSubscription{sub}, nil
}

func (s *RoverMecanumStatusSubscription) TakeMessage(out *RoverMecanumStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRoverMecanumStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRoverMecanumStatusSlice(dst, src []RoverMecanumStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RoverMecanumStatusTypeSupport types.MessageTypeSupport = _RoverMecanumStatusTypeSupport{}

type _RoverMecanumStatusTypeSupport struct{}

func (t _RoverMecanumStatusTypeSupport) New() types.Message {
	return NewRoverMecanumStatus()
}

func (t _RoverMecanumStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RoverMecanumStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__RoverMecanumStatus__create())
}

func (t _RoverMecanumStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RoverMecanumStatus__destroy((*C.px4_msgs__msg__RoverMecanumStatus)(pointer_to_free))
}

func (t _RoverMecanumStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RoverMecanumStatus)
	mem := (*C.px4_msgs__msg__RoverMecanumStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.measured_forward_speed = C.float(m.MeasuredForwardSpeed)
	mem.measured_lateral_speed = C.float(m.MeasuredLateralSpeed)
	mem.adjusted_yaw_rate_setpoint = C.float(m.AdjustedYawRateSetpoint)
	mem.measured_yaw_rate = C.float(m.MeasuredYawRate)
	mem.measured_yaw = C.float(m.MeasuredYaw)
	mem.pid_yaw_rate_integral = C.float(m.PidYawRateIntegral)
	mem.pid_yaw_integral = C.float(m.PidYawIntegral)
	mem.pid_forward_throttle_integral = C.float(m.PidForwardThrottleIntegral)
	mem.pid_lateral_throttle_integral = C.float(m.PidLateralThrottleIntegral)
}

func (t _RoverMecanumStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RoverMecanumStatus)
	mem := (*C.px4_msgs__msg__RoverMecanumStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.MeasuredForwardSpeed = float32(mem.measured_forward_speed)
	m.MeasuredLateralSpeed = float32(mem.measured_lateral_speed)
	m.AdjustedYawRateSetpoint = float32(mem.adjusted_yaw_rate_setpoint)
	m.MeasuredYawRate = float32(mem.measured_yaw_rate)
	m.MeasuredYaw = float32(mem.measured_yaw)
	m.PidYawRateIntegral = float32(mem.pid_yaw_rate_integral)
	m.PidYawIntegral = float32(mem.pid_yaw_integral)
	m.PidForwardThrottleIntegral = float32(mem.pid_forward_throttle_integral)
	m.PidLateralThrottleIntegral = float32(mem.pid_lateral_throttle_integral)
}

func (t _RoverMecanumStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RoverMecanumStatus())
}

type CRoverMecanumStatus = C.px4_msgs__msg__RoverMecanumStatus
type CRoverMecanumStatus__Sequence = C.px4_msgs__msg__RoverMecanumStatus__Sequence

func RoverMecanumStatus__Sequence_to_Go(goSlice *[]RoverMecanumStatus, cSlice CRoverMecanumStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RoverMecanumStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RoverMecanumStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RoverMecanumStatus__Sequence_to_C(cSlice *CRoverMecanumStatus__Sequence, goSlice []RoverMecanumStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RoverMecanumStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__RoverMecanumStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RoverMecanumStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RoverMecanumStatus__Array_to_Go(goSlice []RoverMecanumStatus, cSlice []CRoverMecanumStatus) {
	for i := 0; i < len(cSlice); i++ {
		RoverMecanumStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RoverMecanumStatus__Array_to_C(cSlice []CRoverMecanumStatus, goSlice []RoverMecanumStatus) {
	for i := 0; i < len(goSlice); i++ {
		RoverMecanumStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
