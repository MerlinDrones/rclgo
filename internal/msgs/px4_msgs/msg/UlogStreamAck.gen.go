// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/ulog_stream_ack.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/UlogStreamAck", UlogStreamAckTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/UlogStreamAck", UlogStreamAckTypeSupport)
}

const (
	UlogStreamAck_ACK_TIMEOUT   int32 = 50 // timeout waiting for an ack until we retry to send the message [ms]
	UlogStreamAck_ACK_MAX_TRIES int32 = 50 // maximum amount of tries to (re-)send a message, each time waiting ACK_TIMEOUT ms
)

type UlogStreamAck struct {
	Timestamp   uint64 `yaml:"timestamp"` // time since system start (microseconds)
	MsgSequence uint16 `yaml:"msg_sequence"`
}

// NewUlogStreamAck creates a new UlogStreamAck with default values.
func NewUlogStreamAck() *UlogStreamAck {
	self := UlogStreamAck{}
	self.SetDefaults()
	return &self
}

func (t *UlogStreamAck) Clone() *UlogStreamAck {
	c := &UlogStreamAck{}
	c.Timestamp = t.Timestamp
	c.MsgSequence = t.MsgSequence
	return c
}

func (t *UlogStreamAck) CloneMsg() types.Message {
	return t.Clone()
}

func (t *UlogStreamAck) SetDefaults() {
	t.Timestamp = 0
	t.MsgSequence = 0
}

func (t *UlogStreamAck) GetTypeSupport() types.MessageTypeSupport {
	return UlogStreamAckTypeSupport
}

// UlogStreamAckPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type UlogStreamAckPublisher struct {
	*rclgo.Publisher
}

// NewUlogStreamAckPublisher creates and returns a new publisher for the
// UlogStreamAck
func NewUlogStreamAckPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*UlogStreamAckPublisher, error) {
	pub, err := node.NewPublisher(topic_name, UlogStreamAckTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UlogStreamAckPublisher{pub}, nil
}

func (p *UlogStreamAckPublisher) Publish(msg *UlogStreamAck) error {
	return p.Publisher.Publish(msg)
}

// UlogStreamAckSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type UlogStreamAckSubscription struct {
	*rclgo.Subscription
}

// UlogStreamAckSubscriptionCallback type is used to provide a subscription
// handler function for a UlogStreamAckSubscription.
type UlogStreamAckSubscriptionCallback func(msg *UlogStreamAck, info *rclgo.MessageInfo, err error)

// NewUlogStreamAckSubscription creates and returns a new subscription for the
// UlogStreamAck
func NewUlogStreamAckSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback UlogStreamAckSubscriptionCallback) (*UlogStreamAckSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg UlogStreamAck
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, UlogStreamAckTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &UlogStreamAckSubscription{sub}, nil
}

func (s *UlogStreamAckSubscription) TakeMessage(out *UlogStreamAck) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneUlogStreamAckSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUlogStreamAckSlice(dst, src []UlogStreamAck) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UlogStreamAckTypeSupport types.MessageTypeSupport = _UlogStreamAckTypeSupport{}

type _UlogStreamAckTypeSupport struct{}

func (t _UlogStreamAckTypeSupport) New() types.Message {
	return NewUlogStreamAck()
}

func (t _UlogStreamAckTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__UlogStreamAck
	return (unsafe.Pointer)(C.px4_msgs__msg__UlogStreamAck__create())
}

func (t _UlogStreamAckTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__UlogStreamAck__destroy((*C.px4_msgs__msg__UlogStreamAck)(pointer_to_free))
}

func (t _UlogStreamAckTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*UlogStreamAck)
	mem := (*C.px4_msgs__msg__UlogStreamAck)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.msg_sequence = C.uint16_t(m.MsgSequence)
}

func (t _UlogStreamAckTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UlogStreamAck)
	mem := (*C.px4_msgs__msg__UlogStreamAck)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.MsgSequence = uint16(mem.msg_sequence)
}

func (t _UlogStreamAckTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__UlogStreamAck())
}

type CUlogStreamAck = C.px4_msgs__msg__UlogStreamAck
type CUlogStreamAck__Sequence = C.px4_msgs__msg__UlogStreamAck__Sequence

func UlogStreamAck__Sequence_to_Go(goSlice *[]UlogStreamAck, cSlice CUlogStreamAck__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UlogStreamAck, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		UlogStreamAckTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func UlogStreamAck__Sequence_to_C(cSlice *CUlogStreamAck__Sequence, goSlice []UlogStreamAck) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__UlogStreamAck)(C.malloc(C.sizeof_struct_px4_msgs__msg__UlogStreamAck * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		UlogStreamAckTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func UlogStreamAck__Array_to_Go(goSlice []UlogStreamAck, cSlice []CUlogStreamAck) {
	for i := 0; i < len(cSlice); i++ {
		UlogStreamAckTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func UlogStreamAck__Array_to_C(cSlice []CUlogStreamAck, goSlice []UlogStreamAck) {
	for i := 0; i < len(goSlice); i++ {
		UlogStreamAckTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
