// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/qshell_retval.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/QshellRetval", QshellRetvalTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/QshellRetval", QshellRetvalTypeSupport)
}

type QshellRetval struct {
	Timestamp      uint64 `yaml:"timestamp"` // time since system start (microseconds)
	ReturnValue    int32  `yaml:"return_value"`
	ReturnSequence uint32 `yaml:"return_sequence"`
}

// NewQshellRetval creates a new QshellRetval with default values.
func NewQshellRetval() *QshellRetval {
	self := QshellRetval{}
	self.SetDefaults()
	return &self
}

func (t *QshellRetval) Clone() *QshellRetval {
	c := &QshellRetval{}
	c.Timestamp = t.Timestamp
	c.ReturnValue = t.ReturnValue
	c.ReturnSequence = t.ReturnSequence
	return c
}

func (t *QshellRetval) CloneMsg() types.Message {
	return t.Clone()
}

func (t *QshellRetval) SetDefaults() {
	t.Timestamp = 0
	t.ReturnValue = 0
	t.ReturnSequence = 0
}

func (t *QshellRetval) GetTypeSupport() types.MessageTypeSupport {
	return QshellRetvalTypeSupport
}

// QshellRetvalPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type QshellRetvalPublisher struct {
	*rclgo.Publisher
}

// NewQshellRetvalPublisher creates and returns a new publisher for the
// QshellRetval
func NewQshellRetvalPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*QshellRetvalPublisher, error) {
	pub, err := node.NewPublisher(topic_name, QshellRetvalTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &QshellRetvalPublisher{pub}, nil
}

func (p *QshellRetvalPublisher) Publish(msg *QshellRetval) error {
	return p.Publisher.Publish(msg)
}

// QshellRetvalSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type QshellRetvalSubscription struct {
	*rclgo.Subscription
}

// QshellRetvalSubscriptionCallback type is used to provide a subscription
// handler function for a QshellRetvalSubscription.
type QshellRetvalSubscriptionCallback func(msg *QshellRetval, info *rclgo.MessageInfo, err error)

// NewQshellRetvalSubscription creates and returns a new subscription for the
// QshellRetval
func NewQshellRetvalSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback QshellRetvalSubscriptionCallback) (*QshellRetvalSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg QshellRetval
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, QshellRetvalTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &QshellRetvalSubscription{sub}, nil
}

func (s *QshellRetvalSubscription) TakeMessage(out *QshellRetval) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneQshellRetvalSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneQshellRetvalSlice(dst, src []QshellRetval) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var QshellRetvalTypeSupport types.MessageTypeSupport = _QshellRetvalTypeSupport{}

type _QshellRetvalTypeSupport struct{}

func (t _QshellRetvalTypeSupport) New() types.Message {
	return NewQshellRetval()
}

func (t _QshellRetvalTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__QshellRetval
	return (unsafe.Pointer)(C.px4_msgs__msg__QshellRetval__create())
}

func (t _QshellRetvalTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__QshellRetval__destroy((*C.px4_msgs__msg__QshellRetval)(pointer_to_free))
}

func (t _QshellRetvalTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*QshellRetval)
	mem := (*C.px4_msgs__msg__QshellRetval)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.return_value = C.int32_t(m.ReturnValue)
	mem.return_sequence = C.uint32_t(m.ReturnSequence)
}

func (t _QshellRetvalTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*QshellRetval)
	mem := (*C.px4_msgs__msg__QshellRetval)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.ReturnValue = int32(mem.return_value)
	m.ReturnSequence = uint32(mem.return_sequence)
}

func (t _QshellRetvalTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__QshellRetval())
}

type CQshellRetval = C.px4_msgs__msg__QshellRetval
type CQshellRetval__Sequence = C.px4_msgs__msg__QshellRetval__Sequence

func QshellRetval__Sequence_to_Go(goSlice *[]QshellRetval, cSlice CQshellRetval__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]QshellRetval, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		QshellRetvalTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func QshellRetval__Sequence_to_C(cSlice *CQshellRetval__Sequence, goSlice []QshellRetval) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__QshellRetval)(C.malloc(C.sizeof_struct_px4_msgs__msg__QshellRetval * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		QshellRetvalTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func QshellRetval__Array_to_Go(goSlice []QshellRetval, cSlice []CQshellRetval) {
	for i := 0; i < len(cSlice); i++ {
		QshellRetvalTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func QshellRetval__Array_to_C(cSlice []CQshellRetval, goSlice []QshellRetval) {
	for i := 0; i < len(goSlice); i++ {
		QshellRetvalTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
