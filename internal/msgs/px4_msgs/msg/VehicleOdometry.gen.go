// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_odometry.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleOdometry", VehicleOdometryTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleOdometry", VehicleOdometryTypeSupport)
}

const (
	VehicleOdometry_POSE_FRAME_UNKNOWN      uint8 = 0
	VehicleOdometry_POSE_FRAME_NED          uint8 = 1 // NED earth-fixed frame
	VehicleOdometry_POSE_FRAME_FRD          uint8 = 2 // FRD world-fixed frame, arbitrary heading reference
	VehicleOdometry_VELOCITY_FRAME_UNKNOWN  uint8 = 0
	VehicleOdometry_VELOCITY_FRAME_NED      uint8 = 1 // NED earth-fixed frame
	VehicleOdometry_VELOCITY_FRAME_FRD      uint8 = 2 // FRD world-fixed frame, arbitrary heading reference
	VehicleOdometry_VELOCITY_FRAME_BODY_FRD uint8 = 3 // FRD body-fixed frame
)

type VehicleOdometry struct {
	Timestamp           uint64     `yaml:"timestamp"` // time since system start (microseconds). Vehicle odometry data. Fits ROS REP 147 for aerial vehicles
	TimestampSample     uint64     `yaml:"timestamp_sample"`
	PoseFrame           uint8      `yaml:"pose_frame"`       // Position and orientation frame of reference
	Position            [3]float32 `yaml:"position"`         // Position in meters. Frame of reference defined by local_frame. NaN if invalid/unknown
	Q                   [4]float32 `yaml:"q"`                // Quaternion rotation from FRD body frame to reference frame. First value NaN if invalid/unknown
	VelocityFrame       uint8      `yaml:"velocity_frame"`   // Reference frame of the velocity data
	Velocity            [3]float32 `yaml:"velocity"`         // Velocity in meters/sec. Frame of reference defined by velocity_frame variable. NaN if invalid/unknown
	AngularVelocity     [3]float32 `yaml:"angular_velocity"` // Angular velocity in body-fixed frame (rad/s). NaN if invalid/unknown
	PositionVariance    [3]float32 `yaml:"position_variance"`
	OrientationVariance [3]float32 `yaml:"orientation_variance"`
	VelocityVariance    [3]float32 `yaml:"velocity_variance"`
	ResetCounter        uint8      `yaml:"reset_counter"`
	Quality             int8       `yaml:"quality"`
}

// NewVehicleOdometry creates a new VehicleOdometry with default values.
func NewVehicleOdometry() *VehicleOdometry {
	self := VehicleOdometry{}
	self.SetDefaults()
	return &self
}

func (t *VehicleOdometry) Clone() *VehicleOdometry {
	c := &VehicleOdometry{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.PoseFrame = t.PoseFrame
	c.Position = t.Position
	c.Q = t.Q
	c.VelocityFrame = t.VelocityFrame
	c.Velocity = t.Velocity
	c.AngularVelocity = t.AngularVelocity
	c.PositionVariance = t.PositionVariance
	c.OrientationVariance = t.OrientationVariance
	c.VelocityVariance = t.VelocityVariance
	c.ResetCounter = t.ResetCounter
	c.Quality = t.Quality
	return c
}

func (t *VehicleOdometry) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleOdometry) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.PoseFrame = 0
	t.Position = [3]float32{}
	t.Q = [4]float32{}
	t.VelocityFrame = 0
	t.Velocity = [3]float32{}
	t.AngularVelocity = [3]float32{}
	t.PositionVariance = [3]float32{}
	t.OrientationVariance = [3]float32{}
	t.VelocityVariance = [3]float32{}
	t.ResetCounter = 0
	t.Quality = 0
}

func (t *VehicleOdometry) GetTypeSupport() types.MessageTypeSupport {
	return VehicleOdometryTypeSupport
}

// VehicleOdometryPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleOdometryPublisher struct {
	*rclgo.Publisher
}

// NewVehicleOdometryPublisher creates and returns a new publisher for the
// VehicleOdometry
func NewVehicleOdometryPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleOdometryPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleOdometryTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleOdometryPublisher{pub}, nil
}

func (p *VehicleOdometryPublisher) Publish(msg *VehicleOdometry) error {
	return p.Publisher.Publish(msg)
}

// VehicleOdometrySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleOdometrySubscription struct {
	*rclgo.Subscription
}

// VehicleOdometrySubscriptionCallback type is used to provide a subscription
// handler function for a VehicleOdometrySubscription.
type VehicleOdometrySubscriptionCallback func(msg *VehicleOdometry, info *rclgo.MessageInfo, err error)

// NewVehicleOdometrySubscription creates and returns a new subscription for the
// VehicleOdometry
func NewVehicleOdometrySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleOdometrySubscriptionCallback) (*VehicleOdometrySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleOdometry
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleOdometryTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleOdometrySubscription{sub}, nil
}

func (s *VehicleOdometrySubscription) TakeMessage(out *VehicleOdometry) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleOdometrySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleOdometrySlice(dst, src []VehicleOdometry) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleOdometryTypeSupport types.MessageTypeSupport = _VehicleOdometryTypeSupport{}

type _VehicleOdometryTypeSupport struct{}

func (t _VehicleOdometryTypeSupport) New() types.Message {
	return NewVehicleOdometry()
}

func (t _VehicleOdometryTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleOdometry
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleOdometry__create())
}

func (t _VehicleOdometryTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleOdometry__destroy((*C.px4_msgs__msg__VehicleOdometry)(pointer_to_free))
}

func (t _VehicleOdometryTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleOdometry)
	mem := (*C.px4_msgs__msg__VehicleOdometry)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.pose_frame = C.uint8_t(m.PoseFrame)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)), m.Position[:])
	cSlice_q := mem.q[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_q)), m.Q[:])
	mem.velocity_frame = C.uint8_t(m.VelocityFrame)
	cSlice_velocity := mem.velocity[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity)), m.Velocity[:])
	cSlice_angular_velocity := mem.angular_velocity[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_angular_velocity)), m.AngularVelocity[:])
	cSlice_position_variance := mem.position_variance[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position_variance)), m.PositionVariance[:])
	cSlice_orientation_variance := mem.orientation_variance[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_orientation_variance)), m.OrientationVariance[:])
	cSlice_velocity_variance := mem.velocity_variance[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity_variance)), m.VelocityVariance[:])
	mem.reset_counter = C.uint8_t(m.ResetCounter)
	mem.quality = C.int8_t(m.Quality)
}

func (t _VehicleOdometryTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleOdometry)
	mem := (*C.px4_msgs__msg__VehicleOdometry)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.PoseFrame = uint8(mem.pose_frame)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_Go(m.Position[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)))
	cSlice_q := mem.q[:]
	primitives.Float32__Array_to_Go(m.Q[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_q)))
	m.VelocityFrame = uint8(mem.velocity_frame)
	cSlice_velocity := mem.velocity[:]
	primitives.Float32__Array_to_Go(m.Velocity[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity)))
	cSlice_angular_velocity := mem.angular_velocity[:]
	primitives.Float32__Array_to_Go(m.AngularVelocity[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_angular_velocity)))
	cSlice_position_variance := mem.position_variance[:]
	primitives.Float32__Array_to_Go(m.PositionVariance[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position_variance)))
	cSlice_orientation_variance := mem.orientation_variance[:]
	primitives.Float32__Array_to_Go(m.OrientationVariance[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_orientation_variance)))
	cSlice_velocity_variance := mem.velocity_variance[:]
	primitives.Float32__Array_to_Go(m.VelocityVariance[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity_variance)))
	m.ResetCounter = uint8(mem.reset_counter)
	m.Quality = int8(mem.quality)
}

func (t _VehicleOdometryTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleOdometry())
}

type CVehicleOdometry = C.px4_msgs__msg__VehicleOdometry
type CVehicleOdometry__Sequence = C.px4_msgs__msg__VehicleOdometry__Sequence

func VehicleOdometry__Sequence_to_Go(goSlice *[]VehicleOdometry, cSlice CVehicleOdometry__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleOdometry, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleOdometryTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleOdometry__Sequence_to_C(cSlice *CVehicleOdometry__Sequence, goSlice []VehicleOdometry) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleOdometry)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleOdometry * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleOdometryTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleOdometry__Array_to_Go(goSlice []VehicleOdometry, cSlice []CVehicleOdometry) {
	for i := 0; i < len(cSlice); i++ {
		VehicleOdometryTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleOdometry__Array_to_C(cSlice []CVehicleOdometry, goSlice []VehicleOdometry) {
	for i := 0; i < len(goSlice); i++ {
		VehicleOdometryTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
