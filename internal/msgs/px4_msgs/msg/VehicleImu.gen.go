// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_imu.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleImu", VehicleImuTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleImu", VehicleImuTypeSupport)
}

const (
	VehicleImu_CLIPPING_X uint8 = 1
	VehicleImu_CLIPPING_Y uint8 = 2
	VehicleImu_CLIPPING_Z uint8 = 4
)

type VehicleImu struct {
	Timestamp             uint64     `yaml:"timestamp"` // time since system start (microseconds)
	TimestampSample       uint64     `yaml:"timestamp_sample"`
	AccelDeviceId         uint32     `yaml:"accel_device_id"`         // Accelerometer unique device ID for the sensor that does not change between power cycles
	GyroDeviceId          uint32     `yaml:"gyro_device_id"`          // Gyroscope unique device ID for the sensor that does not change between power cycles
	DeltaAngle            [3]float32 `yaml:"delta_angle"`             // delta angle about the FRD body frame XYZ-axis in rad over the integration time frame (delta_angle_dt)
	DeltaVelocity         [3]float32 `yaml:"delta_velocity"`          // delta velocity in the FRD body frame XYZ-axis in m/s over the integration time frame (delta_velocity_dt)
	DeltaAngleDt          uint16     `yaml:"delta_angle_dt"`          // integration period in microseconds
	DeltaVelocityDt       uint16     `yaml:"delta_velocity_dt"`       // integration period in microseconds
	DeltaAngleClipping    uint8      `yaml:"delta_angle_clipping"`    // bitfield indicating if there was any gyro clipping (per axis) during the integration time frame
	DeltaVelocityClipping uint8      `yaml:"delta_velocity_clipping"` // bitfield indicating if there was any accelerometer clipping (per axis) during the integration time frame
	AccelCalibrationCount uint8      `yaml:"accel_calibration_count"` // Calibration changed counter. Monotonically increases whenever accelermeter calibration changes.
	GyroCalibrationCount  uint8      `yaml:"gyro_calibration_count"`  // Calibration changed counter. Monotonically increases whenever rate gyro calibration changes.
}

// NewVehicleImu creates a new VehicleImu with default values.
func NewVehicleImu() *VehicleImu {
	self := VehicleImu{}
	self.SetDefaults()
	return &self
}

func (t *VehicleImu) Clone() *VehicleImu {
	c := &VehicleImu{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.AccelDeviceId = t.AccelDeviceId
	c.GyroDeviceId = t.GyroDeviceId
	c.DeltaAngle = t.DeltaAngle
	c.DeltaVelocity = t.DeltaVelocity
	c.DeltaAngleDt = t.DeltaAngleDt
	c.DeltaVelocityDt = t.DeltaVelocityDt
	c.DeltaAngleClipping = t.DeltaAngleClipping
	c.DeltaVelocityClipping = t.DeltaVelocityClipping
	c.AccelCalibrationCount = t.AccelCalibrationCount
	c.GyroCalibrationCount = t.GyroCalibrationCount
	return c
}

func (t *VehicleImu) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleImu) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.AccelDeviceId = 0
	t.GyroDeviceId = 0
	t.DeltaAngle = [3]float32{}
	t.DeltaVelocity = [3]float32{}
	t.DeltaAngleDt = 0
	t.DeltaVelocityDt = 0
	t.DeltaAngleClipping = 0
	t.DeltaVelocityClipping = 0
	t.AccelCalibrationCount = 0
	t.GyroCalibrationCount = 0
}

func (t *VehicleImu) GetTypeSupport() types.MessageTypeSupport {
	return VehicleImuTypeSupport
}

// VehicleImuPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleImuPublisher struct {
	*rclgo.Publisher
}

// NewVehicleImuPublisher creates and returns a new publisher for the
// VehicleImu
func NewVehicleImuPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleImuPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleImuTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleImuPublisher{pub}, nil
}

func (p *VehicleImuPublisher) Publish(msg *VehicleImu) error {
	return p.Publisher.Publish(msg)
}

// VehicleImuSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleImuSubscription struct {
	*rclgo.Subscription
}

// VehicleImuSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleImuSubscription.
type VehicleImuSubscriptionCallback func(msg *VehicleImu, info *rclgo.MessageInfo, err error)

// NewVehicleImuSubscription creates and returns a new subscription for the
// VehicleImu
func NewVehicleImuSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleImuSubscriptionCallback) (*VehicleImuSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleImu
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleImuTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleImuSubscription{sub}, nil
}

func (s *VehicleImuSubscription) TakeMessage(out *VehicleImu) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleImuSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleImuSlice(dst, src []VehicleImu) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleImuTypeSupport types.MessageTypeSupport = _VehicleImuTypeSupport{}

type _VehicleImuTypeSupport struct{}

func (t _VehicleImuTypeSupport) New() types.Message {
	return NewVehicleImu()
}

func (t _VehicleImuTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleImu
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleImu__create())
}

func (t _VehicleImuTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleImu__destroy((*C.px4_msgs__msg__VehicleImu)(pointer_to_free))
}

func (t _VehicleImuTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleImu)
	mem := (*C.px4_msgs__msg__VehicleImu)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.accel_device_id = C.uint32_t(m.AccelDeviceId)
	mem.gyro_device_id = C.uint32_t(m.GyroDeviceId)
	cSlice_delta_angle := mem.delta_angle[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_angle)), m.DeltaAngle[:])
	cSlice_delta_velocity := mem.delta_velocity[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_velocity)), m.DeltaVelocity[:])
	mem.delta_angle_dt = C.uint16_t(m.DeltaAngleDt)
	mem.delta_velocity_dt = C.uint16_t(m.DeltaVelocityDt)
	mem.delta_angle_clipping = C.uint8_t(m.DeltaAngleClipping)
	mem.delta_velocity_clipping = C.uint8_t(m.DeltaVelocityClipping)
	mem.accel_calibration_count = C.uint8_t(m.AccelCalibrationCount)
	mem.gyro_calibration_count = C.uint8_t(m.GyroCalibrationCount)
}

func (t _VehicleImuTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleImu)
	mem := (*C.px4_msgs__msg__VehicleImu)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.AccelDeviceId = uint32(mem.accel_device_id)
	m.GyroDeviceId = uint32(mem.gyro_device_id)
	cSlice_delta_angle := mem.delta_angle[:]
	primitives.Float32__Array_to_Go(m.DeltaAngle[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_angle)))
	cSlice_delta_velocity := mem.delta_velocity[:]
	primitives.Float32__Array_to_Go(m.DeltaVelocity[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_velocity)))
	m.DeltaAngleDt = uint16(mem.delta_angle_dt)
	m.DeltaVelocityDt = uint16(mem.delta_velocity_dt)
	m.DeltaAngleClipping = uint8(mem.delta_angle_clipping)
	m.DeltaVelocityClipping = uint8(mem.delta_velocity_clipping)
	m.AccelCalibrationCount = uint8(mem.accel_calibration_count)
	m.GyroCalibrationCount = uint8(mem.gyro_calibration_count)
}

func (t _VehicleImuTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleImu())
}

type CVehicleImu = C.px4_msgs__msg__VehicleImu
type CVehicleImu__Sequence = C.px4_msgs__msg__VehicleImu__Sequence

func VehicleImu__Sequence_to_Go(goSlice *[]VehicleImu, cSlice CVehicleImu__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleImu, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleImuTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleImu__Sequence_to_C(cSlice *CVehicleImu__Sequence, goSlice []VehicleImu) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleImu)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleImu * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleImuTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleImu__Array_to_Go(goSlice []VehicleImu, cSlice []CVehicleImu) {
	for i := 0; i < len(cSlice); i++ {
		VehicleImuTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleImu__Array_to_C(cSlice []CVehicleImu, goSlice []VehicleImu) {
	for i := 0; i < len(goSlice); i++ {
		VehicleImuTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
