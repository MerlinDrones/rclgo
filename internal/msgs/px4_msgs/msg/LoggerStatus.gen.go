// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/logger_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/LoggerStatus", LoggerStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/LoggerStatus", LoggerStatusTypeSupport)
}

const (
	LoggerStatus_LOGGER_TYPE_FULL    uint8 = 0 // Normal, full size log
	LoggerStatus_LOGGER_TYPE_MISSION uint8 = 1 // reduced mission log (e.g. for geotagging)
	LoggerStatus_BACKEND_FILE        uint8 = 1
	LoggerStatus_BACKEND_MAVLINK     uint8 = 2
	LoggerStatus_BACKEND_ALL         uint8 = 3
)

type LoggerStatus struct {
	Timestamp       uint64  `yaml:"timestamp"` // time since system start (microseconds)
	Type            uint8   `yaml:"type"`
	Backend         uint8   `yaml:"backend"`
	IsLogging       bool    `yaml:"is_logging"`
	TotalWrittenKb  float32 `yaml:"total_written_kb"`  // total written to log in kiloBytes
	WriteRateKbS    float32 `yaml:"write_rate_kb_s"`   // write rate in kiloBytes/s
	Dropouts        uint32  `yaml:"dropouts"`          // number of failed buffer writes due to buffer overflow
	MessageGaps     uint32  `yaml:"message_gaps"`      // messages misssed
	BufferUsedBytes uint32  `yaml:"buffer_used_bytes"` // current buffer fill in Bytes
	BufferSizeBytes uint32  `yaml:"buffer_size_bytes"` // total buffer size in Bytes
	NumMessages     uint8   `yaml:"num_messages"`
}

// NewLoggerStatus creates a new LoggerStatus with default values.
func NewLoggerStatus() *LoggerStatus {
	self := LoggerStatus{}
	self.SetDefaults()
	return &self
}

func (t *LoggerStatus) Clone() *LoggerStatus {
	c := &LoggerStatus{}
	c.Timestamp = t.Timestamp
	c.Type = t.Type
	c.Backend = t.Backend
	c.IsLogging = t.IsLogging
	c.TotalWrittenKb = t.TotalWrittenKb
	c.WriteRateKbS = t.WriteRateKbS
	c.Dropouts = t.Dropouts
	c.MessageGaps = t.MessageGaps
	c.BufferUsedBytes = t.BufferUsedBytes
	c.BufferSizeBytes = t.BufferSizeBytes
	c.NumMessages = t.NumMessages
	return c
}

func (t *LoggerStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LoggerStatus) SetDefaults() {
	t.Timestamp = 0
	t.Type = 0
	t.Backend = 0
	t.IsLogging = false
	t.TotalWrittenKb = 0
	t.WriteRateKbS = 0
	t.Dropouts = 0
	t.MessageGaps = 0
	t.BufferUsedBytes = 0
	t.BufferSizeBytes = 0
	t.NumMessages = 0
}

func (t *LoggerStatus) GetTypeSupport() types.MessageTypeSupport {
	return LoggerStatusTypeSupport
}

// LoggerStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LoggerStatusPublisher struct {
	*rclgo.Publisher
}

// NewLoggerStatusPublisher creates and returns a new publisher for the
// LoggerStatus
func NewLoggerStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LoggerStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LoggerStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LoggerStatusPublisher{pub}, nil
}

func (p *LoggerStatusPublisher) Publish(msg *LoggerStatus) error {
	return p.Publisher.Publish(msg)
}

// LoggerStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LoggerStatusSubscription struct {
	*rclgo.Subscription
}

// LoggerStatusSubscriptionCallback type is used to provide a subscription
// handler function for a LoggerStatusSubscription.
type LoggerStatusSubscriptionCallback func(msg *LoggerStatus, info *rclgo.MessageInfo, err error)

// NewLoggerStatusSubscription creates and returns a new subscription for the
// LoggerStatus
func NewLoggerStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LoggerStatusSubscriptionCallback) (*LoggerStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LoggerStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LoggerStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LoggerStatusSubscription{sub}, nil
}

func (s *LoggerStatusSubscription) TakeMessage(out *LoggerStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLoggerStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLoggerStatusSlice(dst, src []LoggerStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LoggerStatusTypeSupport types.MessageTypeSupport = _LoggerStatusTypeSupport{}

type _LoggerStatusTypeSupport struct{}

func (t _LoggerStatusTypeSupport) New() types.Message {
	return NewLoggerStatus()
}

func (t _LoggerStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__LoggerStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__LoggerStatus__create())
}

func (t _LoggerStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__LoggerStatus__destroy((*C.px4_msgs__msg__LoggerStatus)(pointer_to_free))
}

func (t _LoggerStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LoggerStatus)
	mem := (*C.px4_msgs__msg__LoggerStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem._type = C.uint8_t(m.Type)
	mem.backend = C.uint8_t(m.Backend)
	mem.is_logging = C.bool(m.IsLogging)
	mem.total_written_kb = C.float(m.TotalWrittenKb)
	mem.write_rate_kb_s = C.float(m.WriteRateKbS)
	mem.dropouts = C.uint32_t(m.Dropouts)
	mem.message_gaps = C.uint32_t(m.MessageGaps)
	mem.buffer_used_bytes = C.uint32_t(m.BufferUsedBytes)
	mem.buffer_size_bytes = C.uint32_t(m.BufferSizeBytes)
	mem.num_messages = C.uint8_t(m.NumMessages)
}

func (t _LoggerStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LoggerStatus)
	mem := (*C.px4_msgs__msg__LoggerStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Type = uint8(mem._type)
	m.Backend = uint8(mem.backend)
	m.IsLogging = bool(mem.is_logging)
	m.TotalWrittenKb = float32(mem.total_written_kb)
	m.WriteRateKbS = float32(mem.write_rate_kb_s)
	m.Dropouts = uint32(mem.dropouts)
	m.MessageGaps = uint32(mem.message_gaps)
	m.BufferUsedBytes = uint32(mem.buffer_used_bytes)
	m.BufferSizeBytes = uint32(mem.buffer_size_bytes)
	m.NumMessages = uint8(mem.num_messages)
}

func (t _LoggerStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__LoggerStatus())
}

type CLoggerStatus = C.px4_msgs__msg__LoggerStatus
type CLoggerStatus__Sequence = C.px4_msgs__msg__LoggerStatus__Sequence

func LoggerStatus__Sequence_to_Go(goSlice *[]LoggerStatus, cSlice CLoggerStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LoggerStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LoggerStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LoggerStatus__Sequence_to_C(cSlice *CLoggerStatus__Sequence, goSlice []LoggerStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__LoggerStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__LoggerStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LoggerStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LoggerStatus__Array_to_Go(goSlice []LoggerStatus, cSlice []CLoggerStatus) {
	for i := 0; i < len(cSlice); i++ {
		LoggerStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LoggerStatus__Array_to_C(cSlice []CLoggerStatus, goSlice []LoggerStatus) {
	for i := 0; i < len(goSlice); i++ {
		LoggerStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
