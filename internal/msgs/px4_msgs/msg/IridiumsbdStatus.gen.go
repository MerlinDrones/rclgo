// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/iridiumsbd_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/IridiumsbdStatus", IridiumsbdStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/IridiumsbdStatus", IridiumsbdStatusTypeSupport)
}

type IridiumsbdStatus struct {
	Timestamp             uint64 `yaml:"timestamp"`               // time since system start (microseconds)
	LastAtOkTimestamp     uint64 `yaml:"last_at_ok_timestamp"`    // timestamp of the last "OK" received after the "AT" command
	TxBufWriteIndex       uint16 `yaml:"tx_buf_write_index"`      // current size of the tx buffer
	RxBufReadIndex        uint16 `yaml:"rx_buf_read_index"`       // the rx buffer is parsed up to that index
	RxBufEndIndex         uint16 `yaml:"rx_buf_end_index"`        // current size of the rx buffer
	FailedSbdSessions     uint16 `yaml:"failed_sbd_sessions"`     // number of failed sbd sessions
	SuccessfulSbdSessions uint16 `yaml:"successful_sbd_sessions"` // number of successful sbd sessions
	NumTxBufReset         uint16 `yaml:"num_tx_buf_reset"`        // number of times the tx buffer was reset
	SignalQuality         uint8  `yaml:"signal_quality"`          // current signal quality, 0 is no signal, 5 the best
	State                 uint8  `yaml:"state"`                   // current state of the driver, see the satcom_state of IridiumSBD.h for the definition
	RingPending           bool   `yaml:"ring_pending"`            // indicates if a ring call is pending
	TxBufWritePending     bool   `yaml:"tx_buf_write_pending"`    // indicates if a tx buffer write is pending
	TxSessionPending      bool   `yaml:"tx_session_pending"`      // indicates if a tx session is pending
	RxReadPending         bool   `yaml:"rx_read_pending"`         // indicates if a rx read is pending
	RxSessionPending      bool   `yaml:"rx_session_pending"`      // indicates if a rx session is pending
}

// NewIridiumsbdStatus creates a new IridiumsbdStatus with default values.
func NewIridiumsbdStatus() *IridiumsbdStatus {
	self := IridiumsbdStatus{}
	self.SetDefaults()
	return &self
}

func (t *IridiumsbdStatus) Clone() *IridiumsbdStatus {
	c := &IridiumsbdStatus{}
	c.Timestamp = t.Timestamp
	c.LastAtOkTimestamp = t.LastAtOkTimestamp
	c.TxBufWriteIndex = t.TxBufWriteIndex
	c.RxBufReadIndex = t.RxBufReadIndex
	c.RxBufEndIndex = t.RxBufEndIndex
	c.FailedSbdSessions = t.FailedSbdSessions
	c.SuccessfulSbdSessions = t.SuccessfulSbdSessions
	c.NumTxBufReset = t.NumTxBufReset
	c.SignalQuality = t.SignalQuality
	c.State = t.State
	c.RingPending = t.RingPending
	c.TxBufWritePending = t.TxBufWritePending
	c.TxSessionPending = t.TxSessionPending
	c.RxReadPending = t.RxReadPending
	c.RxSessionPending = t.RxSessionPending
	return c
}

func (t *IridiumsbdStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *IridiumsbdStatus) SetDefaults() {
	t.Timestamp = 0
	t.LastAtOkTimestamp = 0
	t.TxBufWriteIndex = 0
	t.RxBufReadIndex = 0
	t.RxBufEndIndex = 0
	t.FailedSbdSessions = 0
	t.SuccessfulSbdSessions = 0
	t.NumTxBufReset = 0
	t.SignalQuality = 0
	t.State = 0
	t.RingPending = false
	t.TxBufWritePending = false
	t.TxSessionPending = false
	t.RxReadPending = false
	t.RxSessionPending = false
}

func (t *IridiumsbdStatus) GetTypeSupport() types.MessageTypeSupport {
	return IridiumsbdStatusTypeSupport
}

// IridiumsbdStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type IridiumsbdStatusPublisher struct {
	*rclgo.Publisher
}

// NewIridiumsbdStatusPublisher creates and returns a new publisher for the
// IridiumsbdStatus
func NewIridiumsbdStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*IridiumsbdStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, IridiumsbdStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &IridiumsbdStatusPublisher{pub}, nil
}

func (p *IridiumsbdStatusPublisher) Publish(msg *IridiumsbdStatus) error {
	return p.Publisher.Publish(msg)
}

// IridiumsbdStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type IridiumsbdStatusSubscription struct {
	*rclgo.Subscription
}

// IridiumsbdStatusSubscriptionCallback type is used to provide a subscription
// handler function for a IridiumsbdStatusSubscription.
type IridiumsbdStatusSubscriptionCallback func(msg *IridiumsbdStatus, info *rclgo.MessageInfo, err error)

// NewIridiumsbdStatusSubscription creates and returns a new subscription for the
// IridiumsbdStatus
func NewIridiumsbdStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback IridiumsbdStatusSubscriptionCallback) (*IridiumsbdStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg IridiumsbdStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, IridiumsbdStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &IridiumsbdStatusSubscription{sub}, nil
}

func (s *IridiumsbdStatusSubscription) TakeMessage(out *IridiumsbdStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneIridiumsbdStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneIridiumsbdStatusSlice(dst, src []IridiumsbdStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var IridiumsbdStatusTypeSupport types.MessageTypeSupport = _IridiumsbdStatusTypeSupport{}

type _IridiumsbdStatusTypeSupport struct{}

func (t _IridiumsbdStatusTypeSupport) New() types.Message {
	return NewIridiumsbdStatus()
}

func (t _IridiumsbdStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__IridiumsbdStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__IridiumsbdStatus__create())
}

func (t _IridiumsbdStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__IridiumsbdStatus__destroy((*C.px4_msgs__msg__IridiumsbdStatus)(pointer_to_free))
}

func (t _IridiumsbdStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*IridiumsbdStatus)
	mem := (*C.px4_msgs__msg__IridiumsbdStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.last_at_ok_timestamp = C.uint64_t(m.LastAtOkTimestamp)
	mem.tx_buf_write_index = C.uint16_t(m.TxBufWriteIndex)
	mem.rx_buf_read_index = C.uint16_t(m.RxBufReadIndex)
	mem.rx_buf_end_index = C.uint16_t(m.RxBufEndIndex)
	mem.failed_sbd_sessions = C.uint16_t(m.FailedSbdSessions)
	mem.successful_sbd_sessions = C.uint16_t(m.SuccessfulSbdSessions)
	mem.num_tx_buf_reset = C.uint16_t(m.NumTxBufReset)
	mem.signal_quality = C.uint8_t(m.SignalQuality)
	mem.state = C.uint8_t(m.State)
	mem.ring_pending = C.bool(m.RingPending)
	mem.tx_buf_write_pending = C.bool(m.TxBufWritePending)
	mem.tx_session_pending = C.bool(m.TxSessionPending)
	mem.rx_read_pending = C.bool(m.RxReadPending)
	mem.rx_session_pending = C.bool(m.RxSessionPending)
}

func (t _IridiumsbdStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*IridiumsbdStatus)
	mem := (*C.px4_msgs__msg__IridiumsbdStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.LastAtOkTimestamp = uint64(mem.last_at_ok_timestamp)
	m.TxBufWriteIndex = uint16(mem.tx_buf_write_index)
	m.RxBufReadIndex = uint16(mem.rx_buf_read_index)
	m.RxBufEndIndex = uint16(mem.rx_buf_end_index)
	m.FailedSbdSessions = uint16(mem.failed_sbd_sessions)
	m.SuccessfulSbdSessions = uint16(mem.successful_sbd_sessions)
	m.NumTxBufReset = uint16(mem.num_tx_buf_reset)
	m.SignalQuality = uint8(mem.signal_quality)
	m.State = uint8(mem.state)
	m.RingPending = bool(mem.ring_pending)
	m.TxBufWritePending = bool(mem.tx_buf_write_pending)
	m.TxSessionPending = bool(mem.tx_session_pending)
	m.RxReadPending = bool(mem.rx_read_pending)
	m.RxSessionPending = bool(mem.rx_session_pending)
}

func (t _IridiumsbdStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__IridiumsbdStatus())
}

type CIridiumsbdStatus = C.px4_msgs__msg__IridiumsbdStatus
type CIridiumsbdStatus__Sequence = C.px4_msgs__msg__IridiumsbdStatus__Sequence

func IridiumsbdStatus__Sequence_to_Go(goSlice *[]IridiumsbdStatus, cSlice CIridiumsbdStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]IridiumsbdStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		IridiumsbdStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func IridiumsbdStatus__Sequence_to_C(cSlice *CIridiumsbdStatus__Sequence, goSlice []IridiumsbdStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__IridiumsbdStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__IridiumsbdStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		IridiumsbdStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func IridiumsbdStatus__Array_to_Go(goSlice []IridiumsbdStatus, cSlice []CIridiumsbdStatus) {
	for i := 0; i < len(cSlice); i++ {
		IridiumsbdStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func IridiumsbdStatus__Array_to_C(cSlice []CIridiumsbdStatus, goSlice []IridiumsbdStatus) {
	for i := 0; i < len(goSlice); i++ {
		IridiumsbdStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
