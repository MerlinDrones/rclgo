// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/open_drone_id_operator_id.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/OpenDroneIdOperatorId", OpenDroneIdOperatorIdTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/OpenDroneIdOperatorId", OpenDroneIdOperatorIdTypeSupport)
}

type OpenDroneIdOperatorId struct {
	Timestamp      uint64    `yaml:"timestamp"`
	IdOrMac        [20]uint8 `yaml:"id_or_mac"`
	OperatorIdType uint8     `yaml:"operator_id_type"`
	OperatorId     [20]byte  `yaml:"operator_id"`
}

// NewOpenDroneIdOperatorId creates a new OpenDroneIdOperatorId with default values.
func NewOpenDroneIdOperatorId() *OpenDroneIdOperatorId {
	self := OpenDroneIdOperatorId{}
	self.SetDefaults()
	return &self
}

func (t *OpenDroneIdOperatorId) Clone() *OpenDroneIdOperatorId {
	c := &OpenDroneIdOperatorId{}
	c.Timestamp = t.Timestamp
	c.IdOrMac = t.IdOrMac
	c.OperatorIdType = t.OperatorIdType
	c.OperatorId = t.OperatorId
	return c
}

func (t *OpenDroneIdOperatorId) CloneMsg() types.Message {
	return t.Clone()
}

func (t *OpenDroneIdOperatorId) SetDefaults() {
	t.Timestamp = 0
	t.IdOrMac = [20]uint8{}
	t.OperatorIdType = 0
	t.OperatorId = [20]byte{}
}

func (t *OpenDroneIdOperatorId) GetTypeSupport() types.MessageTypeSupport {
	return OpenDroneIdOperatorIdTypeSupport
}

// OpenDroneIdOperatorIdPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type OpenDroneIdOperatorIdPublisher struct {
	*rclgo.Publisher
}

// NewOpenDroneIdOperatorIdPublisher creates and returns a new publisher for the
// OpenDroneIdOperatorId
func NewOpenDroneIdOperatorIdPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*OpenDroneIdOperatorIdPublisher, error) {
	pub, err := node.NewPublisher(topic_name, OpenDroneIdOperatorIdTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &OpenDroneIdOperatorIdPublisher{pub}, nil
}

func (p *OpenDroneIdOperatorIdPublisher) Publish(msg *OpenDroneIdOperatorId) error {
	return p.Publisher.Publish(msg)
}

// OpenDroneIdOperatorIdSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type OpenDroneIdOperatorIdSubscription struct {
	*rclgo.Subscription
}

// OpenDroneIdOperatorIdSubscriptionCallback type is used to provide a subscription
// handler function for a OpenDroneIdOperatorIdSubscription.
type OpenDroneIdOperatorIdSubscriptionCallback func(msg *OpenDroneIdOperatorId, info *rclgo.MessageInfo, err error)

// NewOpenDroneIdOperatorIdSubscription creates and returns a new subscription for the
// OpenDroneIdOperatorId
func NewOpenDroneIdOperatorIdSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback OpenDroneIdOperatorIdSubscriptionCallback) (*OpenDroneIdOperatorIdSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg OpenDroneIdOperatorId
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, OpenDroneIdOperatorIdTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &OpenDroneIdOperatorIdSubscription{sub}, nil
}

func (s *OpenDroneIdOperatorIdSubscription) TakeMessage(out *OpenDroneIdOperatorId) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneOpenDroneIdOperatorIdSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneOpenDroneIdOperatorIdSlice(dst, src []OpenDroneIdOperatorId) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var OpenDroneIdOperatorIdTypeSupport types.MessageTypeSupport = _OpenDroneIdOperatorIdTypeSupport{}

type _OpenDroneIdOperatorIdTypeSupport struct{}

func (t _OpenDroneIdOperatorIdTypeSupport) New() types.Message {
	return NewOpenDroneIdOperatorId()
}

func (t _OpenDroneIdOperatorIdTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__OpenDroneIdOperatorId
	return (unsafe.Pointer)(C.px4_msgs__msg__OpenDroneIdOperatorId__create())
}

func (t _OpenDroneIdOperatorIdTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__OpenDroneIdOperatorId__destroy((*C.px4_msgs__msg__OpenDroneIdOperatorId)(pointer_to_free))
}

func (t _OpenDroneIdOperatorIdTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*OpenDroneIdOperatorId)
	mem := (*C.px4_msgs__msg__OpenDroneIdOperatorId)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_id_or_mac := mem.id_or_mac[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_id_or_mac)), m.IdOrMac[:])
	mem.operator_id_type = C.uint8_t(m.OperatorIdType)
	cSlice_operator_id := mem.operator_id[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_operator_id)), m.OperatorId[:])
}

func (t _OpenDroneIdOperatorIdTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*OpenDroneIdOperatorId)
	mem := (*C.px4_msgs__msg__OpenDroneIdOperatorId)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_id_or_mac := mem.id_or_mac[:]
	primitives.Uint8__Array_to_Go(m.IdOrMac[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_id_or_mac)))
	m.OperatorIdType = uint8(mem.operator_id_type)
	cSlice_operator_id := mem.operator_id[:]
	primitives.Char__Array_to_Go(m.OperatorId[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_operator_id)))
}

func (t _OpenDroneIdOperatorIdTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__OpenDroneIdOperatorId())
}

type COpenDroneIdOperatorId = C.px4_msgs__msg__OpenDroneIdOperatorId
type COpenDroneIdOperatorId__Sequence = C.px4_msgs__msg__OpenDroneIdOperatorId__Sequence

func OpenDroneIdOperatorId__Sequence_to_Go(goSlice *[]OpenDroneIdOperatorId, cSlice COpenDroneIdOperatorId__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]OpenDroneIdOperatorId, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		OpenDroneIdOperatorIdTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func OpenDroneIdOperatorId__Sequence_to_C(cSlice *COpenDroneIdOperatorId__Sequence, goSlice []OpenDroneIdOperatorId) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__OpenDroneIdOperatorId)(C.malloc(C.sizeof_struct_px4_msgs__msg__OpenDroneIdOperatorId * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		OpenDroneIdOperatorIdTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func OpenDroneIdOperatorId__Array_to_Go(goSlice []OpenDroneIdOperatorId, cSlice []COpenDroneIdOperatorId) {
	for i := 0; i < len(cSlice); i++ {
		OpenDroneIdOperatorIdTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func OpenDroneIdOperatorId__Array_to_C(cSlice []COpenDroneIdOperatorId, goSlice []OpenDroneIdOperatorId) {
	for i := 0; i < len(goSlice); i++ {
		OpenDroneIdOperatorIdTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
