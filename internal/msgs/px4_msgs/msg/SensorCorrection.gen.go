// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_correction.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorCorrection", SensorCorrectionTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SensorCorrection", SensorCorrectionTypeSupport)
}

type SensorCorrection struct {
	Timestamp        uint64     `yaml:"timestamp"`        // time since system start (microseconds)
	AccelDeviceIds   [4]uint32  `yaml:"accel_device_ids"` // Corrections for acceleromter acceleration outputs where corrected_accel = raw_accel * accel_scale + accel_offsetNote the corrections are in the sensor frame and must be applied before the sensor data is rotated into body frame
	AccelTemperature [4]float32 `yaml:"accel_temperature"`
	AccelOffset0     [3]float32 `yaml:"accel_offset_0"`  // accelerometer 0 offsets in the FRD board frame XYZ-axis in m/s^s
	AccelOffset1     [3]float32 `yaml:"accel_offset_1"`  // accelerometer 1 offsets in the FRD board frame XYZ-axis in m/s^s
	AccelOffset2     [3]float32 `yaml:"accel_offset_2"`  // accelerometer 2 offsets in the FRD board frame XYZ-axis in m/s^s
	AccelOffset3     [3]float32 `yaml:"accel_offset_3"`  // accelerometer 3 offsets in the FRD board frame XYZ-axis in m/s^s
	GyroDeviceIds    [4]uint32  `yaml:"gyro_device_ids"` // Corrections for gyro angular rate outputs where corrected_rate = raw_rate * gyro_scale + gyro_offsetNote the corrections are in the sensor frame and must be applied before the sensor data is rotated into body frame
	GyroTemperature  [4]float32 `yaml:"gyro_temperature"`
	GyroOffset0      [3]float32 `yaml:"gyro_offset_0"`  // gyro 0 XYZ offsets in the sensor frame in rad/s
	GyroOffset1      [3]float32 `yaml:"gyro_offset_1"`  // gyro 1 XYZ offsets in the sensor frame in rad/s
	GyroOffset2      [3]float32 `yaml:"gyro_offset_2"`  // gyro 2 XYZ offsets in the sensor frame in rad/s
	GyroOffset3      [3]float32 `yaml:"gyro_offset_3"`  // gyro 3 XYZ offsets in the sensor frame in rad/s
	MagDeviceIds     [4]uint32  `yaml:"mag_device_ids"` // Corrections for magnetometer measurement outputs where corrected_mag = raw_mag * mag_scale + mag_offsetNote the corrections are in the sensor frame and must be applied before the sensor data is rotated into body frame
	MagTemperature   [4]float32 `yaml:"mag_temperature"`
	MagOffset0       [3]float32 `yaml:"mag_offset_0"`    // magnetometer 0 offsets in the FRD board frame XYZ-axis in m/s^s
	MagOffset1       [3]float32 `yaml:"mag_offset_1"`    // magnetometer 1 offsets in the FRD board frame XYZ-axis in m/s^s
	MagOffset2       [3]float32 `yaml:"mag_offset_2"`    // magnetometer 2 offsets in the FRD board frame XYZ-axis in m/s^s
	MagOffset3       [3]float32 `yaml:"mag_offset_3"`    // magnetometer 3 offsets in the FRD board frame XYZ-axis in m/s^s
	BaroDeviceIds    [4]uint32  `yaml:"baro_device_ids"` // Corrections for barometric pressure outputs where corrected_pressure = raw_pressure * pressure_scale + pressure_offsetNote the corrections are in the sensor frame and must be applied before the sensor data is rotated into body frame
	BaroTemperature  [4]float32 `yaml:"baro_temperature"`
	BaroOffset0      float32    `yaml:"baro_offset_0"` // barometric pressure 0 offsets in the sensor frame in Pascals
	BaroOffset1      float32    `yaml:"baro_offset_1"` // barometric pressure 1 offsets in the sensor frame in Pascals
	BaroOffset2      float32    `yaml:"baro_offset_2"` // barometric pressure 2 offsets in the sensor frame in Pascals
	BaroOffset3      float32    `yaml:"baro_offset_3"` // barometric pressure 3 offsets in the sensor frame in Pascals
}

// NewSensorCorrection creates a new SensorCorrection with default values.
func NewSensorCorrection() *SensorCorrection {
	self := SensorCorrection{}
	self.SetDefaults()
	return &self
}

func (t *SensorCorrection) Clone() *SensorCorrection {
	c := &SensorCorrection{}
	c.Timestamp = t.Timestamp
	c.AccelDeviceIds = t.AccelDeviceIds
	c.AccelTemperature = t.AccelTemperature
	c.AccelOffset0 = t.AccelOffset0
	c.AccelOffset1 = t.AccelOffset1
	c.AccelOffset2 = t.AccelOffset2
	c.AccelOffset3 = t.AccelOffset3
	c.GyroDeviceIds = t.GyroDeviceIds
	c.GyroTemperature = t.GyroTemperature
	c.GyroOffset0 = t.GyroOffset0
	c.GyroOffset1 = t.GyroOffset1
	c.GyroOffset2 = t.GyroOffset2
	c.GyroOffset3 = t.GyroOffset3
	c.MagDeviceIds = t.MagDeviceIds
	c.MagTemperature = t.MagTemperature
	c.MagOffset0 = t.MagOffset0
	c.MagOffset1 = t.MagOffset1
	c.MagOffset2 = t.MagOffset2
	c.MagOffset3 = t.MagOffset3
	c.BaroDeviceIds = t.BaroDeviceIds
	c.BaroTemperature = t.BaroTemperature
	c.BaroOffset0 = t.BaroOffset0
	c.BaroOffset1 = t.BaroOffset1
	c.BaroOffset2 = t.BaroOffset2
	c.BaroOffset3 = t.BaroOffset3
	return c
}

func (t *SensorCorrection) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorCorrection) SetDefaults() {
	t.Timestamp = 0
	t.AccelDeviceIds = [4]uint32{}
	t.AccelTemperature = [4]float32{}
	t.AccelOffset0 = [3]float32{}
	t.AccelOffset1 = [3]float32{}
	t.AccelOffset2 = [3]float32{}
	t.AccelOffset3 = [3]float32{}
	t.GyroDeviceIds = [4]uint32{}
	t.GyroTemperature = [4]float32{}
	t.GyroOffset0 = [3]float32{}
	t.GyroOffset1 = [3]float32{}
	t.GyroOffset2 = [3]float32{}
	t.GyroOffset3 = [3]float32{}
	t.MagDeviceIds = [4]uint32{}
	t.MagTemperature = [4]float32{}
	t.MagOffset0 = [3]float32{}
	t.MagOffset1 = [3]float32{}
	t.MagOffset2 = [3]float32{}
	t.MagOffset3 = [3]float32{}
	t.BaroDeviceIds = [4]uint32{}
	t.BaroTemperature = [4]float32{}
	t.BaroOffset0 = 0
	t.BaroOffset1 = 0
	t.BaroOffset2 = 0
	t.BaroOffset3 = 0
}

func (t *SensorCorrection) GetTypeSupport() types.MessageTypeSupport {
	return SensorCorrectionTypeSupport
}

// SensorCorrectionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorCorrectionPublisher struct {
	*rclgo.Publisher
}

// NewSensorCorrectionPublisher creates and returns a new publisher for the
// SensorCorrection
func NewSensorCorrectionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorCorrectionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorCorrectionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorCorrectionPublisher{pub}, nil
}

func (p *SensorCorrectionPublisher) Publish(msg *SensorCorrection) error {
	return p.Publisher.Publish(msg)
}

// SensorCorrectionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorCorrectionSubscription struct {
	*rclgo.Subscription
}

// SensorCorrectionSubscriptionCallback type is used to provide a subscription
// handler function for a SensorCorrectionSubscription.
type SensorCorrectionSubscriptionCallback func(msg *SensorCorrection, info *rclgo.MessageInfo, err error)

// NewSensorCorrectionSubscription creates and returns a new subscription for the
// SensorCorrection
func NewSensorCorrectionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorCorrectionSubscriptionCallback) (*SensorCorrectionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorCorrection
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorCorrectionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorCorrectionSubscription{sub}, nil
}

func (s *SensorCorrectionSubscription) TakeMessage(out *SensorCorrection) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorCorrectionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorCorrectionSlice(dst, src []SensorCorrection) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorCorrectionTypeSupport types.MessageTypeSupport = _SensorCorrectionTypeSupport{}

type _SensorCorrectionTypeSupport struct{}

func (t _SensorCorrectionTypeSupport) New() types.Message {
	return NewSensorCorrection()
}

func (t _SensorCorrectionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorCorrection
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorCorrection__create())
}

func (t _SensorCorrectionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorCorrection__destroy((*C.px4_msgs__msg__SensorCorrection)(pointer_to_free))
}

func (t _SensorCorrectionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorCorrection)
	mem := (*C.px4_msgs__msg__SensorCorrection)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_accel_device_ids := mem.accel_device_ids[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_accel_device_ids)), m.AccelDeviceIds[:])
	cSlice_accel_temperature := mem.accel_temperature[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_temperature)), m.AccelTemperature[:])
	cSlice_accel_offset_0 := mem.accel_offset_0[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_offset_0)), m.AccelOffset0[:])
	cSlice_accel_offset_1 := mem.accel_offset_1[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_offset_1)), m.AccelOffset1[:])
	cSlice_accel_offset_2 := mem.accel_offset_2[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_offset_2)), m.AccelOffset2[:])
	cSlice_accel_offset_3 := mem.accel_offset_3[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_offset_3)), m.AccelOffset3[:])
	cSlice_gyro_device_ids := mem.gyro_device_ids[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_gyro_device_ids)), m.GyroDeviceIds[:])
	cSlice_gyro_temperature := mem.gyro_temperature[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_temperature)), m.GyroTemperature[:])
	cSlice_gyro_offset_0 := mem.gyro_offset_0[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_offset_0)), m.GyroOffset0[:])
	cSlice_gyro_offset_1 := mem.gyro_offset_1[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_offset_1)), m.GyroOffset1[:])
	cSlice_gyro_offset_2 := mem.gyro_offset_2[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_offset_2)), m.GyroOffset2[:])
	cSlice_gyro_offset_3 := mem.gyro_offset_3[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_offset_3)), m.GyroOffset3[:])
	cSlice_mag_device_ids := mem.mag_device_ids[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_mag_device_ids)), m.MagDeviceIds[:])
	cSlice_mag_temperature := mem.mag_temperature[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_temperature)), m.MagTemperature[:])
	cSlice_mag_offset_0 := mem.mag_offset_0[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_offset_0)), m.MagOffset0[:])
	cSlice_mag_offset_1 := mem.mag_offset_1[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_offset_1)), m.MagOffset1[:])
	cSlice_mag_offset_2 := mem.mag_offset_2[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_offset_2)), m.MagOffset2[:])
	cSlice_mag_offset_3 := mem.mag_offset_3[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_offset_3)), m.MagOffset3[:])
	cSlice_baro_device_ids := mem.baro_device_ids[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_baro_device_ids)), m.BaroDeviceIds[:])
	cSlice_baro_temperature := mem.baro_temperature[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_baro_temperature)), m.BaroTemperature[:])
	mem.baro_offset_0 = C.float(m.BaroOffset0)
	mem.baro_offset_1 = C.float(m.BaroOffset1)
	mem.baro_offset_2 = C.float(m.BaroOffset2)
	mem.baro_offset_3 = C.float(m.BaroOffset3)
}

func (t _SensorCorrectionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorCorrection)
	mem := (*C.px4_msgs__msg__SensorCorrection)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_accel_device_ids := mem.accel_device_ids[:]
	primitives.Uint32__Array_to_Go(m.AccelDeviceIds[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_accel_device_ids)))
	cSlice_accel_temperature := mem.accel_temperature[:]
	primitives.Float32__Array_to_Go(m.AccelTemperature[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_temperature)))
	cSlice_accel_offset_0 := mem.accel_offset_0[:]
	primitives.Float32__Array_to_Go(m.AccelOffset0[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_offset_0)))
	cSlice_accel_offset_1 := mem.accel_offset_1[:]
	primitives.Float32__Array_to_Go(m.AccelOffset1[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_offset_1)))
	cSlice_accel_offset_2 := mem.accel_offset_2[:]
	primitives.Float32__Array_to_Go(m.AccelOffset2[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_offset_2)))
	cSlice_accel_offset_3 := mem.accel_offset_3[:]
	primitives.Float32__Array_to_Go(m.AccelOffset3[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_accel_offset_3)))
	cSlice_gyro_device_ids := mem.gyro_device_ids[:]
	primitives.Uint32__Array_to_Go(m.GyroDeviceIds[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_gyro_device_ids)))
	cSlice_gyro_temperature := mem.gyro_temperature[:]
	primitives.Float32__Array_to_Go(m.GyroTemperature[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_temperature)))
	cSlice_gyro_offset_0 := mem.gyro_offset_0[:]
	primitives.Float32__Array_to_Go(m.GyroOffset0[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_offset_0)))
	cSlice_gyro_offset_1 := mem.gyro_offset_1[:]
	primitives.Float32__Array_to_Go(m.GyroOffset1[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_offset_1)))
	cSlice_gyro_offset_2 := mem.gyro_offset_2[:]
	primitives.Float32__Array_to_Go(m.GyroOffset2[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_offset_2)))
	cSlice_gyro_offset_3 := mem.gyro_offset_3[:]
	primitives.Float32__Array_to_Go(m.GyroOffset3[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gyro_offset_3)))
	cSlice_mag_device_ids := mem.mag_device_ids[:]
	primitives.Uint32__Array_to_Go(m.MagDeviceIds[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_mag_device_ids)))
	cSlice_mag_temperature := mem.mag_temperature[:]
	primitives.Float32__Array_to_Go(m.MagTemperature[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_temperature)))
	cSlice_mag_offset_0 := mem.mag_offset_0[:]
	primitives.Float32__Array_to_Go(m.MagOffset0[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_offset_0)))
	cSlice_mag_offset_1 := mem.mag_offset_1[:]
	primitives.Float32__Array_to_Go(m.MagOffset1[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_offset_1)))
	cSlice_mag_offset_2 := mem.mag_offset_2[:]
	primitives.Float32__Array_to_Go(m.MagOffset2[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_offset_2)))
	cSlice_mag_offset_3 := mem.mag_offset_3[:]
	primitives.Float32__Array_to_Go(m.MagOffset3[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_offset_3)))
	cSlice_baro_device_ids := mem.baro_device_ids[:]
	primitives.Uint32__Array_to_Go(m.BaroDeviceIds[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_baro_device_ids)))
	cSlice_baro_temperature := mem.baro_temperature[:]
	primitives.Float32__Array_to_Go(m.BaroTemperature[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_baro_temperature)))
	m.BaroOffset0 = float32(mem.baro_offset_0)
	m.BaroOffset1 = float32(mem.baro_offset_1)
	m.BaroOffset2 = float32(mem.baro_offset_2)
	m.BaroOffset3 = float32(mem.baro_offset_3)
}

func (t _SensorCorrectionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorCorrection())
}

type CSensorCorrection = C.px4_msgs__msg__SensorCorrection
type CSensorCorrection__Sequence = C.px4_msgs__msg__SensorCorrection__Sequence

func SensorCorrection__Sequence_to_Go(goSlice *[]SensorCorrection, cSlice CSensorCorrection__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorCorrection, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorCorrectionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorCorrection__Sequence_to_C(cSlice *CSensorCorrection__Sequence, goSlice []SensorCorrection) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorCorrection)(C.malloc(C.sizeof_struct_px4_msgs__msg__SensorCorrection * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorCorrectionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorCorrection__Array_to_Go(goSlice []SensorCorrection, cSlice []CSensorCorrection) {
	for i := 0; i < len(cSlice); i++ {
		SensorCorrectionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorCorrection__Array_to_C(cSlice []CSensorCorrection, goSlice []SensorCorrection) {
	for i := 0; i < len(goSlice); i++ {
		SensorCorrectionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
