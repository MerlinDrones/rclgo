// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/message_format_response.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/MessageFormatResponse", MessageFormatResponseTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/MessageFormatResponse", MessageFormatResponseTypeSupport)
}

type MessageFormatResponse struct {
	Timestamp       uint64   `yaml:"timestamp"`        // time since system start (microseconds)
	ProtocolVersion uint16   `yaml:"protocol_version"` // Must be set to LATEST_PROTOCOL_VERSION. Do not change this field, it must be the first field after the timestamp
	TopicName       [50]byte `yaml:"topic_name"`       // E.g. /fmu/in/vehicle_command
	Success         bool     `yaml:"success"`
	MessageHash     uint32   `yaml:"message_hash"` // hash over all message fields
}

// NewMessageFormatResponse creates a new MessageFormatResponse with default values.
func NewMessageFormatResponse() *MessageFormatResponse {
	self := MessageFormatResponse{}
	self.SetDefaults()
	return &self
}

func (t *MessageFormatResponse) Clone() *MessageFormatResponse {
	c := &MessageFormatResponse{}
	c.Timestamp = t.Timestamp
	c.ProtocolVersion = t.ProtocolVersion
	c.TopicName = t.TopicName
	c.Success = t.Success
	c.MessageHash = t.MessageHash
	return c
}

func (t *MessageFormatResponse) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MessageFormatResponse) SetDefaults() {
	t.Timestamp = 0
	t.ProtocolVersion = 0
	t.TopicName = [50]byte{}
	t.Success = false
	t.MessageHash = 0
}

func (t *MessageFormatResponse) GetTypeSupport() types.MessageTypeSupport {
	return MessageFormatResponseTypeSupport
}

// MessageFormatResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MessageFormatResponsePublisher struct {
	*rclgo.Publisher
}

// NewMessageFormatResponsePublisher creates and returns a new publisher for the
// MessageFormatResponse
func NewMessageFormatResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MessageFormatResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, MessageFormatResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MessageFormatResponsePublisher{pub}, nil
}

func (p *MessageFormatResponsePublisher) Publish(msg *MessageFormatResponse) error {
	return p.Publisher.Publish(msg)
}

// MessageFormatResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MessageFormatResponseSubscription struct {
	*rclgo.Subscription
}

// MessageFormatResponseSubscriptionCallback type is used to provide a subscription
// handler function for a MessageFormatResponseSubscription.
type MessageFormatResponseSubscriptionCallback func(msg *MessageFormatResponse, info *rclgo.MessageInfo, err error)

// NewMessageFormatResponseSubscription creates and returns a new subscription for the
// MessageFormatResponse
func NewMessageFormatResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MessageFormatResponseSubscriptionCallback) (*MessageFormatResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MessageFormatResponse
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MessageFormatResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MessageFormatResponseSubscription{sub}, nil
}

func (s *MessageFormatResponseSubscription) TakeMessage(out *MessageFormatResponse) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMessageFormatResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMessageFormatResponseSlice(dst, src []MessageFormatResponse) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MessageFormatResponseTypeSupport types.MessageTypeSupport = _MessageFormatResponseTypeSupport{}

type _MessageFormatResponseTypeSupport struct{}

func (t _MessageFormatResponseTypeSupport) New() types.Message {
	return NewMessageFormatResponse()
}

func (t _MessageFormatResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__MessageFormatResponse
	return (unsafe.Pointer)(C.px4_msgs__msg__MessageFormatResponse__create())
}

func (t _MessageFormatResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__MessageFormatResponse__destroy((*C.px4_msgs__msg__MessageFormatResponse)(pointer_to_free))
}

func (t _MessageFormatResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MessageFormatResponse)
	mem := (*C.px4_msgs__msg__MessageFormatResponse)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.protocol_version = C.uint16_t(m.ProtocolVersion)
	cSlice_topic_name := mem.topic_name[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_topic_name)), m.TopicName[:])
	mem.success = C.bool(m.Success)
	mem.message_hash = C.uint32_t(m.MessageHash)
}

func (t _MessageFormatResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MessageFormatResponse)
	mem := (*C.px4_msgs__msg__MessageFormatResponse)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.ProtocolVersion = uint16(mem.protocol_version)
	cSlice_topic_name := mem.topic_name[:]
	primitives.Char__Array_to_Go(m.TopicName[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_topic_name)))
	m.Success = bool(mem.success)
	m.MessageHash = uint32(mem.message_hash)
}

func (t _MessageFormatResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__MessageFormatResponse())
}

type CMessageFormatResponse = C.px4_msgs__msg__MessageFormatResponse
type CMessageFormatResponse__Sequence = C.px4_msgs__msg__MessageFormatResponse__Sequence

func MessageFormatResponse__Sequence_to_Go(goSlice *[]MessageFormatResponse, cSlice CMessageFormatResponse__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MessageFormatResponse, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MessageFormatResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MessageFormatResponse__Sequence_to_C(cSlice *CMessageFormatResponse__Sequence, goSlice []MessageFormatResponse) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__MessageFormatResponse)(C.malloc(C.sizeof_struct_px4_msgs__msg__MessageFormatResponse * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MessageFormatResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MessageFormatResponse__Array_to_Go(goSlice []MessageFormatResponse, cSlice []CMessageFormatResponse) {
	for i := 0; i < len(cSlice); i++ {
		MessageFormatResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MessageFormatResponse__Array_to_C(cSlice []CMessageFormatResponse, goSlice []MessageFormatResponse) {
	for i := 0; i < len(goSlice); i++ {
		MessageFormatResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
