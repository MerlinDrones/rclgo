// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleStatus", VehicleStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleStatus", VehicleStatusTypeSupport)
}

const (
	VehicleStatus_ARMING_STATE_DISARMED                   uint8  = 1
	VehicleStatus_ARMING_STATE_ARMED                      uint8  = 2
	VehicleStatus_ARM_DISARM_REASON_TRANSITION_TO_STANDBY uint8  = 0
	VehicleStatus_ARM_DISARM_REASON_STICK_GESTURE         uint8  = 1
	VehicleStatus_ARM_DISARM_REASON_RC_SWITCH             uint8  = 2
	VehicleStatus_ARM_DISARM_REASON_COMMAND_INTERNAL      uint8  = 3
	VehicleStatus_ARM_DISARM_REASON_COMMAND_EXTERNAL      uint8  = 4
	VehicleStatus_ARM_DISARM_REASON_MISSION_START         uint8  = 5
	VehicleStatus_ARM_DISARM_REASON_SAFETY_BUTTON         uint8  = 6
	VehicleStatus_ARM_DISARM_REASON_AUTO_DISARM_LAND      uint8  = 7
	VehicleStatus_ARM_DISARM_REASON_AUTO_DISARM_PREFLIGHT uint8  = 8
	VehicleStatus_ARM_DISARM_REASON_KILL_SWITCH           uint8  = 9
	VehicleStatus_ARM_DISARM_REASON_LOCKDOWN              uint8  = 10
	VehicleStatus_ARM_DISARM_REASON_FAILURE_DETECTOR      uint8  = 11
	VehicleStatus_ARM_DISARM_REASON_SHUTDOWN              uint8  = 12
	VehicleStatus_ARM_DISARM_REASON_UNIT_TEST             uint8  = 13
	VehicleStatus_NAVIGATION_STATE_MANUAL                 uint8  = 0 // Manual mode
	VehicleStatus_NAVIGATION_STATE_ALTCTL                 uint8  = 1 // Altitude control mode
	VehicleStatus_NAVIGATION_STATE_POSCTL                 uint8  = 2 // Position control mode
	VehicleStatus_NAVIGATION_STATE_AUTO_MISSION           uint8  = 3 // Auto mission mode
	VehicleStatus_NAVIGATION_STATE_AUTO_LOITER            uint8  = 4 // Auto loiter mode
	VehicleStatus_NAVIGATION_STATE_AUTO_RTL               uint8  = 5 // Auto return to launch mode
	VehicleStatus_NAVIGATION_STATE_POSITION_SLOW          uint8  = 6
	VehicleStatus_NAVIGATION_STATE_FREE5                  uint8  = 7
	VehicleStatus_NAVIGATION_STATE_FREE4                  uint8  = 8
	VehicleStatus_NAVIGATION_STATE_FREE3                  uint8  = 9
	VehicleStatus_NAVIGATION_STATE_ACRO                   uint8  = 10 // Acro mode
	VehicleStatus_NAVIGATION_STATE_FREE2                  uint8  = 11
	VehicleStatus_NAVIGATION_STATE_DESCEND                uint8  = 12 // Descend mode (no position control)
	VehicleStatus_NAVIGATION_STATE_TERMINATION            uint8  = 13 // Termination mode
	VehicleStatus_NAVIGATION_STATE_OFFBOARD               uint8  = 14
	VehicleStatus_NAVIGATION_STATE_STAB                   uint8  = 15 // Stabilized mode
	VehicleStatus_NAVIGATION_STATE_FREE1                  uint8  = 16
	VehicleStatus_NAVIGATION_STATE_AUTO_TAKEOFF           uint8  = 17 // Takeoff
	VehicleStatus_NAVIGATION_STATE_AUTO_LAND              uint8  = 18 // Land
	VehicleStatus_NAVIGATION_STATE_AUTO_FOLLOW_TARGET     uint8  = 19 // Auto Follow
	VehicleStatus_NAVIGATION_STATE_AUTO_PRECLAND          uint8  = 20 // Precision land with landing target
	VehicleStatus_NAVIGATION_STATE_ORBIT                  uint8  = 21 // Orbit in a circle
	VehicleStatus_NAVIGATION_STATE_AUTO_VTOL_TAKEOFF      uint8  = 22 // Takeoff, transition, establish loiter
	VehicleStatus_NAVIGATION_STATE_EXTERNAL1              uint8  = 23
	VehicleStatus_NAVIGATION_STATE_EXTERNAL2              uint8  = 24
	VehicleStatus_NAVIGATION_STATE_EXTERNAL3              uint8  = 25
	VehicleStatus_NAVIGATION_STATE_EXTERNAL4              uint8  = 26
	VehicleStatus_NAVIGATION_STATE_EXTERNAL5              uint8  = 27
	VehicleStatus_NAVIGATION_STATE_EXTERNAL6              uint8  = 28
	VehicleStatus_NAVIGATION_STATE_EXTERNAL7              uint8  = 29
	VehicleStatus_NAVIGATION_STATE_EXTERNAL8              uint8  = 30
	VehicleStatus_NAVIGATION_STATE_MAX                    uint8  = 31
	VehicleStatus_FAILURE_NONE                            uint16 = 0
	VehicleStatus_FAILURE_ROLL                            uint16 = 1   // (1 << 0)
	VehicleStatus_FAILURE_PITCH                           uint16 = 2   // (1 << 1)
	VehicleStatus_FAILURE_ALT                             uint16 = 4   // (1 << 2)
	VehicleStatus_FAILURE_EXT                             uint16 = 8   // (1 << 3)
	VehicleStatus_FAILURE_ARM_ESC                         uint16 = 16  // (1 << 4)
	VehicleStatus_FAILURE_BATTERY                         uint16 = 32  // (1 << 5)
	VehicleStatus_FAILURE_IMBALANCED_PROP                 uint16 = 64  // (1 << 6)
	VehicleStatus_FAILURE_MOTOR                           uint16 = 128 // (1 << 7)
	VehicleStatus_HIL_STATE_OFF                           uint8  = 0
	VehicleStatus_HIL_STATE_ON                            uint8  = 1
	VehicleStatus_VEHICLE_TYPE_UNKNOWN                    uint8  = 0
	VehicleStatus_VEHICLE_TYPE_ROTARY_WING                uint8  = 1
	VehicleStatus_VEHICLE_TYPE_FIXED_WING                 uint8  = 2
	VehicleStatus_VEHICLE_TYPE_ROVER                      uint8  = 3
	VehicleStatus_VEHICLE_TYPE_AIRSHIP                    uint8  = 4
	VehicleStatus_FAILSAFE_DEFER_STATE_DISABLED           uint8  = 0
	VehicleStatus_FAILSAFE_DEFER_STATE_ENABLED            uint8  = 1
	VehicleStatus_FAILSAFE_DEFER_STATE_WOULD_FAILSAFE     uint8  = 2 // Failsafes deferred, but would trigger a failsafe
)

type VehicleStatus struct {
	Timestamp                uint64 `yaml:"timestamp"`    // time since system start (microseconds)
	ArmedTime                uint64 `yaml:"armed_time"`   // Arming timestamp (microseconds)
	TakeoffTime              uint64 `yaml:"takeoff_time"` // Takeoff timestamp (microseconds)
	ArmingState              uint8  `yaml:"arming_state"`
	LatestArmingReason       uint8  `yaml:"latest_arming_reason"`
	LatestDisarmingReason    uint8  `yaml:"latest_disarming_reason"`
	NavStateTimestamp        uint64 `yaml:"nav_state_timestamp"`      // time when current nav_state activated
	NavStateUserIntention    uint8  `yaml:"nav_state_user_intention"` // Mode that the user selected (might be different from nav_state in a failsafe situation)
	NavState                 uint8  `yaml:"nav_state"`                // Currently active mode
	ExecutorInCharge         uint8  `yaml:"executor_in_charge"`       // Current mode executor in charge (0=Autopilot)
	ValidNavStatesMask       uint32 `yaml:"valid_nav_states_mask"`    // Bitmask for all valid nav_state values
	CanSetNavStatesMask      uint32 `yaml:"can_set_nav_states_mask"`  // Bitmask for all modes that a user can select
	FailureDetectorStatus    uint16 `yaml:"failure_detector_status"`  // Bitmask of detected failures
	HilState                 uint8  `yaml:"hil_state"`
	VehicleType              uint8  `yaml:"vehicle_type"`                // If it's a VTOL, then the value will be VEHICLE_TYPE_ROTARY_WING while flying as a multicopter, and VEHICLE_TYPE_FIXED_WING when flying as a fixed-wing
	Failsafe                 bool   `yaml:"failsafe"`                    // true if system is in failsafe state (e.g.:RTL, Hover, Terminate, ...)
	FailsafeAndUserTookOver  bool   `yaml:"failsafe_and_user_took_over"` // true if system is in failsafe state but the user took over control
	FailsafeDeferState       uint8  `yaml:"failsafe_defer_state"`        // one of FAILSAFE_DEFER_STATE_*
	GcsConnectionLost        bool   `yaml:"gcs_connection_lost"`         // datalink to GCS lost. Link loss
	GcsConnectionLostCounter uint8  `yaml:"gcs_connection_lost_counter"` // counts unique GCS connection lost events
	HighLatencyDataLinkLost  bool   `yaml:"high_latency_data_link_lost"` // Set to true if the high latency data link (eg. RockBlock Iridium 9603 telemetry module) is lost
	IsVtol                   bool   `yaml:"is_vtol"`                     // True if the system is VTOL capable. VTOL flags
	IsVtolTailsitter         bool   `yaml:"is_vtol_tailsitter"`          // True if the system performs a 90Â° pitch down rotation during transition from MC to FW
	InTransitionMode         bool   `yaml:"in_transition_mode"`          // True if VTOL is doing a transition
	InTransitionToFw         bool   `yaml:"in_transition_to_fw"`         // True if VTOL is doing a transition from MC to FW
	SystemType               uint8  `yaml:"system_type"`                 // system type, contains mavlink MAV_TYPE. MAVLink identification
	SystemId                 uint8  `yaml:"system_id"`                   // system id, contains MAVLink's system ID field
	ComponentId              uint8  `yaml:"component_id"`                // subsystem / component id, contains MAVLink's component ID field
	SafetyButtonAvailable    bool   `yaml:"safety_button_available"`     // Set to true if a safety button is connected
	SafetyOff                bool   `yaml:"safety_off"`                  // Set to true if safety is off
	PowerInputValid          bool   `yaml:"power_input_valid"`           // set if input power is valid
	UsbConnected             bool   `yaml:"usb_connected"`               // set to true (never cleared) once telemetry received from usb link
	OpenDroneIdSystemPresent bool   `yaml:"open_drone_id_system_present"`
	OpenDroneIdSystemHealthy bool   `yaml:"open_drone_id_system_healthy"`
	ParachuteSystemPresent   bool   `yaml:"parachute_system_present"`
	ParachuteSystemHealthy   bool   `yaml:"parachute_system_healthy"`
	AvoidanceSystemRequired  bool   `yaml:"avoidance_system_required"` // Set to true if avoidance system is enabled via COM_OBS_AVOID parameter
	AvoidanceSystemValid     bool   `yaml:"avoidance_system_valid"`    // Status of the obstacle avoidance system
	RcCalibrationInProgress  bool   `yaml:"rc_calibration_in_progress"`
	CalibrationEnabled       bool   `yaml:"calibration_enabled"`
	PreFlightChecksPass      bool   `yaml:"pre_flight_checks_pass"` // true if all checks necessary to arm pass
}

// NewVehicleStatus creates a new VehicleStatus with default values.
func NewVehicleStatus() *VehicleStatus {
	self := VehicleStatus{}
	self.SetDefaults()
	return &self
}

func (t *VehicleStatus) Clone() *VehicleStatus {
	c := &VehicleStatus{}
	c.Timestamp = t.Timestamp
	c.ArmedTime = t.ArmedTime
	c.TakeoffTime = t.TakeoffTime
	c.ArmingState = t.ArmingState
	c.LatestArmingReason = t.LatestArmingReason
	c.LatestDisarmingReason = t.LatestDisarmingReason
	c.NavStateTimestamp = t.NavStateTimestamp
	c.NavStateUserIntention = t.NavStateUserIntention
	c.NavState = t.NavState
	c.ExecutorInCharge = t.ExecutorInCharge
	c.ValidNavStatesMask = t.ValidNavStatesMask
	c.CanSetNavStatesMask = t.CanSetNavStatesMask
	c.FailureDetectorStatus = t.FailureDetectorStatus
	c.HilState = t.HilState
	c.VehicleType = t.VehicleType
	c.Failsafe = t.Failsafe
	c.FailsafeAndUserTookOver = t.FailsafeAndUserTookOver
	c.FailsafeDeferState = t.FailsafeDeferState
	c.GcsConnectionLost = t.GcsConnectionLost
	c.GcsConnectionLostCounter = t.GcsConnectionLostCounter
	c.HighLatencyDataLinkLost = t.HighLatencyDataLinkLost
	c.IsVtol = t.IsVtol
	c.IsVtolTailsitter = t.IsVtolTailsitter
	c.InTransitionMode = t.InTransitionMode
	c.InTransitionToFw = t.InTransitionToFw
	c.SystemType = t.SystemType
	c.SystemId = t.SystemId
	c.ComponentId = t.ComponentId
	c.SafetyButtonAvailable = t.SafetyButtonAvailable
	c.SafetyOff = t.SafetyOff
	c.PowerInputValid = t.PowerInputValid
	c.UsbConnected = t.UsbConnected
	c.OpenDroneIdSystemPresent = t.OpenDroneIdSystemPresent
	c.OpenDroneIdSystemHealthy = t.OpenDroneIdSystemHealthy
	c.ParachuteSystemPresent = t.ParachuteSystemPresent
	c.ParachuteSystemHealthy = t.ParachuteSystemHealthy
	c.AvoidanceSystemRequired = t.AvoidanceSystemRequired
	c.AvoidanceSystemValid = t.AvoidanceSystemValid
	c.RcCalibrationInProgress = t.RcCalibrationInProgress
	c.CalibrationEnabled = t.CalibrationEnabled
	c.PreFlightChecksPass = t.PreFlightChecksPass
	return c
}

func (t *VehicleStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleStatus) SetDefaults() {
	t.Timestamp = 0
	t.ArmedTime = 0
	t.TakeoffTime = 0
	t.ArmingState = 0
	t.LatestArmingReason = 0
	t.LatestDisarmingReason = 0
	t.NavStateTimestamp = 0
	t.NavStateUserIntention = 0
	t.NavState = 0
	t.ExecutorInCharge = 0
	t.ValidNavStatesMask = 0
	t.CanSetNavStatesMask = 0
	t.FailureDetectorStatus = 0
	t.HilState = 0
	t.VehicleType = 0
	t.Failsafe = false
	t.FailsafeAndUserTookOver = false
	t.FailsafeDeferState = 0
	t.GcsConnectionLost = false
	t.GcsConnectionLostCounter = 0
	t.HighLatencyDataLinkLost = false
	t.IsVtol = false
	t.IsVtolTailsitter = false
	t.InTransitionMode = false
	t.InTransitionToFw = false
	t.SystemType = 0
	t.SystemId = 0
	t.ComponentId = 0
	t.SafetyButtonAvailable = false
	t.SafetyOff = false
	t.PowerInputValid = false
	t.UsbConnected = false
	t.OpenDroneIdSystemPresent = false
	t.OpenDroneIdSystemHealthy = false
	t.ParachuteSystemPresent = false
	t.ParachuteSystemHealthy = false
	t.AvoidanceSystemRequired = false
	t.AvoidanceSystemValid = false
	t.RcCalibrationInProgress = false
	t.CalibrationEnabled = false
	t.PreFlightChecksPass = false
}

func (t *VehicleStatus) GetTypeSupport() types.MessageTypeSupport {
	return VehicleStatusTypeSupport
}

// VehicleStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleStatusPublisher struct {
	*rclgo.Publisher
}

// NewVehicleStatusPublisher creates and returns a new publisher for the
// VehicleStatus
func NewVehicleStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleStatusPublisher{pub}, nil
}

func (p *VehicleStatusPublisher) Publish(msg *VehicleStatus) error {
	return p.Publisher.Publish(msg)
}

// VehicleStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleStatusSubscription struct {
	*rclgo.Subscription
}

// VehicleStatusSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleStatusSubscription.
type VehicleStatusSubscriptionCallback func(msg *VehicleStatus, info *rclgo.MessageInfo, err error)

// NewVehicleStatusSubscription creates and returns a new subscription for the
// VehicleStatus
func NewVehicleStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleStatusSubscriptionCallback) (*VehicleStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleStatusSubscription{sub}, nil
}

func (s *VehicleStatusSubscription) TakeMessage(out *VehicleStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleStatusSlice(dst, src []VehicleStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleStatusTypeSupport types.MessageTypeSupport = _VehicleStatusTypeSupport{}

type _VehicleStatusTypeSupport struct{}

func (t _VehicleStatusTypeSupport) New() types.Message {
	return NewVehicleStatus()
}

func (t _VehicleStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleStatus__create())
}

func (t _VehicleStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleStatus__destroy((*C.px4_msgs__msg__VehicleStatus)(pointer_to_free))
}

func (t _VehicleStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleStatus)
	mem := (*C.px4_msgs__msg__VehicleStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.armed_time = C.uint64_t(m.ArmedTime)
	mem.takeoff_time = C.uint64_t(m.TakeoffTime)
	mem.arming_state = C.uint8_t(m.ArmingState)
	mem.latest_arming_reason = C.uint8_t(m.LatestArmingReason)
	mem.latest_disarming_reason = C.uint8_t(m.LatestDisarmingReason)
	mem.nav_state_timestamp = C.uint64_t(m.NavStateTimestamp)
	mem.nav_state_user_intention = C.uint8_t(m.NavStateUserIntention)
	mem.nav_state = C.uint8_t(m.NavState)
	mem.executor_in_charge = C.uint8_t(m.ExecutorInCharge)
	mem.valid_nav_states_mask = C.uint32_t(m.ValidNavStatesMask)
	mem.can_set_nav_states_mask = C.uint32_t(m.CanSetNavStatesMask)
	mem.failure_detector_status = C.uint16_t(m.FailureDetectorStatus)
	mem.hil_state = C.uint8_t(m.HilState)
	mem.vehicle_type = C.uint8_t(m.VehicleType)
	mem.failsafe = C.bool(m.Failsafe)
	mem.failsafe_and_user_took_over = C.bool(m.FailsafeAndUserTookOver)
	mem.failsafe_defer_state = C.uint8_t(m.FailsafeDeferState)
	mem.gcs_connection_lost = C.bool(m.GcsConnectionLost)
	mem.gcs_connection_lost_counter = C.uint8_t(m.GcsConnectionLostCounter)
	mem.high_latency_data_link_lost = C.bool(m.HighLatencyDataLinkLost)
	mem.is_vtol = C.bool(m.IsVtol)
	mem.is_vtol_tailsitter = C.bool(m.IsVtolTailsitter)
	mem.in_transition_mode = C.bool(m.InTransitionMode)
	mem.in_transition_to_fw = C.bool(m.InTransitionToFw)
	mem.system_type = C.uint8_t(m.SystemType)
	mem.system_id = C.uint8_t(m.SystemId)
	mem.component_id = C.uint8_t(m.ComponentId)
	mem.safety_button_available = C.bool(m.SafetyButtonAvailable)
	mem.safety_off = C.bool(m.SafetyOff)
	mem.power_input_valid = C.bool(m.PowerInputValid)
	mem.usb_connected = C.bool(m.UsbConnected)
	mem.open_drone_id_system_present = C.bool(m.OpenDroneIdSystemPresent)
	mem.open_drone_id_system_healthy = C.bool(m.OpenDroneIdSystemHealthy)
	mem.parachute_system_present = C.bool(m.ParachuteSystemPresent)
	mem.parachute_system_healthy = C.bool(m.ParachuteSystemHealthy)
	mem.avoidance_system_required = C.bool(m.AvoidanceSystemRequired)
	mem.avoidance_system_valid = C.bool(m.AvoidanceSystemValid)
	mem.rc_calibration_in_progress = C.bool(m.RcCalibrationInProgress)
	mem.calibration_enabled = C.bool(m.CalibrationEnabled)
	mem.pre_flight_checks_pass = C.bool(m.PreFlightChecksPass)
}

func (t _VehicleStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleStatus)
	mem := (*C.px4_msgs__msg__VehicleStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.ArmedTime = uint64(mem.armed_time)
	m.TakeoffTime = uint64(mem.takeoff_time)
	m.ArmingState = uint8(mem.arming_state)
	m.LatestArmingReason = uint8(mem.latest_arming_reason)
	m.LatestDisarmingReason = uint8(mem.latest_disarming_reason)
	m.NavStateTimestamp = uint64(mem.nav_state_timestamp)
	m.NavStateUserIntention = uint8(mem.nav_state_user_intention)
	m.NavState = uint8(mem.nav_state)
	m.ExecutorInCharge = uint8(mem.executor_in_charge)
	m.ValidNavStatesMask = uint32(mem.valid_nav_states_mask)
	m.CanSetNavStatesMask = uint32(mem.can_set_nav_states_mask)
	m.FailureDetectorStatus = uint16(mem.failure_detector_status)
	m.HilState = uint8(mem.hil_state)
	m.VehicleType = uint8(mem.vehicle_type)
	m.Failsafe = bool(mem.failsafe)
	m.FailsafeAndUserTookOver = bool(mem.failsafe_and_user_took_over)
	m.FailsafeDeferState = uint8(mem.failsafe_defer_state)
	m.GcsConnectionLost = bool(mem.gcs_connection_lost)
	m.GcsConnectionLostCounter = uint8(mem.gcs_connection_lost_counter)
	m.HighLatencyDataLinkLost = bool(mem.high_latency_data_link_lost)
	m.IsVtol = bool(mem.is_vtol)
	m.IsVtolTailsitter = bool(mem.is_vtol_tailsitter)
	m.InTransitionMode = bool(mem.in_transition_mode)
	m.InTransitionToFw = bool(mem.in_transition_to_fw)
	m.SystemType = uint8(mem.system_type)
	m.SystemId = uint8(mem.system_id)
	m.ComponentId = uint8(mem.component_id)
	m.SafetyButtonAvailable = bool(mem.safety_button_available)
	m.SafetyOff = bool(mem.safety_off)
	m.PowerInputValid = bool(mem.power_input_valid)
	m.UsbConnected = bool(mem.usb_connected)
	m.OpenDroneIdSystemPresent = bool(mem.open_drone_id_system_present)
	m.OpenDroneIdSystemHealthy = bool(mem.open_drone_id_system_healthy)
	m.ParachuteSystemPresent = bool(mem.parachute_system_present)
	m.ParachuteSystemHealthy = bool(mem.parachute_system_healthy)
	m.AvoidanceSystemRequired = bool(mem.avoidance_system_required)
	m.AvoidanceSystemValid = bool(mem.avoidance_system_valid)
	m.RcCalibrationInProgress = bool(mem.rc_calibration_in_progress)
	m.CalibrationEnabled = bool(mem.calibration_enabled)
	m.PreFlightChecksPass = bool(mem.pre_flight_checks_pass)
}

func (t _VehicleStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleStatus())
}

type CVehicleStatus = C.px4_msgs__msg__VehicleStatus
type CVehicleStatus__Sequence = C.px4_msgs__msg__VehicleStatus__Sequence

func VehicleStatus__Sequence_to_Go(goSlice *[]VehicleStatus, cSlice CVehicleStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleStatus__Sequence_to_C(cSlice *CVehicleStatus__Sequence, goSlice []VehicleStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleStatus__Array_to_Go(goSlice []VehicleStatus, cSlice []CVehicleStatus) {
	for i := 0; i < len(cSlice); i++ {
		VehicleStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleStatus__Array_to_C(cSlice []CVehicleStatus, goSlice []VehicleStatus) {
	for i := 0; i < len(goSlice); i++ {
		VehicleStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
