// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/system_power.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SystemPower", SystemPowerTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SystemPower", SystemPowerTypeSupport)
}

const (
	SystemPower_BRICK1_VALID_SHIFTS uint8 = 0
	SystemPower_BRICK1_VALID_MASK   uint8 = 1
	SystemPower_BRICK2_VALID_SHIFTS uint8 = 1
	SystemPower_BRICK2_VALID_MASK   uint8 = 2
	SystemPower_BRICK3_VALID_SHIFTS uint8 = 2
	SystemPower_BRICK3_VALID_MASK   uint8 = 4
	SystemPower_BRICK4_VALID_SHIFTS uint8 = 3
	SystemPower_BRICK4_VALID_MASK   uint8 = 8
)

type SystemPower struct {
	Timestamp       uint64     `yaml:"timestamp"`          // time since system start (microseconds)
	Voltage5vV      float32    `yaml:"voltage5v_v"`        // peripheral 5V rail voltage
	Sensors3v3      [4]float32 `yaml:"sensors3v3"`         // Sensors 3V3 rail voltage
	Sensors3v3Valid uint8      `yaml:"sensors3v3_valid"`   // Sensors 3V3 rail voltage was read (bitfield).
	UsbConnected    uint8      `yaml:"usb_connected"`      // USB is connected when 1
	BrickValid      uint8      `yaml:"brick_valid"`        // brick bits power is good when bit 1
	UsbValid        uint8      `yaml:"usb_valid"`          // USB is valid when 1
	ServoValid      uint8      `yaml:"servo_valid"`        // servo power is good when 1
	Periph5vOc      uint8      `yaml:"periph_5v_oc"`       // peripheral overcurrent when 1
	Hipower5vOc     uint8      `yaml:"hipower_5v_oc"`      // high power peripheral overcurrent when 1
	Comp5vValid     uint8      `yaml:"comp_5v_valid"`      // 5V to companion valid
	Can1Gps15vValid uint8      `yaml:"can1_gps1_5v_valid"` // 5V for CAN1/GPS1 valid
}

// NewSystemPower creates a new SystemPower with default values.
func NewSystemPower() *SystemPower {
	self := SystemPower{}
	self.SetDefaults()
	return &self
}

func (t *SystemPower) Clone() *SystemPower {
	c := &SystemPower{}
	c.Timestamp = t.Timestamp
	c.Voltage5vV = t.Voltage5vV
	c.Sensors3v3 = t.Sensors3v3
	c.Sensors3v3Valid = t.Sensors3v3Valid
	c.UsbConnected = t.UsbConnected
	c.BrickValid = t.BrickValid
	c.UsbValid = t.UsbValid
	c.ServoValid = t.ServoValid
	c.Periph5vOc = t.Periph5vOc
	c.Hipower5vOc = t.Hipower5vOc
	c.Comp5vValid = t.Comp5vValid
	c.Can1Gps15vValid = t.Can1Gps15vValid
	return c
}

func (t *SystemPower) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SystemPower) SetDefaults() {
	t.Timestamp = 0
	t.Voltage5vV = 0
	t.Sensors3v3 = [4]float32{}
	t.Sensors3v3Valid = 0
	t.UsbConnected = 0
	t.BrickValid = 0
	t.UsbValid = 0
	t.ServoValid = 0
	t.Periph5vOc = 0
	t.Hipower5vOc = 0
	t.Comp5vValid = 0
	t.Can1Gps15vValid = 0
}

func (t *SystemPower) GetTypeSupport() types.MessageTypeSupport {
	return SystemPowerTypeSupport
}

// SystemPowerPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SystemPowerPublisher struct {
	*rclgo.Publisher
}

// NewSystemPowerPublisher creates and returns a new publisher for the
// SystemPower
func NewSystemPowerPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SystemPowerPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SystemPowerTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SystemPowerPublisher{pub}, nil
}

func (p *SystemPowerPublisher) Publish(msg *SystemPower) error {
	return p.Publisher.Publish(msg)
}

// SystemPowerSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SystemPowerSubscription struct {
	*rclgo.Subscription
}

// SystemPowerSubscriptionCallback type is used to provide a subscription
// handler function for a SystemPowerSubscription.
type SystemPowerSubscriptionCallback func(msg *SystemPower, info *rclgo.MessageInfo, err error)

// NewSystemPowerSubscription creates and returns a new subscription for the
// SystemPower
func NewSystemPowerSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SystemPowerSubscriptionCallback) (*SystemPowerSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SystemPower
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SystemPowerTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SystemPowerSubscription{sub}, nil
}

func (s *SystemPowerSubscription) TakeMessage(out *SystemPower) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSystemPowerSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSystemPowerSlice(dst, src []SystemPower) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SystemPowerTypeSupport types.MessageTypeSupport = _SystemPowerTypeSupport{}

type _SystemPowerTypeSupport struct{}

func (t _SystemPowerTypeSupport) New() types.Message {
	return NewSystemPower()
}

func (t _SystemPowerTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SystemPower
	return (unsafe.Pointer)(C.px4_msgs__msg__SystemPower__create())
}

func (t _SystemPowerTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SystemPower__destroy((*C.px4_msgs__msg__SystemPower)(pointer_to_free))
}

func (t _SystemPowerTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SystemPower)
	mem := (*C.px4_msgs__msg__SystemPower)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.voltage5v_v = C.float(m.Voltage5vV)
	cSlice_sensors3v3 := mem.sensors3v3[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_sensors3v3)), m.Sensors3v3[:])
	mem.sensors3v3_valid = C.uint8_t(m.Sensors3v3Valid)
	mem.usb_connected = C.uint8_t(m.UsbConnected)
	mem.brick_valid = C.uint8_t(m.BrickValid)
	mem.usb_valid = C.uint8_t(m.UsbValid)
	mem.servo_valid = C.uint8_t(m.ServoValid)
	mem.periph_5v_oc = C.uint8_t(m.Periph5vOc)
	mem.hipower_5v_oc = C.uint8_t(m.Hipower5vOc)
	mem.comp_5v_valid = C.uint8_t(m.Comp5vValid)
	mem.can1_gps1_5v_valid = C.uint8_t(m.Can1Gps15vValid)
}

func (t _SystemPowerTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SystemPower)
	mem := (*C.px4_msgs__msg__SystemPower)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Voltage5vV = float32(mem.voltage5v_v)
	cSlice_sensors3v3 := mem.sensors3v3[:]
	primitives.Float32__Array_to_Go(m.Sensors3v3[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_sensors3v3)))
	m.Sensors3v3Valid = uint8(mem.sensors3v3_valid)
	m.UsbConnected = uint8(mem.usb_connected)
	m.BrickValid = uint8(mem.brick_valid)
	m.UsbValid = uint8(mem.usb_valid)
	m.ServoValid = uint8(mem.servo_valid)
	m.Periph5vOc = uint8(mem.periph_5v_oc)
	m.Hipower5vOc = uint8(mem.hipower_5v_oc)
	m.Comp5vValid = uint8(mem.comp_5v_valid)
	m.Can1Gps15vValid = uint8(mem.can1_gps1_5v_valid)
}

func (t _SystemPowerTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SystemPower())
}

type CSystemPower = C.px4_msgs__msg__SystemPower
type CSystemPower__Sequence = C.px4_msgs__msg__SystemPower__Sequence

func SystemPower__Sequence_to_Go(goSlice *[]SystemPower, cSlice CSystemPower__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SystemPower, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SystemPowerTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SystemPower__Sequence_to_C(cSlice *CSystemPower__Sequence, goSlice []SystemPower) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SystemPower)(C.malloc(C.sizeof_struct_px4_msgs__msg__SystemPower * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SystemPowerTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SystemPower__Array_to_Go(goSlice []SystemPower, cSlice []CSystemPower) {
	for i := 0; i < len(cSlice); i++ {
		SystemPowerTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SystemPower__Array_to_C(cSlice []CSystemPower, goSlice []SystemPower) {
	for i := 0; i < len(goSlice); i++ {
		SystemPowerTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
