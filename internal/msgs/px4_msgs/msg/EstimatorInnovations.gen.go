// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/estimator_innovations.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/EstimatorInnovations", EstimatorInnovationsTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/EstimatorInnovations", EstimatorInnovationsTypeSupport)
}

type EstimatorInnovations struct {
	Timestamp       uint64     `yaml:"timestamp"`        // time since system start (microseconds)
	TimestampSample uint64     `yaml:"timestamp_sample"` // the timestamp of the raw data (microseconds)
	GpsHvel         [2]float32 `yaml:"gps_hvel"`         // horizontal GPS velocity innovation (m/sec) and innovation variance ((m/sec)**2). GPS
	GpsVvel         float32    `yaml:"gps_vvel"`         // vertical GPS velocity innovation (m/sec) and innovation variance ((m/sec)**2)
	GpsHpos         [2]float32 `yaml:"gps_hpos"`         // horizontal GPS position innovation (m) and innovation variance (m**2)
	GpsVpos         float32    `yaml:"gps_vpos"`         // vertical GPS position innovation (m) and innovation variance (m**2)
	EvHvel          [2]float32 `yaml:"ev_hvel"`          // horizontal external vision velocity innovation (m/sec) and innovation variance ((m/sec)**2). External Vision
	EvVvel          float32    `yaml:"ev_vvel"`          // vertical external vision velocity innovation (m/sec) and innovation variance ((m/sec)**2)
	EvHpos          [2]float32 `yaml:"ev_hpos"`          // horizontal external vision position innovation (m) and innovation variance (m**2)
	EvVpos          float32    `yaml:"ev_vpos"`          // vertical external vision position innovation (m) and innovation variance (m**2)
	RngVpos         float32    `yaml:"rng_vpos"`         // range sensor height innovation (m) and innovation variance (m**2). Height sensors
	BaroVpos        float32    `yaml:"baro_vpos"`        // barometer height innovation (m) and innovation variance (m**2)
	AuxHvel         [2]float32 `yaml:"aux_hvel"`         // horizontal auxiliary velocity innovation from landing target measurement (m/sec) and innovation variance ((m/sec)**2). Auxiliary velocity
	Flow            [2]float32 `yaml:"flow"`             // flow innvoation (rad/sec) and innovation variance ((rad/sec)**2). Optical flow
	Heading         float32    `yaml:"heading"`          // heading innovation (rad) and innovation variance (rad**2). Various
	MagField        [3]float32 `yaml:"mag_field"`        // earth magnetic field innovation (Gauss) and innovation variance (Gauss**2)
	Gravity         [3]float32 `yaml:"gravity"`          // gravity innovation from accelerometerr vector (m/s**2)
	Drag            [2]float32 `yaml:"drag"`             // drag specific force innovation (m/sec**2) and innovation variance ((m/sec)**2)
	Airspeed        float32    `yaml:"airspeed"`         // airspeed innovation (m/sec) and innovation variance ((m/sec)**2)
	Beta            float32    `yaml:"beta"`             // synthetic sideslip innovation (rad) and innovation variance (rad**2)
	Hagl            float32    `yaml:"hagl"`             // height of ground innovation (m) and innovation variance (m**2)
	HaglRate        float32    `yaml:"hagl_rate"`        // height of ground rate innovation (m/s) and innovation variance ((m/s)**2)
}

// NewEstimatorInnovations creates a new EstimatorInnovations with default values.
func NewEstimatorInnovations() *EstimatorInnovations {
	self := EstimatorInnovations{}
	self.SetDefaults()
	return &self
}

func (t *EstimatorInnovations) Clone() *EstimatorInnovations {
	c := &EstimatorInnovations{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.GpsHvel = t.GpsHvel
	c.GpsVvel = t.GpsVvel
	c.GpsHpos = t.GpsHpos
	c.GpsVpos = t.GpsVpos
	c.EvHvel = t.EvHvel
	c.EvVvel = t.EvVvel
	c.EvHpos = t.EvHpos
	c.EvVpos = t.EvVpos
	c.RngVpos = t.RngVpos
	c.BaroVpos = t.BaroVpos
	c.AuxHvel = t.AuxHvel
	c.Flow = t.Flow
	c.Heading = t.Heading
	c.MagField = t.MagField
	c.Gravity = t.Gravity
	c.Drag = t.Drag
	c.Airspeed = t.Airspeed
	c.Beta = t.Beta
	c.Hagl = t.Hagl
	c.HaglRate = t.HaglRate
	return c
}

func (t *EstimatorInnovations) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EstimatorInnovations) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.GpsHvel = [2]float32{}
	t.GpsVvel = 0
	t.GpsHpos = [2]float32{}
	t.GpsVpos = 0
	t.EvHvel = [2]float32{}
	t.EvVvel = 0
	t.EvHpos = [2]float32{}
	t.EvVpos = 0
	t.RngVpos = 0
	t.BaroVpos = 0
	t.AuxHvel = [2]float32{}
	t.Flow = [2]float32{}
	t.Heading = 0
	t.MagField = [3]float32{}
	t.Gravity = [3]float32{}
	t.Drag = [2]float32{}
	t.Airspeed = 0
	t.Beta = 0
	t.Hagl = 0
	t.HaglRate = 0
}

func (t *EstimatorInnovations) GetTypeSupport() types.MessageTypeSupport {
	return EstimatorInnovationsTypeSupport
}

// EstimatorInnovationsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EstimatorInnovationsPublisher struct {
	*rclgo.Publisher
}

// NewEstimatorInnovationsPublisher creates and returns a new publisher for the
// EstimatorInnovations
func NewEstimatorInnovationsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EstimatorInnovationsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EstimatorInnovationsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EstimatorInnovationsPublisher{pub}, nil
}

func (p *EstimatorInnovationsPublisher) Publish(msg *EstimatorInnovations) error {
	return p.Publisher.Publish(msg)
}

// EstimatorInnovationsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EstimatorInnovationsSubscription struct {
	*rclgo.Subscription
}

// EstimatorInnovationsSubscriptionCallback type is used to provide a subscription
// handler function for a EstimatorInnovationsSubscription.
type EstimatorInnovationsSubscriptionCallback func(msg *EstimatorInnovations, info *rclgo.MessageInfo, err error)

// NewEstimatorInnovationsSubscription creates and returns a new subscription for the
// EstimatorInnovations
func NewEstimatorInnovationsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EstimatorInnovationsSubscriptionCallback) (*EstimatorInnovationsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg EstimatorInnovations
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EstimatorInnovationsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EstimatorInnovationsSubscription{sub}, nil
}

func (s *EstimatorInnovationsSubscription) TakeMessage(out *EstimatorInnovations) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEstimatorInnovationsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEstimatorInnovationsSlice(dst, src []EstimatorInnovations) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EstimatorInnovationsTypeSupport types.MessageTypeSupport = _EstimatorInnovationsTypeSupport{}

type _EstimatorInnovationsTypeSupport struct{}

func (t _EstimatorInnovationsTypeSupport) New() types.Message {
	return NewEstimatorInnovations()
}

func (t _EstimatorInnovationsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorInnovations
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorInnovations__create())
}

func (t _EstimatorInnovationsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorInnovations__destroy((*C.px4_msgs__msg__EstimatorInnovations)(pointer_to_free))
}

func (t _EstimatorInnovationsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EstimatorInnovations)
	mem := (*C.px4_msgs__msg__EstimatorInnovations)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	cSlice_gps_hvel := mem.gps_hvel[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gps_hvel)), m.GpsHvel[:])
	mem.gps_vvel = C.float(m.GpsVvel)
	cSlice_gps_hpos := mem.gps_hpos[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gps_hpos)), m.GpsHpos[:])
	mem.gps_vpos = C.float(m.GpsVpos)
	cSlice_ev_hvel := mem.ev_hvel[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_ev_hvel)), m.EvHvel[:])
	mem.ev_vvel = C.float(m.EvVvel)
	cSlice_ev_hpos := mem.ev_hpos[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_ev_hpos)), m.EvHpos[:])
	mem.ev_vpos = C.float(m.EvVpos)
	mem.rng_vpos = C.float(m.RngVpos)
	mem.baro_vpos = C.float(m.BaroVpos)
	cSlice_aux_hvel := mem.aux_hvel[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_aux_hvel)), m.AuxHvel[:])
	cSlice_flow := mem.flow[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_flow)), m.Flow[:])
	mem.heading = C.float(m.Heading)
	cSlice_mag_field := mem.mag_field[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_field)), m.MagField[:])
	cSlice_gravity := mem.gravity[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gravity)), m.Gravity[:])
	cSlice_drag := mem.drag[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_drag)), m.Drag[:])
	mem.airspeed = C.float(m.Airspeed)
	mem.beta = C.float(m.Beta)
	mem.hagl = C.float(m.Hagl)
	mem.hagl_rate = C.float(m.HaglRate)
}

func (t _EstimatorInnovationsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EstimatorInnovations)
	mem := (*C.px4_msgs__msg__EstimatorInnovations)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	cSlice_gps_hvel := mem.gps_hvel[:]
	primitives.Float32__Array_to_Go(m.GpsHvel[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gps_hvel)))
	m.GpsVvel = float32(mem.gps_vvel)
	cSlice_gps_hpos := mem.gps_hpos[:]
	primitives.Float32__Array_to_Go(m.GpsHpos[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gps_hpos)))
	m.GpsVpos = float32(mem.gps_vpos)
	cSlice_ev_hvel := mem.ev_hvel[:]
	primitives.Float32__Array_to_Go(m.EvHvel[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_ev_hvel)))
	m.EvVvel = float32(mem.ev_vvel)
	cSlice_ev_hpos := mem.ev_hpos[:]
	primitives.Float32__Array_to_Go(m.EvHpos[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_ev_hpos)))
	m.EvVpos = float32(mem.ev_vpos)
	m.RngVpos = float32(mem.rng_vpos)
	m.BaroVpos = float32(mem.baro_vpos)
	cSlice_aux_hvel := mem.aux_hvel[:]
	primitives.Float32__Array_to_Go(m.AuxHvel[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_aux_hvel)))
	cSlice_flow := mem.flow[:]
	primitives.Float32__Array_to_Go(m.Flow[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_flow)))
	m.Heading = float32(mem.heading)
	cSlice_mag_field := mem.mag_field[:]
	primitives.Float32__Array_to_Go(m.MagField[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mag_field)))
	cSlice_gravity := mem.gravity[:]
	primitives.Float32__Array_to_Go(m.Gravity[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_gravity)))
	cSlice_drag := mem.drag[:]
	primitives.Float32__Array_to_Go(m.Drag[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_drag)))
	m.Airspeed = float32(mem.airspeed)
	m.Beta = float32(mem.beta)
	m.Hagl = float32(mem.hagl)
	m.HaglRate = float32(mem.hagl_rate)
}

func (t _EstimatorInnovationsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorInnovations())
}

type CEstimatorInnovations = C.px4_msgs__msg__EstimatorInnovations
type CEstimatorInnovations__Sequence = C.px4_msgs__msg__EstimatorInnovations__Sequence

func EstimatorInnovations__Sequence_to_Go(goSlice *[]EstimatorInnovations, cSlice CEstimatorInnovations__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorInnovations, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EstimatorInnovationsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func EstimatorInnovations__Sequence_to_C(cSlice *CEstimatorInnovations__Sequence, goSlice []EstimatorInnovations) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorInnovations)(C.malloc(C.sizeof_struct_px4_msgs__msg__EstimatorInnovations * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EstimatorInnovationsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func EstimatorInnovations__Array_to_Go(goSlice []EstimatorInnovations, cSlice []CEstimatorInnovations) {
	for i := 0; i < len(cSlice); i++ {
		EstimatorInnovationsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorInnovations__Array_to_C(cSlice []CEstimatorInnovations, goSlice []EstimatorInnovations) {
	for i := 0; i < len(goSlice); i++ {
		EstimatorInnovationsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
