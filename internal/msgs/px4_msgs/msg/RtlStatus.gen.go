// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rtl_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RtlStatus", RtlStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RtlStatus", RtlStatusTypeSupport)
}

const (
	RtlStatus_RTL_STATUS_TYPE_NONE                   uint8 = 0 // pending if evaluation can't pe performed currently e.g. when it is still loading the safe points
	RtlStatus_RTL_STATUS_TYPE_DIRECT_SAFE_POINT      uint8 = 1 // chosen to directly go to a safe point or home position
	RtlStatus_RTL_STATUS_TYPE_DIRECT_MISSION_LAND    uint8 = 2 // going straight to the beginning of the mission landing
	RtlStatus_RTL_STATUS_TYPE_FOLLOW_MISSION         uint8 = 3 // Following the mission from start index to mission landing. Start index is current WP if in Mission mode, and closest WP otherwise.
	RtlStatus_RTL_STATUS_TYPE_FOLLOW_MISSION_REVERSE uint8 = 4 // Following the mission in reverse from start index to the beginning of the mission. Start index is previous WP if in Mission mode, and closest WP otherwise.
)

type RtlStatus struct {
	Timestamp           uint64 `yaml:"timestamp"`             // time since system start (microseconds)
	SafePointsId        uint32 `yaml:"safe_points_id"`        // unique ID of active set of safe_point_items
	IsEvaluationPending bool   `yaml:"is_evaluation_pending"` // flag if the RTL point needs reevaluation (e.g. new safe points available, but need loading).
	HasVtolApproach     bool   `yaml:"has_vtol_approach"`     // flag if approaches are defined for current RTL_TYPE parameter setting
	RtlType             uint8  `yaml:"rtl_type"`              // Type of RTL chosen
	SafePointIndex      uint8  `yaml:"safe_point_index"`      // index of the chosen safe point, if in RTL_STATUS_TYPE_DIRECT_SAFE_POINT mode
}

// NewRtlStatus creates a new RtlStatus with default values.
func NewRtlStatus() *RtlStatus {
	self := RtlStatus{}
	self.SetDefaults()
	return &self
}

func (t *RtlStatus) Clone() *RtlStatus {
	c := &RtlStatus{}
	c.Timestamp = t.Timestamp
	c.SafePointsId = t.SafePointsId
	c.IsEvaluationPending = t.IsEvaluationPending
	c.HasVtolApproach = t.HasVtolApproach
	c.RtlType = t.RtlType
	c.SafePointIndex = t.SafePointIndex
	return c
}

func (t *RtlStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RtlStatus) SetDefaults() {
	t.Timestamp = 0
	t.SafePointsId = 0
	t.IsEvaluationPending = false
	t.HasVtolApproach = false
	t.RtlType = 0
	t.SafePointIndex = 0
}

func (t *RtlStatus) GetTypeSupport() types.MessageTypeSupport {
	return RtlStatusTypeSupport
}

// RtlStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RtlStatusPublisher struct {
	*rclgo.Publisher
}

// NewRtlStatusPublisher creates and returns a new publisher for the
// RtlStatus
func NewRtlStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RtlStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RtlStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RtlStatusPublisher{pub}, nil
}

func (p *RtlStatusPublisher) Publish(msg *RtlStatus) error {
	return p.Publisher.Publish(msg)
}

// RtlStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RtlStatusSubscription struct {
	*rclgo.Subscription
}

// RtlStatusSubscriptionCallback type is used to provide a subscription
// handler function for a RtlStatusSubscription.
type RtlStatusSubscriptionCallback func(msg *RtlStatus, info *rclgo.MessageInfo, err error)

// NewRtlStatusSubscription creates and returns a new subscription for the
// RtlStatus
func NewRtlStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RtlStatusSubscriptionCallback) (*RtlStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RtlStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RtlStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RtlStatusSubscription{sub}, nil
}

func (s *RtlStatusSubscription) TakeMessage(out *RtlStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRtlStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRtlStatusSlice(dst, src []RtlStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RtlStatusTypeSupport types.MessageTypeSupport = _RtlStatusTypeSupport{}

type _RtlStatusTypeSupport struct{}

func (t _RtlStatusTypeSupport) New() types.Message {
	return NewRtlStatus()
}

func (t _RtlStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RtlStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__RtlStatus__create())
}

func (t _RtlStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RtlStatus__destroy((*C.px4_msgs__msg__RtlStatus)(pointer_to_free))
}

func (t _RtlStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RtlStatus)
	mem := (*C.px4_msgs__msg__RtlStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.safe_points_id = C.uint32_t(m.SafePointsId)
	mem.is_evaluation_pending = C.bool(m.IsEvaluationPending)
	mem.has_vtol_approach = C.bool(m.HasVtolApproach)
	mem.rtl_type = C.uint8_t(m.RtlType)
	mem.safe_point_index = C.uint8_t(m.SafePointIndex)
}

func (t _RtlStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RtlStatus)
	mem := (*C.px4_msgs__msg__RtlStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.SafePointsId = uint32(mem.safe_points_id)
	m.IsEvaluationPending = bool(mem.is_evaluation_pending)
	m.HasVtolApproach = bool(mem.has_vtol_approach)
	m.RtlType = uint8(mem.rtl_type)
	m.SafePointIndex = uint8(mem.safe_point_index)
}

func (t _RtlStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RtlStatus())
}

type CRtlStatus = C.px4_msgs__msg__RtlStatus
type CRtlStatus__Sequence = C.px4_msgs__msg__RtlStatus__Sequence

func RtlStatus__Sequence_to_Go(goSlice *[]RtlStatus, cSlice CRtlStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RtlStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RtlStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RtlStatus__Sequence_to_C(cSlice *CRtlStatus__Sequence, goSlice []RtlStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RtlStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__RtlStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RtlStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RtlStatus__Array_to_Go(goSlice []RtlStatus, cSlice []CRtlStatus) {
	for i := 0; i < len(cSlice); i++ {
		RtlStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RtlStatus__Array_to_C(cSlice []CRtlStatus, goSlice []RtlStatus) {
	for i := 0; i < len(goSlice); i++ {
		RtlStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
