// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/tecs_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TecsStatus", TecsStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/TecsStatus", TecsStatusTypeSupport)
}

type TecsStatus struct {
	Timestamp                 uint64  `yaml:"timestamp"`                    // time since system start (microseconds)
	AltitudeSp                float32 `yaml:"altitude_sp"`                  // Altitude setpoint AMSL [m]
	AltitudeReference         float32 `yaml:"altitude_reference"`           // Altitude setpoint reference AMSL [m]
	AltitudeTimeConstant      float32 `yaml:"altitude_time_constant"`       // Time constant of the altitude tracker [s]
	HeightRateReference       float32 `yaml:"height_rate_reference"`        // Height rate setpoint reference [m/s]
	HeightRateDirect          float32 `yaml:"height_rate_direct"`           // Direct height rate setpoint from velocity reference generator [m/s]
	HeightRateSetpoint        float32 `yaml:"height_rate_setpoint"`         // Height rate setpoint [m/s]
	HeightRate                float32 `yaml:"height_rate"`                  // Height rate [m/s]
	EquivalentAirspeedSp      float32 `yaml:"equivalent_airspeed_sp"`       // Equivalent airspeed setpoint [m/s]
	TrueAirspeedSp            float32 `yaml:"true_airspeed_sp"`             // True airspeed setpoint [m/s]
	TrueAirspeedFiltered      float32 `yaml:"true_airspeed_filtered"`       // True airspeed filtered [m/s]
	TrueAirspeedDerivativeSp  float32 `yaml:"true_airspeed_derivative_sp"`  // True airspeed derivative setpoint [m/s^2]
	TrueAirspeedDerivative    float32 `yaml:"true_airspeed_derivative"`     // True airspeed derivative [m/s^2]
	TrueAirspeedDerivativeRaw float32 `yaml:"true_airspeed_derivative_raw"` // True airspeed derivative raw [m/s^2]
	TotalEnergyRateSp         float32 `yaml:"total_energy_rate_sp"`         // Total energy rate setpoint [m^2/s^3]
	TotalEnergyRate           float32 `yaml:"total_energy_rate"`            // Total energy rate estimate [m^2/s^3]
	TotalEnergyBalanceRateSp  float32 `yaml:"total_energy_balance_rate_sp"` // Energy balance rate setpoint [m^2/s^3]
	TotalEnergyBalanceRate    float32 `yaml:"total_energy_balance_rate"`    // Energy balance rate estimate [m^2/s^3]
	ThrottleInteg             float32 `yaml:"throttle_integ"`               // Throttle integrator value [-]
	PitchInteg                float32 `yaml:"pitch_integ"`                  // Pitch integrator value [rad]
	ThrottleSp                float32 `yaml:"throttle_sp"`                  // Current throttle setpoint [-]
	PitchSpRad                float32 `yaml:"pitch_sp_rad"`                 // Current pitch setpoint [rad]
	ThrottleTrim              float32 `yaml:"throttle_trim"`                // estimated throttle value [0,1] required to fly level at equivalent_airspeed_sp in the current atmospheric conditions
	UnderspeedRatio           float32 `yaml:"underspeed_ratio"`             // 0: no underspeed, 1: maximal underspeed. Controller takes measures to avoid stall proportional to ratio if >0.
	FastDescendRatio          float32 `yaml:"fast_descend_ratio"`           // value indicating if fast descend mode is enabled with ramp up and ramp down [0-1]
}

// NewTecsStatus creates a new TecsStatus with default values.
func NewTecsStatus() *TecsStatus {
	self := TecsStatus{}
	self.SetDefaults()
	return &self
}

func (t *TecsStatus) Clone() *TecsStatus {
	c := &TecsStatus{}
	c.Timestamp = t.Timestamp
	c.AltitudeSp = t.AltitudeSp
	c.AltitudeReference = t.AltitudeReference
	c.AltitudeTimeConstant = t.AltitudeTimeConstant
	c.HeightRateReference = t.HeightRateReference
	c.HeightRateDirect = t.HeightRateDirect
	c.HeightRateSetpoint = t.HeightRateSetpoint
	c.HeightRate = t.HeightRate
	c.EquivalentAirspeedSp = t.EquivalentAirspeedSp
	c.TrueAirspeedSp = t.TrueAirspeedSp
	c.TrueAirspeedFiltered = t.TrueAirspeedFiltered
	c.TrueAirspeedDerivativeSp = t.TrueAirspeedDerivativeSp
	c.TrueAirspeedDerivative = t.TrueAirspeedDerivative
	c.TrueAirspeedDerivativeRaw = t.TrueAirspeedDerivativeRaw
	c.TotalEnergyRateSp = t.TotalEnergyRateSp
	c.TotalEnergyRate = t.TotalEnergyRate
	c.TotalEnergyBalanceRateSp = t.TotalEnergyBalanceRateSp
	c.TotalEnergyBalanceRate = t.TotalEnergyBalanceRate
	c.ThrottleInteg = t.ThrottleInteg
	c.PitchInteg = t.PitchInteg
	c.ThrottleSp = t.ThrottleSp
	c.PitchSpRad = t.PitchSpRad
	c.ThrottleTrim = t.ThrottleTrim
	c.UnderspeedRatio = t.UnderspeedRatio
	c.FastDescendRatio = t.FastDescendRatio
	return c
}

func (t *TecsStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TecsStatus) SetDefaults() {
	t.Timestamp = 0
	t.AltitudeSp = 0
	t.AltitudeReference = 0
	t.AltitudeTimeConstant = 0
	t.HeightRateReference = 0
	t.HeightRateDirect = 0
	t.HeightRateSetpoint = 0
	t.HeightRate = 0
	t.EquivalentAirspeedSp = 0
	t.TrueAirspeedSp = 0
	t.TrueAirspeedFiltered = 0
	t.TrueAirspeedDerivativeSp = 0
	t.TrueAirspeedDerivative = 0
	t.TrueAirspeedDerivativeRaw = 0
	t.TotalEnergyRateSp = 0
	t.TotalEnergyRate = 0
	t.TotalEnergyBalanceRateSp = 0
	t.TotalEnergyBalanceRate = 0
	t.ThrottleInteg = 0
	t.PitchInteg = 0
	t.ThrottleSp = 0
	t.PitchSpRad = 0
	t.ThrottleTrim = 0
	t.UnderspeedRatio = 0
	t.FastDescendRatio = 0
}

func (t *TecsStatus) GetTypeSupport() types.MessageTypeSupport {
	return TecsStatusTypeSupport
}

// TecsStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TecsStatusPublisher struct {
	*rclgo.Publisher
}

// NewTecsStatusPublisher creates and returns a new publisher for the
// TecsStatus
func NewTecsStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TecsStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TecsStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TecsStatusPublisher{pub}, nil
}

func (p *TecsStatusPublisher) Publish(msg *TecsStatus) error {
	return p.Publisher.Publish(msg)
}

// TecsStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TecsStatusSubscription struct {
	*rclgo.Subscription
}

// TecsStatusSubscriptionCallback type is used to provide a subscription
// handler function for a TecsStatusSubscription.
type TecsStatusSubscriptionCallback func(msg *TecsStatus, info *rclgo.MessageInfo, err error)

// NewTecsStatusSubscription creates and returns a new subscription for the
// TecsStatus
func NewTecsStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TecsStatusSubscriptionCallback) (*TecsStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TecsStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TecsStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TecsStatusSubscription{sub}, nil
}

func (s *TecsStatusSubscription) TakeMessage(out *TecsStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTecsStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTecsStatusSlice(dst, src []TecsStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TecsStatusTypeSupport types.MessageTypeSupport = _TecsStatusTypeSupport{}

type _TecsStatusTypeSupport struct{}

func (t _TecsStatusTypeSupport) New() types.Message {
	return NewTecsStatus()
}

func (t _TecsStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TecsStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__TecsStatus__create())
}

func (t _TecsStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TecsStatus__destroy((*C.px4_msgs__msg__TecsStatus)(pointer_to_free))
}

func (t _TecsStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TecsStatus)
	mem := (*C.px4_msgs__msg__TecsStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.altitude_sp = C.float(m.AltitudeSp)
	mem.altitude_reference = C.float(m.AltitudeReference)
	mem.altitude_time_constant = C.float(m.AltitudeTimeConstant)
	mem.height_rate_reference = C.float(m.HeightRateReference)
	mem.height_rate_direct = C.float(m.HeightRateDirect)
	mem.height_rate_setpoint = C.float(m.HeightRateSetpoint)
	mem.height_rate = C.float(m.HeightRate)
	mem.equivalent_airspeed_sp = C.float(m.EquivalentAirspeedSp)
	mem.true_airspeed_sp = C.float(m.TrueAirspeedSp)
	mem.true_airspeed_filtered = C.float(m.TrueAirspeedFiltered)
	mem.true_airspeed_derivative_sp = C.float(m.TrueAirspeedDerivativeSp)
	mem.true_airspeed_derivative = C.float(m.TrueAirspeedDerivative)
	mem.true_airspeed_derivative_raw = C.float(m.TrueAirspeedDerivativeRaw)
	mem.total_energy_rate_sp = C.float(m.TotalEnergyRateSp)
	mem.total_energy_rate = C.float(m.TotalEnergyRate)
	mem.total_energy_balance_rate_sp = C.float(m.TotalEnergyBalanceRateSp)
	mem.total_energy_balance_rate = C.float(m.TotalEnergyBalanceRate)
	mem.throttle_integ = C.float(m.ThrottleInteg)
	mem.pitch_integ = C.float(m.PitchInteg)
	mem.throttle_sp = C.float(m.ThrottleSp)
	mem.pitch_sp_rad = C.float(m.PitchSpRad)
	mem.throttle_trim = C.float(m.ThrottleTrim)
	mem.underspeed_ratio = C.float(m.UnderspeedRatio)
	mem.fast_descend_ratio = C.float(m.FastDescendRatio)
}

func (t _TecsStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TecsStatus)
	mem := (*C.px4_msgs__msg__TecsStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.AltitudeSp = float32(mem.altitude_sp)
	m.AltitudeReference = float32(mem.altitude_reference)
	m.AltitudeTimeConstant = float32(mem.altitude_time_constant)
	m.HeightRateReference = float32(mem.height_rate_reference)
	m.HeightRateDirect = float32(mem.height_rate_direct)
	m.HeightRateSetpoint = float32(mem.height_rate_setpoint)
	m.HeightRate = float32(mem.height_rate)
	m.EquivalentAirspeedSp = float32(mem.equivalent_airspeed_sp)
	m.TrueAirspeedSp = float32(mem.true_airspeed_sp)
	m.TrueAirspeedFiltered = float32(mem.true_airspeed_filtered)
	m.TrueAirspeedDerivativeSp = float32(mem.true_airspeed_derivative_sp)
	m.TrueAirspeedDerivative = float32(mem.true_airspeed_derivative)
	m.TrueAirspeedDerivativeRaw = float32(mem.true_airspeed_derivative_raw)
	m.TotalEnergyRateSp = float32(mem.total_energy_rate_sp)
	m.TotalEnergyRate = float32(mem.total_energy_rate)
	m.TotalEnergyBalanceRateSp = float32(mem.total_energy_balance_rate_sp)
	m.TotalEnergyBalanceRate = float32(mem.total_energy_balance_rate)
	m.ThrottleInteg = float32(mem.throttle_integ)
	m.PitchInteg = float32(mem.pitch_integ)
	m.ThrottleSp = float32(mem.throttle_sp)
	m.PitchSpRad = float32(mem.pitch_sp_rad)
	m.ThrottleTrim = float32(mem.throttle_trim)
	m.UnderspeedRatio = float32(mem.underspeed_ratio)
	m.FastDescendRatio = float32(mem.fast_descend_ratio)
}

func (t _TecsStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TecsStatus())
}

type CTecsStatus = C.px4_msgs__msg__TecsStatus
type CTecsStatus__Sequence = C.px4_msgs__msg__TecsStatus__Sequence

func TecsStatus__Sequence_to_Go(goSlice *[]TecsStatus, cSlice CTecsStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TecsStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TecsStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TecsStatus__Sequence_to_C(cSlice *CTecsStatus__Sequence, goSlice []TecsStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TecsStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__TecsStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TecsStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TecsStatus__Array_to_Go(goSlice []TecsStatus, cSlice []CTecsStatus) {
	for i := 0; i < len(cSlice); i++ {
		TecsStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TecsStatus__Array_to_C(cSlice []CTecsStatus, goSlice []TecsStatus) {
	for i := 0; i < len(goSlice); i++ {
		TecsStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
