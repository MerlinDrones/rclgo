// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gps_inject_data.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GpsInjectData", GpsInjectDataTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GpsInjectData", GpsInjectDataTypeSupport)
}

const (
	GpsInjectData_ORB_QUEUE_LENGTH uint8 = 8
	GpsInjectData_MAX_INSTANCES    uint8 = 2
)

type GpsInjectData struct {
	Timestamp uint64     `yaml:"timestamp"` // time since system start (microseconds)
	DeviceId  uint32     `yaml:"device_id"` // unique device ID for the sensor that does not change between power cycles
	Len       uint16     `yaml:"len"`       // length of data
	Flags     uint8      `yaml:"flags"`     // LSB: 1=fragmented
	Data      [300]uint8 `yaml:"data"`      // data to write to GPS device (RTCM message)
}

// NewGpsInjectData creates a new GpsInjectData with default values.
func NewGpsInjectData() *GpsInjectData {
	self := GpsInjectData{}
	self.SetDefaults()
	return &self
}

func (t *GpsInjectData) Clone() *GpsInjectData {
	c := &GpsInjectData{}
	c.Timestamp = t.Timestamp
	c.DeviceId = t.DeviceId
	c.Len = t.Len
	c.Flags = t.Flags
	c.Data = t.Data
	return c
}

func (t *GpsInjectData) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GpsInjectData) SetDefaults() {
	t.Timestamp = 0
	t.DeviceId = 0
	t.Len = 0
	t.Flags = 0
	t.Data = [300]uint8{}
}

func (t *GpsInjectData) GetTypeSupport() types.MessageTypeSupport {
	return GpsInjectDataTypeSupport
}

// GpsInjectDataPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GpsInjectDataPublisher struct {
	*rclgo.Publisher
}

// NewGpsInjectDataPublisher creates and returns a new publisher for the
// GpsInjectData
func NewGpsInjectDataPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GpsInjectDataPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GpsInjectDataTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GpsInjectDataPublisher{pub}, nil
}

func (p *GpsInjectDataPublisher) Publish(msg *GpsInjectData) error {
	return p.Publisher.Publish(msg)
}

// GpsInjectDataSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GpsInjectDataSubscription struct {
	*rclgo.Subscription
}

// GpsInjectDataSubscriptionCallback type is used to provide a subscription
// handler function for a GpsInjectDataSubscription.
type GpsInjectDataSubscriptionCallback func(msg *GpsInjectData, info *rclgo.MessageInfo, err error)

// NewGpsInjectDataSubscription creates and returns a new subscription for the
// GpsInjectData
func NewGpsInjectDataSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GpsInjectDataSubscriptionCallback) (*GpsInjectDataSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GpsInjectData
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GpsInjectDataTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GpsInjectDataSubscription{sub}, nil
}

func (s *GpsInjectDataSubscription) TakeMessage(out *GpsInjectData) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGpsInjectDataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGpsInjectDataSlice(dst, src []GpsInjectData) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GpsInjectDataTypeSupport types.MessageTypeSupport = _GpsInjectDataTypeSupport{}

type _GpsInjectDataTypeSupport struct{}

func (t _GpsInjectDataTypeSupport) New() types.Message {
	return NewGpsInjectData()
}

func (t _GpsInjectDataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GpsInjectData
	return (unsafe.Pointer)(C.px4_msgs__msg__GpsInjectData__create())
}

func (t _GpsInjectDataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GpsInjectData__destroy((*C.px4_msgs__msg__GpsInjectData)(pointer_to_free))
}

func (t _GpsInjectDataTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GpsInjectData)
	mem := (*C.px4_msgs__msg__GpsInjectData)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.len = C.uint16_t(m.Len)
	mem.flags = C.uint8_t(m.Flags)
	cSlice_data := mem.data[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_data)), m.Data[:])
}

func (t _GpsInjectDataTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GpsInjectData)
	mem := (*C.px4_msgs__msg__GpsInjectData)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceId = uint32(mem.device_id)
	m.Len = uint16(mem.len)
	m.Flags = uint8(mem.flags)
	cSlice_data := mem.data[:]
	primitives.Uint8__Array_to_Go(m.Data[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_data)))
}

func (t _GpsInjectDataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GpsInjectData())
}

type CGpsInjectData = C.px4_msgs__msg__GpsInjectData
type CGpsInjectData__Sequence = C.px4_msgs__msg__GpsInjectData__Sequence

func GpsInjectData__Sequence_to_Go(goSlice *[]GpsInjectData, cSlice CGpsInjectData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GpsInjectData, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GpsInjectDataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GpsInjectData__Sequence_to_C(cSlice *CGpsInjectData__Sequence, goSlice []GpsInjectData) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GpsInjectData)(C.malloc(C.sizeof_struct_px4_msgs__msg__GpsInjectData * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GpsInjectDataTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GpsInjectData__Array_to_Go(goSlice []GpsInjectData, cSlice []CGpsInjectData) {
	for i := 0; i < len(cSlice); i++ {
		GpsInjectDataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GpsInjectData__Array_to_C(cSlice []CGpsInjectData, goSlice []GpsInjectData) {
	for i := 0; i < len(goSlice); i++ {
		GpsInjectDataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
