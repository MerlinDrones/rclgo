// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_control_mode.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleControlMode", VehicleControlModeTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleControlMode", VehicleControlModeTypeSupport)
}

type VehicleControlMode struct {
	Timestamp                             uint64 `yaml:"timestamp"`  // time since system start (microseconds)
	FlagArmed                             bool   `yaml:"flag_armed"` // synonym for actuator_armed.armed
	FlagMulticopterPositionControlEnabled bool   `yaml:"flag_multicopter_position_control_enabled"`
	FlagControlManualEnabled              bool   `yaml:"flag_control_manual_enabled"`       // true if manual input is mixed in
	FlagControlAutoEnabled                bool   `yaml:"flag_control_auto_enabled"`         // true if onboard autopilot should act
	FlagControlOffboardEnabled            bool   `yaml:"flag_control_offboard_enabled"`     // true if offboard control should be used
	FlagControlPositionEnabled            bool   `yaml:"flag_control_position_enabled"`     // true if position is controlled
	FlagControlVelocityEnabled            bool   `yaml:"flag_control_velocity_enabled"`     // true if horizontal velocity (implies direction) is controlled
	FlagControlAltitudeEnabled            bool   `yaml:"flag_control_altitude_enabled"`     // true if altitude is controlled
	FlagControlClimbRateEnabled           bool   `yaml:"flag_control_climb_rate_enabled"`   // true if climb rate is controlled
	FlagControlAccelerationEnabled        bool   `yaml:"flag_control_acceleration_enabled"` // true if acceleration is controlled
	FlagControlAttitudeEnabled            bool   `yaml:"flag_control_attitude_enabled"`     // true if attitude stabilization is mixed in
	FlagControlRatesEnabled               bool   `yaml:"flag_control_rates_enabled"`        // true if rates are stabilized
	FlagControlAllocationEnabled          bool   `yaml:"flag_control_allocation_enabled"`   // true if control allocation is enabled
	FlagControlTerminationEnabled         bool   `yaml:"flag_control_termination_enabled"`  // true if flighttermination is enabled
	SourceId                              uint8  `yaml:"source_id"`                         // Mode ID (nav_state). TODO: use dedicated topic for external requests
}

// NewVehicleControlMode creates a new VehicleControlMode with default values.
func NewVehicleControlMode() *VehicleControlMode {
	self := VehicleControlMode{}
	self.SetDefaults()
	return &self
}

func (t *VehicleControlMode) Clone() *VehicleControlMode {
	c := &VehicleControlMode{}
	c.Timestamp = t.Timestamp
	c.FlagArmed = t.FlagArmed
	c.FlagMulticopterPositionControlEnabled = t.FlagMulticopterPositionControlEnabled
	c.FlagControlManualEnabled = t.FlagControlManualEnabled
	c.FlagControlAutoEnabled = t.FlagControlAutoEnabled
	c.FlagControlOffboardEnabled = t.FlagControlOffboardEnabled
	c.FlagControlPositionEnabled = t.FlagControlPositionEnabled
	c.FlagControlVelocityEnabled = t.FlagControlVelocityEnabled
	c.FlagControlAltitudeEnabled = t.FlagControlAltitudeEnabled
	c.FlagControlClimbRateEnabled = t.FlagControlClimbRateEnabled
	c.FlagControlAccelerationEnabled = t.FlagControlAccelerationEnabled
	c.FlagControlAttitudeEnabled = t.FlagControlAttitudeEnabled
	c.FlagControlRatesEnabled = t.FlagControlRatesEnabled
	c.FlagControlAllocationEnabled = t.FlagControlAllocationEnabled
	c.FlagControlTerminationEnabled = t.FlagControlTerminationEnabled
	c.SourceId = t.SourceId
	return c
}

func (t *VehicleControlMode) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleControlMode) SetDefaults() {
	t.Timestamp = 0
	t.FlagArmed = false
	t.FlagMulticopterPositionControlEnabled = false
	t.FlagControlManualEnabled = false
	t.FlagControlAutoEnabled = false
	t.FlagControlOffboardEnabled = false
	t.FlagControlPositionEnabled = false
	t.FlagControlVelocityEnabled = false
	t.FlagControlAltitudeEnabled = false
	t.FlagControlClimbRateEnabled = false
	t.FlagControlAccelerationEnabled = false
	t.FlagControlAttitudeEnabled = false
	t.FlagControlRatesEnabled = false
	t.FlagControlAllocationEnabled = false
	t.FlagControlTerminationEnabled = false
	t.SourceId = 0
}

func (t *VehicleControlMode) GetTypeSupport() types.MessageTypeSupport {
	return VehicleControlModeTypeSupport
}

// VehicleControlModePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleControlModePublisher struct {
	*rclgo.Publisher
}

// NewVehicleControlModePublisher creates and returns a new publisher for the
// VehicleControlMode
func NewVehicleControlModePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleControlModePublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleControlModeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleControlModePublisher{pub}, nil
}

func (p *VehicleControlModePublisher) Publish(msg *VehicleControlMode) error {
	return p.Publisher.Publish(msg)
}

// VehicleControlModeSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleControlModeSubscription struct {
	*rclgo.Subscription
}

// VehicleControlModeSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleControlModeSubscription.
type VehicleControlModeSubscriptionCallback func(msg *VehicleControlMode, info *rclgo.MessageInfo, err error)

// NewVehicleControlModeSubscription creates and returns a new subscription for the
// VehicleControlMode
func NewVehicleControlModeSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleControlModeSubscriptionCallback) (*VehicleControlModeSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleControlMode
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleControlModeTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleControlModeSubscription{sub}, nil
}

func (s *VehicleControlModeSubscription) TakeMessage(out *VehicleControlMode) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleControlModeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleControlModeSlice(dst, src []VehicleControlMode) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleControlModeTypeSupport types.MessageTypeSupport = _VehicleControlModeTypeSupport{}

type _VehicleControlModeTypeSupport struct{}

func (t _VehicleControlModeTypeSupport) New() types.Message {
	return NewVehicleControlMode()
}

func (t _VehicleControlModeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleControlMode
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleControlMode__create())
}

func (t _VehicleControlModeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleControlMode__destroy((*C.px4_msgs__msg__VehicleControlMode)(pointer_to_free))
}

func (t _VehicleControlModeTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleControlMode)
	mem := (*C.px4_msgs__msg__VehicleControlMode)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.flag_armed = C.bool(m.FlagArmed)
	mem.flag_multicopter_position_control_enabled = C.bool(m.FlagMulticopterPositionControlEnabled)
	mem.flag_control_manual_enabled = C.bool(m.FlagControlManualEnabled)
	mem.flag_control_auto_enabled = C.bool(m.FlagControlAutoEnabled)
	mem.flag_control_offboard_enabled = C.bool(m.FlagControlOffboardEnabled)
	mem.flag_control_position_enabled = C.bool(m.FlagControlPositionEnabled)
	mem.flag_control_velocity_enabled = C.bool(m.FlagControlVelocityEnabled)
	mem.flag_control_altitude_enabled = C.bool(m.FlagControlAltitudeEnabled)
	mem.flag_control_climb_rate_enabled = C.bool(m.FlagControlClimbRateEnabled)
	mem.flag_control_acceleration_enabled = C.bool(m.FlagControlAccelerationEnabled)
	mem.flag_control_attitude_enabled = C.bool(m.FlagControlAttitudeEnabled)
	mem.flag_control_rates_enabled = C.bool(m.FlagControlRatesEnabled)
	mem.flag_control_allocation_enabled = C.bool(m.FlagControlAllocationEnabled)
	mem.flag_control_termination_enabled = C.bool(m.FlagControlTerminationEnabled)
	mem.source_id = C.uint8_t(m.SourceId)
}

func (t _VehicleControlModeTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleControlMode)
	mem := (*C.px4_msgs__msg__VehicleControlMode)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.FlagArmed = bool(mem.flag_armed)
	m.FlagMulticopterPositionControlEnabled = bool(mem.flag_multicopter_position_control_enabled)
	m.FlagControlManualEnabled = bool(mem.flag_control_manual_enabled)
	m.FlagControlAutoEnabled = bool(mem.flag_control_auto_enabled)
	m.FlagControlOffboardEnabled = bool(mem.flag_control_offboard_enabled)
	m.FlagControlPositionEnabled = bool(mem.flag_control_position_enabled)
	m.FlagControlVelocityEnabled = bool(mem.flag_control_velocity_enabled)
	m.FlagControlAltitudeEnabled = bool(mem.flag_control_altitude_enabled)
	m.FlagControlClimbRateEnabled = bool(mem.flag_control_climb_rate_enabled)
	m.FlagControlAccelerationEnabled = bool(mem.flag_control_acceleration_enabled)
	m.FlagControlAttitudeEnabled = bool(mem.flag_control_attitude_enabled)
	m.FlagControlRatesEnabled = bool(mem.flag_control_rates_enabled)
	m.FlagControlAllocationEnabled = bool(mem.flag_control_allocation_enabled)
	m.FlagControlTerminationEnabled = bool(mem.flag_control_termination_enabled)
	m.SourceId = uint8(mem.source_id)
}

func (t _VehicleControlModeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleControlMode())
}

type CVehicleControlMode = C.px4_msgs__msg__VehicleControlMode
type CVehicleControlMode__Sequence = C.px4_msgs__msg__VehicleControlMode__Sequence

func VehicleControlMode__Sequence_to_Go(goSlice *[]VehicleControlMode, cSlice CVehicleControlMode__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleControlMode, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleControlModeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleControlMode__Sequence_to_C(cSlice *CVehicleControlMode__Sequence, goSlice []VehicleControlMode) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleControlMode)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleControlMode * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleControlModeTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleControlMode__Array_to_Go(goSlice []VehicleControlMode, cSlice []CVehicleControlMode) {
	for i := 0; i < len(cSlice); i++ {
		VehicleControlModeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleControlMode__Array_to_C(cSlice []CVehicleControlMode, goSlice []VehicleControlMode) {
	for i := 0; i < len(goSlice); i++ {
		VehicleControlModeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
