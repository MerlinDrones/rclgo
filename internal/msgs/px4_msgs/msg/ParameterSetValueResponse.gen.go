// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/parameter_set_value_response.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ParameterSetValueResponse", ParameterSetValueResponseTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ParameterSetValueResponse", ParameterSetValueResponseTypeSupport)
}

const (
	ParameterSetValueResponse_ORB_QUEUE_LENGTH uint8 = 4
)

type ParameterSetValueResponse struct {
	Timestamp        uint64 `yaml:"timestamp"`
	RequestTimestamp uint64 `yaml:"request_timestamp"`
	ParameterIndex   uint16 `yaml:"parameter_index"`
}

// NewParameterSetValueResponse creates a new ParameterSetValueResponse with default values.
func NewParameterSetValueResponse() *ParameterSetValueResponse {
	self := ParameterSetValueResponse{}
	self.SetDefaults()
	return &self
}

func (t *ParameterSetValueResponse) Clone() *ParameterSetValueResponse {
	c := &ParameterSetValueResponse{}
	c.Timestamp = t.Timestamp
	c.RequestTimestamp = t.RequestTimestamp
	c.ParameterIndex = t.ParameterIndex
	return c
}

func (t *ParameterSetValueResponse) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParameterSetValueResponse) SetDefaults() {
	t.Timestamp = 0
	t.RequestTimestamp = 0
	t.ParameterIndex = 0
}

func (t *ParameterSetValueResponse) GetTypeSupport() types.MessageTypeSupport {
	return ParameterSetValueResponseTypeSupport
}

// ParameterSetValueResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParameterSetValueResponsePublisher struct {
	*rclgo.Publisher
}

// NewParameterSetValueResponsePublisher creates and returns a new publisher for the
// ParameterSetValueResponse
func NewParameterSetValueResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParameterSetValueResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParameterSetValueResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParameterSetValueResponsePublisher{pub}, nil
}

func (p *ParameterSetValueResponsePublisher) Publish(msg *ParameterSetValueResponse) error {
	return p.Publisher.Publish(msg)
}

// ParameterSetValueResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParameterSetValueResponseSubscription struct {
	*rclgo.Subscription
}

// ParameterSetValueResponseSubscriptionCallback type is used to provide a subscription
// handler function for a ParameterSetValueResponseSubscription.
type ParameterSetValueResponseSubscriptionCallback func(msg *ParameterSetValueResponse, info *rclgo.MessageInfo, err error)

// NewParameterSetValueResponseSubscription creates and returns a new subscription for the
// ParameterSetValueResponse
func NewParameterSetValueResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParameterSetValueResponseSubscriptionCallback) (*ParameterSetValueResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParameterSetValueResponse
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParameterSetValueResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParameterSetValueResponseSubscription{sub}, nil
}

func (s *ParameterSetValueResponseSubscription) TakeMessage(out *ParameterSetValueResponse) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParameterSetValueResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParameterSetValueResponseSlice(dst, src []ParameterSetValueResponse) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParameterSetValueResponseTypeSupport types.MessageTypeSupport = _ParameterSetValueResponseTypeSupport{}

type _ParameterSetValueResponseTypeSupport struct{}

func (t _ParameterSetValueResponseTypeSupport) New() types.Message {
	return NewParameterSetValueResponse()
}

func (t _ParameterSetValueResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ParameterSetValueResponse
	return (unsafe.Pointer)(C.px4_msgs__msg__ParameterSetValueResponse__create())
}

func (t _ParameterSetValueResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ParameterSetValueResponse__destroy((*C.px4_msgs__msg__ParameterSetValueResponse)(pointer_to_free))
}

func (t _ParameterSetValueResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParameterSetValueResponse)
	mem := (*C.px4_msgs__msg__ParameterSetValueResponse)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.request_timestamp = C.uint64_t(m.RequestTimestamp)
	mem.parameter_index = C.uint16_t(m.ParameterIndex)
}

func (t _ParameterSetValueResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParameterSetValueResponse)
	mem := (*C.px4_msgs__msg__ParameterSetValueResponse)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.RequestTimestamp = uint64(mem.request_timestamp)
	m.ParameterIndex = uint16(mem.parameter_index)
}

func (t _ParameterSetValueResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ParameterSetValueResponse())
}

type CParameterSetValueResponse = C.px4_msgs__msg__ParameterSetValueResponse
type CParameterSetValueResponse__Sequence = C.px4_msgs__msg__ParameterSetValueResponse__Sequence

func ParameterSetValueResponse__Sequence_to_Go(goSlice *[]ParameterSetValueResponse, cSlice CParameterSetValueResponse__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParameterSetValueResponse, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParameterSetValueResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParameterSetValueResponse__Sequence_to_C(cSlice *CParameterSetValueResponse__Sequence, goSlice []ParameterSetValueResponse) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ParameterSetValueResponse)(C.malloc(C.sizeof_struct_px4_msgs__msg__ParameterSetValueResponse * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParameterSetValueResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParameterSetValueResponse__Array_to_Go(goSlice []ParameterSetValueResponse, cSlice []CParameterSetValueResponse) {
	for i := 0; i < len(cSlice); i++ {
		ParameterSetValueResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParameterSetValueResponse__Array_to_C(cSlice []CParameterSetValueResponse, goSlice []ParameterSetValueResponse) {
	for i := 0; i < len(goSlice); i++ {
		ParameterSetValueResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
