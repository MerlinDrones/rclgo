// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/mode_completed.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ModeCompleted", ModeCompletedTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ModeCompleted", ModeCompletedTypeSupport)
}

const (
	ModeCompleted_RESULT_SUCCESS       uint8 = 0
	ModeCompleted_RESULT_FAILURE_OTHER uint8 = 100 // Mode failed (generic error). [1-99]: reserved
)

type ModeCompleted struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds). Mode completion result, published by an active mode.The possible values of nav_state are defined in the VehicleStatus msg.Note that this is not always published (e.g. when a user switches modes or onfailsafe activation)
	Result    uint8  `yaml:"result"`    // One of RESULT_*
	NavState  uint8  `yaml:"nav_state"` // Source mode (values in VehicleStatus)
}

// NewModeCompleted creates a new ModeCompleted with default values.
func NewModeCompleted() *ModeCompleted {
	self := ModeCompleted{}
	self.SetDefaults()
	return &self
}

func (t *ModeCompleted) Clone() *ModeCompleted {
	c := &ModeCompleted{}
	c.Timestamp = t.Timestamp
	c.Result = t.Result
	c.NavState = t.NavState
	return c
}

func (t *ModeCompleted) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ModeCompleted) SetDefaults() {
	t.Timestamp = 0
	t.Result = 0
	t.NavState = 0
}

func (t *ModeCompleted) GetTypeSupport() types.MessageTypeSupport {
	return ModeCompletedTypeSupport
}

// ModeCompletedPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ModeCompletedPublisher struct {
	*rclgo.Publisher
}

// NewModeCompletedPublisher creates and returns a new publisher for the
// ModeCompleted
func NewModeCompletedPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ModeCompletedPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ModeCompletedTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ModeCompletedPublisher{pub}, nil
}

func (p *ModeCompletedPublisher) Publish(msg *ModeCompleted) error {
	return p.Publisher.Publish(msg)
}

// ModeCompletedSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ModeCompletedSubscription struct {
	*rclgo.Subscription
}

// ModeCompletedSubscriptionCallback type is used to provide a subscription
// handler function for a ModeCompletedSubscription.
type ModeCompletedSubscriptionCallback func(msg *ModeCompleted, info *rclgo.MessageInfo, err error)

// NewModeCompletedSubscription creates and returns a new subscription for the
// ModeCompleted
func NewModeCompletedSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ModeCompletedSubscriptionCallback) (*ModeCompletedSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ModeCompleted
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ModeCompletedTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ModeCompletedSubscription{sub}, nil
}

func (s *ModeCompletedSubscription) TakeMessage(out *ModeCompleted) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneModeCompletedSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneModeCompletedSlice(dst, src []ModeCompleted) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ModeCompletedTypeSupport types.MessageTypeSupport = _ModeCompletedTypeSupport{}

type _ModeCompletedTypeSupport struct{}

func (t _ModeCompletedTypeSupport) New() types.Message {
	return NewModeCompleted()
}

func (t _ModeCompletedTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ModeCompleted
	return (unsafe.Pointer)(C.px4_msgs__msg__ModeCompleted__create())
}

func (t _ModeCompletedTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ModeCompleted__destroy((*C.px4_msgs__msg__ModeCompleted)(pointer_to_free))
}

func (t _ModeCompletedTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ModeCompleted)
	mem := (*C.px4_msgs__msg__ModeCompleted)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.result = C.uint8_t(m.Result)
	mem.nav_state = C.uint8_t(m.NavState)
}

func (t _ModeCompletedTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ModeCompleted)
	mem := (*C.px4_msgs__msg__ModeCompleted)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Result = uint8(mem.result)
	m.NavState = uint8(mem.nav_state)
}

func (t _ModeCompletedTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ModeCompleted())
}

type CModeCompleted = C.px4_msgs__msg__ModeCompleted
type CModeCompleted__Sequence = C.px4_msgs__msg__ModeCompleted__Sequence

func ModeCompleted__Sequence_to_Go(goSlice *[]ModeCompleted, cSlice CModeCompleted__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ModeCompleted, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ModeCompletedTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ModeCompleted__Sequence_to_C(cSlice *CModeCompleted__Sequence, goSlice []ModeCompleted) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ModeCompleted)(C.malloc(C.sizeof_struct_px4_msgs__msg__ModeCompleted * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ModeCompletedTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ModeCompleted__Array_to_Go(goSlice []ModeCompleted, cSlice []CModeCompleted) {
	for i := 0; i < len(cSlice); i++ {
		ModeCompletedTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ModeCompleted__Array_to_C(cSlice []CModeCompleted, goSlice []ModeCompleted) {
	for i := 0; i < len(goSlice); i++ {
		ModeCompletedTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
