// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rpm.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Rpm", RpmTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/Rpm", RpmTypeSupport)
}

type Rpm struct {
	Timestamp             uint64  `yaml:"timestamp"`               // time since system start (microseconds)
	IndicatedFrequencyRpm float32 `yaml:"indicated_frequency_rpm"` // indicated rotor Frequency in Revolution per minute
	EstimatedAccurancyRpm float32 `yaml:"estimated_accurancy_rpm"` // estimated accuracy in Revolution per minute
}

// NewRpm creates a new Rpm with default values.
func NewRpm() *Rpm {
	self := Rpm{}
	self.SetDefaults()
	return &self
}

func (t *Rpm) Clone() *Rpm {
	c := &Rpm{}
	c.Timestamp = t.Timestamp
	c.IndicatedFrequencyRpm = t.IndicatedFrequencyRpm
	c.EstimatedAccurancyRpm = t.EstimatedAccurancyRpm
	return c
}

func (t *Rpm) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Rpm) SetDefaults() {
	t.Timestamp = 0
	t.IndicatedFrequencyRpm = 0
	t.EstimatedAccurancyRpm = 0
}

func (t *Rpm) GetTypeSupport() types.MessageTypeSupport {
	return RpmTypeSupport
}

// RpmPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RpmPublisher struct {
	*rclgo.Publisher
}

// NewRpmPublisher creates and returns a new publisher for the
// Rpm
func NewRpmPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RpmPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RpmTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RpmPublisher{pub}, nil
}

func (p *RpmPublisher) Publish(msg *Rpm) error {
	return p.Publisher.Publish(msg)
}

// RpmSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RpmSubscription struct {
	*rclgo.Subscription
}

// RpmSubscriptionCallback type is used to provide a subscription
// handler function for a RpmSubscription.
type RpmSubscriptionCallback func(msg *Rpm, info *rclgo.MessageInfo, err error)

// NewRpmSubscription creates and returns a new subscription for the
// Rpm
func NewRpmSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RpmSubscriptionCallback) (*RpmSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Rpm
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RpmTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RpmSubscription{sub}, nil
}

func (s *RpmSubscription) TakeMessage(out *Rpm) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRpmSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRpmSlice(dst, src []Rpm) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RpmTypeSupport types.MessageTypeSupport = _RpmTypeSupport{}

type _RpmTypeSupport struct{}

func (t _RpmTypeSupport) New() types.Message {
	return NewRpm()
}

func (t _RpmTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Rpm
	return (unsafe.Pointer)(C.px4_msgs__msg__Rpm__create())
}

func (t _RpmTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Rpm__destroy((*C.px4_msgs__msg__Rpm)(pointer_to_free))
}

func (t _RpmTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Rpm)
	mem := (*C.px4_msgs__msg__Rpm)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.indicated_frequency_rpm = C.float(m.IndicatedFrequencyRpm)
	mem.estimated_accurancy_rpm = C.float(m.EstimatedAccurancyRpm)
}

func (t _RpmTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Rpm)
	mem := (*C.px4_msgs__msg__Rpm)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.IndicatedFrequencyRpm = float32(mem.indicated_frequency_rpm)
	m.EstimatedAccurancyRpm = float32(mem.estimated_accurancy_rpm)
}

func (t _RpmTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Rpm())
}

type CRpm = C.px4_msgs__msg__Rpm
type CRpm__Sequence = C.px4_msgs__msg__Rpm__Sequence

func Rpm__Sequence_to_Go(goSlice *[]Rpm, cSlice CRpm__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Rpm, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RpmTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Rpm__Sequence_to_C(cSlice *CRpm__Sequence, goSlice []Rpm) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Rpm)(C.malloc(C.sizeof_struct_px4_msgs__msg__Rpm * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RpmTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Rpm__Array_to_Go(goSlice []Rpm, cSlice []CRpm) {
	for i := 0; i < len(cSlice); i++ {
		RpmTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Rpm__Array_to_C(cSlice []CRpm, goSlice []Rpm) {
	for i := 0; i < len(goSlice); i++ {
		RpmTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
