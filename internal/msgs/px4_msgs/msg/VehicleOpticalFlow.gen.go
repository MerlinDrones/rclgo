// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_optical_flow.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleOpticalFlow", VehicleOpticalFlowTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleOpticalFlow", VehicleOpticalFlowTypeSupport)
}

type VehicleOpticalFlow struct {
	Timestamp             uint64     `yaml:"timestamp"` // time since system start (microseconds)
	TimestampSample       uint64     `yaml:"timestamp_sample"`
	DeviceId              uint32     `yaml:"device_id"`               // unique device ID for the sensor that does not change between power cycles
	PixelFlow             [2]float32 `yaml:"pixel_flow"`              // (radians) accumulated optical flow in radians where a positive value is produced by a RH rotation about the body axis
	DeltaAngle            [3]float32 `yaml:"delta_angle"`             // (radians) accumulated gyro radians where a positive value is produced by a RH rotation about the body axis. (NAN if unavailable)
	DistanceM             float32    `yaml:"distance_m"`              // (meters) Distance to the center of the flow field (NAN if unavailable)
	IntegrationTimespanUs uint32     `yaml:"integration_timespan_us"` // (microseconds) accumulation timespan in microseconds
	Quality               uint8      `yaml:"quality"`                 // Average of quality of accumulated frames, 0: bad quality, 255: maximum quality
	MaxFlowRate           float32    `yaml:"max_flow_rate"`           // (radians/s) Magnitude of maximum angular which the optical flow sensor can measure reliably
	MinGroundDistance     float32    `yaml:"min_ground_distance"`     // (meters) Minimum distance from ground at which the optical flow sensor operates reliably
	MaxGroundDistance     float32    `yaml:"max_ground_distance"`     // (meters) Maximum distance from ground at which the optical flow sensor operates reliably
}

// NewVehicleOpticalFlow creates a new VehicleOpticalFlow with default values.
func NewVehicleOpticalFlow() *VehicleOpticalFlow {
	self := VehicleOpticalFlow{}
	self.SetDefaults()
	return &self
}

func (t *VehicleOpticalFlow) Clone() *VehicleOpticalFlow {
	c := &VehicleOpticalFlow{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.DeviceId = t.DeviceId
	c.PixelFlow = t.PixelFlow
	c.DeltaAngle = t.DeltaAngle
	c.DistanceM = t.DistanceM
	c.IntegrationTimespanUs = t.IntegrationTimespanUs
	c.Quality = t.Quality
	c.MaxFlowRate = t.MaxFlowRate
	c.MinGroundDistance = t.MinGroundDistance
	c.MaxGroundDistance = t.MaxGroundDistance
	return c
}

func (t *VehicleOpticalFlow) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleOpticalFlow) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.DeviceId = 0
	t.PixelFlow = [2]float32{}
	t.DeltaAngle = [3]float32{}
	t.DistanceM = 0
	t.IntegrationTimespanUs = 0
	t.Quality = 0
	t.MaxFlowRate = 0
	t.MinGroundDistance = 0
	t.MaxGroundDistance = 0
}

func (t *VehicleOpticalFlow) GetTypeSupport() types.MessageTypeSupport {
	return VehicleOpticalFlowTypeSupport
}

// VehicleOpticalFlowPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleOpticalFlowPublisher struct {
	*rclgo.Publisher
}

// NewVehicleOpticalFlowPublisher creates and returns a new publisher for the
// VehicleOpticalFlow
func NewVehicleOpticalFlowPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleOpticalFlowPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleOpticalFlowTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleOpticalFlowPublisher{pub}, nil
}

func (p *VehicleOpticalFlowPublisher) Publish(msg *VehicleOpticalFlow) error {
	return p.Publisher.Publish(msg)
}

// VehicleOpticalFlowSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleOpticalFlowSubscription struct {
	*rclgo.Subscription
}

// VehicleOpticalFlowSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleOpticalFlowSubscription.
type VehicleOpticalFlowSubscriptionCallback func(msg *VehicleOpticalFlow, info *rclgo.MessageInfo, err error)

// NewVehicleOpticalFlowSubscription creates and returns a new subscription for the
// VehicleOpticalFlow
func NewVehicleOpticalFlowSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleOpticalFlowSubscriptionCallback) (*VehicleOpticalFlowSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleOpticalFlow
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleOpticalFlowTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleOpticalFlowSubscription{sub}, nil
}

func (s *VehicleOpticalFlowSubscription) TakeMessage(out *VehicleOpticalFlow) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleOpticalFlowSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleOpticalFlowSlice(dst, src []VehicleOpticalFlow) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleOpticalFlowTypeSupport types.MessageTypeSupport = _VehicleOpticalFlowTypeSupport{}

type _VehicleOpticalFlowTypeSupport struct{}

func (t _VehicleOpticalFlowTypeSupport) New() types.Message {
	return NewVehicleOpticalFlow()
}

func (t _VehicleOpticalFlowTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleOpticalFlow
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleOpticalFlow__create())
}

func (t _VehicleOpticalFlowTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleOpticalFlow__destroy((*C.px4_msgs__msg__VehicleOpticalFlow)(pointer_to_free))
}

func (t _VehicleOpticalFlowTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleOpticalFlow)
	mem := (*C.px4_msgs__msg__VehicleOpticalFlow)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.device_id = C.uint32_t(m.DeviceId)
	cSlice_pixel_flow := mem.pixel_flow[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_pixel_flow)), m.PixelFlow[:])
	cSlice_delta_angle := mem.delta_angle[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_angle)), m.DeltaAngle[:])
	mem.distance_m = C.float(m.DistanceM)
	mem.integration_timespan_us = C.uint32_t(m.IntegrationTimespanUs)
	mem.quality = C.uint8_t(m.Quality)
	mem.max_flow_rate = C.float(m.MaxFlowRate)
	mem.min_ground_distance = C.float(m.MinGroundDistance)
	mem.max_ground_distance = C.float(m.MaxGroundDistance)
}

func (t _VehicleOpticalFlowTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleOpticalFlow)
	mem := (*C.px4_msgs__msg__VehicleOpticalFlow)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.DeviceId = uint32(mem.device_id)
	cSlice_pixel_flow := mem.pixel_flow[:]
	primitives.Float32__Array_to_Go(m.PixelFlow[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_pixel_flow)))
	cSlice_delta_angle := mem.delta_angle[:]
	primitives.Float32__Array_to_Go(m.DeltaAngle[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_angle)))
	m.DistanceM = float32(mem.distance_m)
	m.IntegrationTimespanUs = uint32(mem.integration_timespan_us)
	m.Quality = uint8(mem.quality)
	m.MaxFlowRate = float32(mem.max_flow_rate)
	m.MinGroundDistance = float32(mem.min_ground_distance)
	m.MaxGroundDistance = float32(mem.max_ground_distance)
}

func (t _VehicleOpticalFlowTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleOpticalFlow())
}

type CVehicleOpticalFlow = C.px4_msgs__msg__VehicleOpticalFlow
type CVehicleOpticalFlow__Sequence = C.px4_msgs__msg__VehicleOpticalFlow__Sequence

func VehicleOpticalFlow__Sequence_to_Go(goSlice *[]VehicleOpticalFlow, cSlice CVehicleOpticalFlow__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleOpticalFlow, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleOpticalFlowTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleOpticalFlow__Sequence_to_C(cSlice *CVehicleOpticalFlow__Sequence, goSlice []VehicleOpticalFlow) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleOpticalFlow)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleOpticalFlow * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleOpticalFlowTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleOpticalFlow__Array_to_Go(goSlice []VehicleOpticalFlow, cSlice []CVehicleOpticalFlow) {
	for i := 0; i < len(cSlice); i++ {
		VehicleOpticalFlowTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleOpticalFlow__Array_to_C(cSlice []CVehicleOpticalFlow, goSlice []VehicleOpticalFlow) {
	for i := 0; i < len(goSlice); i++ {
		VehicleOpticalFlowTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
