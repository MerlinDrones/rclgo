// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/position_controller_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/PositionControllerStatus", PositionControllerStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/PositionControllerStatus", PositionControllerStatusTypeSupport)
}

type PositionControllerStatus struct {
	Timestamp          uint64  `yaml:"timestamp"`           // time since system start (microseconds)
	NavRoll            float32 `yaml:"nav_roll"`            // Roll setpoint [rad]
	NavPitch           float32 `yaml:"nav_pitch"`           // Pitch setpoint [rad]
	NavBearing         float32 `yaml:"nav_bearing"`         // Bearing angle[rad]
	TargetBearing      float32 `yaml:"target_bearing"`      // Bearing angle from aircraft to current target [rad]
	XtrackError        float32 `yaml:"xtrack_error"`        // Signed track error [m]
	WpDist             float32 `yaml:"wp_dist"`             // Distance to active (next) waypoint [m]
	AcceptanceRadius   float32 `yaml:"acceptance_radius"`   // Current horizontal acceptance radius [m]
	YawAcceptance      float32 `yaml:"yaw_acceptance"`      // Yaw acceptance error[rad]
	AltitudeAcceptance float32 `yaml:"altitude_acceptance"` // Current vertical acceptance error [m]
	Type               uint8   `yaml:"type"`                // Current (applied) position setpoint type (see PositionSetpoint.msg)
}

// NewPositionControllerStatus creates a new PositionControllerStatus with default values.
func NewPositionControllerStatus() *PositionControllerStatus {
	self := PositionControllerStatus{}
	self.SetDefaults()
	return &self
}

func (t *PositionControllerStatus) Clone() *PositionControllerStatus {
	c := &PositionControllerStatus{}
	c.Timestamp = t.Timestamp
	c.NavRoll = t.NavRoll
	c.NavPitch = t.NavPitch
	c.NavBearing = t.NavBearing
	c.TargetBearing = t.TargetBearing
	c.XtrackError = t.XtrackError
	c.WpDist = t.WpDist
	c.AcceptanceRadius = t.AcceptanceRadius
	c.YawAcceptance = t.YawAcceptance
	c.AltitudeAcceptance = t.AltitudeAcceptance
	c.Type = t.Type
	return c
}

func (t *PositionControllerStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *PositionControllerStatus) SetDefaults() {
	t.Timestamp = 0
	t.NavRoll = 0
	t.NavPitch = 0
	t.NavBearing = 0
	t.TargetBearing = 0
	t.XtrackError = 0
	t.WpDist = 0
	t.AcceptanceRadius = 0
	t.YawAcceptance = 0
	t.AltitudeAcceptance = 0
	t.Type = 0
}

func (t *PositionControllerStatus) GetTypeSupport() types.MessageTypeSupport {
	return PositionControllerStatusTypeSupport
}

// PositionControllerStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PositionControllerStatusPublisher struct {
	*rclgo.Publisher
}

// NewPositionControllerStatusPublisher creates and returns a new publisher for the
// PositionControllerStatus
func NewPositionControllerStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PositionControllerStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PositionControllerStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PositionControllerStatusPublisher{pub}, nil
}

func (p *PositionControllerStatusPublisher) Publish(msg *PositionControllerStatus) error {
	return p.Publisher.Publish(msg)
}

// PositionControllerStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PositionControllerStatusSubscription struct {
	*rclgo.Subscription
}

// PositionControllerStatusSubscriptionCallback type is used to provide a subscription
// handler function for a PositionControllerStatusSubscription.
type PositionControllerStatusSubscriptionCallback func(msg *PositionControllerStatus, info *rclgo.MessageInfo, err error)

// NewPositionControllerStatusSubscription creates and returns a new subscription for the
// PositionControllerStatus
func NewPositionControllerStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PositionControllerStatusSubscriptionCallback) (*PositionControllerStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg PositionControllerStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PositionControllerStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PositionControllerStatusSubscription{sub}, nil
}

func (s *PositionControllerStatusSubscription) TakeMessage(out *PositionControllerStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePositionControllerStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePositionControllerStatusSlice(dst, src []PositionControllerStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PositionControllerStatusTypeSupport types.MessageTypeSupport = _PositionControllerStatusTypeSupport{}

type _PositionControllerStatusTypeSupport struct{}

func (t _PositionControllerStatusTypeSupport) New() types.Message {
	return NewPositionControllerStatus()
}

func (t _PositionControllerStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__PositionControllerStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__PositionControllerStatus__create())
}

func (t _PositionControllerStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__PositionControllerStatus__destroy((*C.px4_msgs__msg__PositionControllerStatus)(pointer_to_free))
}

func (t _PositionControllerStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*PositionControllerStatus)
	mem := (*C.px4_msgs__msg__PositionControllerStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.nav_roll = C.float(m.NavRoll)
	mem.nav_pitch = C.float(m.NavPitch)
	mem.nav_bearing = C.float(m.NavBearing)
	mem.target_bearing = C.float(m.TargetBearing)
	mem.xtrack_error = C.float(m.XtrackError)
	mem.wp_dist = C.float(m.WpDist)
	mem.acceptance_radius = C.float(m.AcceptanceRadius)
	mem.yaw_acceptance = C.float(m.YawAcceptance)
	mem.altitude_acceptance = C.float(m.AltitudeAcceptance)
	mem._type = C.uint8_t(m.Type)
}

func (t _PositionControllerStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*PositionControllerStatus)
	mem := (*C.px4_msgs__msg__PositionControllerStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.NavRoll = float32(mem.nav_roll)
	m.NavPitch = float32(mem.nav_pitch)
	m.NavBearing = float32(mem.nav_bearing)
	m.TargetBearing = float32(mem.target_bearing)
	m.XtrackError = float32(mem.xtrack_error)
	m.WpDist = float32(mem.wp_dist)
	m.AcceptanceRadius = float32(mem.acceptance_radius)
	m.YawAcceptance = float32(mem.yaw_acceptance)
	m.AltitudeAcceptance = float32(mem.altitude_acceptance)
	m.Type = uint8(mem._type)
}

func (t _PositionControllerStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__PositionControllerStatus())
}

type CPositionControllerStatus = C.px4_msgs__msg__PositionControllerStatus
type CPositionControllerStatus__Sequence = C.px4_msgs__msg__PositionControllerStatus__Sequence

func PositionControllerStatus__Sequence_to_Go(goSlice *[]PositionControllerStatus, cSlice CPositionControllerStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]PositionControllerStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PositionControllerStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func PositionControllerStatus__Sequence_to_C(cSlice *CPositionControllerStatus__Sequence, goSlice []PositionControllerStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__PositionControllerStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__PositionControllerStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PositionControllerStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func PositionControllerStatus__Array_to_Go(goSlice []PositionControllerStatus, cSlice []CPositionControllerStatus) {
	for i := 0; i < len(cSlice); i++ {
		PositionControllerStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func PositionControllerStatus__Array_to_C(cSlice []CPositionControllerStatus, goSlice []PositionControllerStatus) {
	for i := 0; i < len(goSlice); i++ {
		PositionControllerStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
