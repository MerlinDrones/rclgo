// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_command_ack.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleCommandAck", VehicleCommandAckTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleCommandAck", VehicleCommandAckTypeSupport)
}

const (
	VehicleCommandAck_VEHICLE_CMD_RESULT_ACCEPTED             uint8  = 0 // Command ACCEPTED and EXECUTED |. Result cases. This follows the MAVLink MAV_RESULT enum definition
	VehicleCommandAck_VEHICLE_CMD_RESULT_TEMPORARILY_REJECTED uint8  = 1 // Command TEMPORARY REJECTED/DENIED |
	VehicleCommandAck_VEHICLE_CMD_RESULT_DENIED               uint8  = 2 // Command PERMANENTLY DENIED |
	VehicleCommandAck_VEHICLE_CMD_RESULT_UNSUPPORTED          uint8  = 3 // Command UNKNOWN/UNSUPPORTED |
	VehicleCommandAck_VEHICLE_CMD_RESULT_FAILED               uint8  = 4 // Command executed, but failed |
	VehicleCommandAck_VEHICLE_CMD_RESULT_IN_PROGRESS          uint8  = 5 // Command being executed |
	VehicleCommandAck_VEHICLE_CMD_RESULT_CANCELLED            uint8  = 6 // Command Canceled
	VehicleCommandAck_ARM_AUTH_DENIED_REASON_GENERIC          uint16 = 0 // Arming denied specific cases
	VehicleCommandAck_ARM_AUTH_DENIED_REASON_NONE             uint16 = 1
	VehicleCommandAck_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT uint16 = 2
	VehicleCommandAck_ARM_AUTH_DENIED_REASON_TIMEOUT          uint16 = 3
	VehicleCommandAck_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE  uint16 = 4
	VehicleCommandAck_ARM_AUTH_DENIED_REASON_BAD_WEATHER      uint16 = 5
	VehicleCommandAck_ORB_QUEUE_LENGTH                        uint8  = 4
)

type VehicleCommandAck struct {
	Timestamp       uint64 `yaml:"timestamp"`     // time since system start (microseconds)
	Command         uint32 `yaml:"command"`       // Command that is being acknowledged
	Result          uint8  `yaml:"result"`        // Command result
	ResultParam1    uint8  `yaml:"result_param1"` // Also used as progress[%], it can be set with the reason why the command was denied, or the progress percentage when result is MAV_RESULT_IN_PROGRESS
	ResultParam2    int32  `yaml:"result_param2"` // Additional parameter of the result, example: which parameter of MAV_CMD_NAV_WAYPOINT caused it to be denied.
	TargetSystem    uint8  `yaml:"target_system"`
	TargetComponent uint16 `yaml:"target_component"` // Target component / mode executor
	FromExternal    bool   `yaml:"from_external"`    // Indicates if the command came from an external source
}

// NewVehicleCommandAck creates a new VehicleCommandAck with default values.
func NewVehicleCommandAck() *VehicleCommandAck {
	self := VehicleCommandAck{}
	self.SetDefaults()
	return &self
}

func (t *VehicleCommandAck) Clone() *VehicleCommandAck {
	c := &VehicleCommandAck{}
	c.Timestamp = t.Timestamp
	c.Command = t.Command
	c.Result = t.Result
	c.ResultParam1 = t.ResultParam1
	c.ResultParam2 = t.ResultParam2
	c.TargetSystem = t.TargetSystem
	c.TargetComponent = t.TargetComponent
	c.FromExternal = t.FromExternal
	return c
}

func (t *VehicleCommandAck) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleCommandAck) SetDefaults() {
	t.Timestamp = 0
	t.Command = 0
	t.Result = 0
	t.ResultParam1 = 0
	t.ResultParam2 = 0
	t.TargetSystem = 0
	t.TargetComponent = 0
	t.FromExternal = false
}

func (t *VehicleCommandAck) GetTypeSupport() types.MessageTypeSupport {
	return VehicleCommandAckTypeSupport
}

// VehicleCommandAckPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleCommandAckPublisher struct {
	*rclgo.Publisher
}

// NewVehicleCommandAckPublisher creates and returns a new publisher for the
// VehicleCommandAck
func NewVehicleCommandAckPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleCommandAckPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleCommandAckTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleCommandAckPublisher{pub}, nil
}

func (p *VehicleCommandAckPublisher) Publish(msg *VehicleCommandAck) error {
	return p.Publisher.Publish(msg)
}

// VehicleCommandAckSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleCommandAckSubscription struct {
	*rclgo.Subscription
}

// VehicleCommandAckSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleCommandAckSubscription.
type VehicleCommandAckSubscriptionCallback func(msg *VehicleCommandAck, info *rclgo.MessageInfo, err error)

// NewVehicleCommandAckSubscription creates and returns a new subscription for the
// VehicleCommandAck
func NewVehicleCommandAckSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleCommandAckSubscriptionCallback) (*VehicleCommandAckSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleCommandAck
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleCommandAckTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleCommandAckSubscription{sub}, nil
}

func (s *VehicleCommandAckSubscription) TakeMessage(out *VehicleCommandAck) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleCommandAckSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleCommandAckSlice(dst, src []VehicleCommandAck) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleCommandAckTypeSupport types.MessageTypeSupport = _VehicleCommandAckTypeSupport{}

type _VehicleCommandAckTypeSupport struct{}

func (t _VehicleCommandAckTypeSupport) New() types.Message {
	return NewVehicleCommandAck()
}

func (t _VehicleCommandAckTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleCommandAck
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleCommandAck__create())
}

func (t _VehicleCommandAckTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleCommandAck__destroy((*C.px4_msgs__msg__VehicleCommandAck)(pointer_to_free))
}

func (t _VehicleCommandAckTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleCommandAck)
	mem := (*C.px4_msgs__msg__VehicleCommandAck)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.command = C.uint32_t(m.Command)
	mem.result = C.uint8_t(m.Result)
	mem.result_param1 = C.uint8_t(m.ResultParam1)
	mem.result_param2 = C.int32_t(m.ResultParam2)
	mem.target_system = C.uint8_t(m.TargetSystem)
	mem.target_component = C.uint16_t(m.TargetComponent)
	mem.from_external = C.bool(m.FromExternal)
}

func (t _VehicleCommandAckTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleCommandAck)
	mem := (*C.px4_msgs__msg__VehicleCommandAck)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Command = uint32(mem.command)
	m.Result = uint8(mem.result)
	m.ResultParam1 = uint8(mem.result_param1)
	m.ResultParam2 = int32(mem.result_param2)
	m.TargetSystem = uint8(mem.target_system)
	m.TargetComponent = uint16(mem.target_component)
	m.FromExternal = bool(mem.from_external)
}

func (t _VehicleCommandAckTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleCommandAck())
}

type CVehicleCommandAck = C.px4_msgs__msg__VehicleCommandAck
type CVehicleCommandAck__Sequence = C.px4_msgs__msg__VehicleCommandAck__Sequence

func VehicleCommandAck__Sequence_to_Go(goSlice *[]VehicleCommandAck, cSlice CVehicleCommandAck__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleCommandAck, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleCommandAckTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleCommandAck__Sequence_to_C(cSlice *CVehicleCommandAck__Sequence, goSlice []VehicleCommandAck) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleCommandAck)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleCommandAck * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleCommandAckTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleCommandAck__Array_to_Go(goSlice []VehicleCommandAck, cSlice []CVehicleCommandAck) {
	for i := 0; i < len(cSlice); i++ {
		VehicleCommandAckTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleCommandAck__Array_to_C(cSlice []CVehicleCommandAck, goSlice []VehicleCommandAck) {
	for i := 0; i < len(goSlice); i++ {
		VehicleCommandAckTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
