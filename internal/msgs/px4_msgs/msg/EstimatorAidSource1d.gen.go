// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/estimator_aid_source1d.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/EstimatorAidSource1d", EstimatorAidSource1dTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/EstimatorAidSource1d", EstimatorAidSource1dTypeSupport)
}

type EstimatorAidSource1d struct {
	Timestamp           uint64  `yaml:"timestamp"`        // time since system start (microseconds)
	TimestampSample     uint64  `yaml:"timestamp_sample"` // the timestamp of the raw data (microseconds)
	EstimatorInstance   uint8   `yaml:"estimator_instance"`
	DeviceId            uint32  `yaml:"device_id"`
	TimeLastFuse        uint64  `yaml:"time_last_fuse"`
	Observation         float32 `yaml:"observation"`
	ObservationVariance float32 `yaml:"observation_variance"`
	Innovation          float32 `yaml:"innovation"`
	InnovationFiltered  float32 `yaml:"innovation_filtered"`
	InnovationVariance  float32 `yaml:"innovation_variance"`
	TestRatio           float32 `yaml:"test_ratio"`          // normalized innovation squared
	TestRatioFiltered   float32 `yaml:"test_ratio_filtered"` // signed filtered test ratio
	InnovationRejected  bool    `yaml:"innovation_rejected"` // true if the observation has been rejected
	Fused               bool    `yaml:"fused"`               // true if the sample was successfully fused
}

// NewEstimatorAidSource1d creates a new EstimatorAidSource1d with default values.
func NewEstimatorAidSource1d() *EstimatorAidSource1d {
	self := EstimatorAidSource1d{}
	self.SetDefaults()
	return &self
}

func (t *EstimatorAidSource1d) Clone() *EstimatorAidSource1d {
	c := &EstimatorAidSource1d{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.EstimatorInstance = t.EstimatorInstance
	c.DeviceId = t.DeviceId
	c.TimeLastFuse = t.TimeLastFuse
	c.Observation = t.Observation
	c.ObservationVariance = t.ObservationVariance
	c.Innovation = t.Innovation
	c.InnovationFiltered = t.InnovationFiltered
	c.InnovationVariance = t.InnovationVariance
	c.TestRatio = t.TestRatio
	c.TestRatioFiltered = t.TestRatioFiltered
	c.InnovationRejected = t.InnovationRejected
	c.Fused = t.Fused
	return c
}

func (t *EstimatorAidSource1d) CloneMsg() types.Message {
	return t.Clone()
}

func (t *EstimatorAidSource1d) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.EstimatorInstance = 0
	t.DeviceId = 0
	t.TimeLastFuse = 0
	t.Observation = 0
	t.ObservationVariance = 0
	t.Innovation = 0
	t.InnovationFiltered = 0
	t.InnovationVariance = 0
	t.TestRatio = 0
	t.TestRatioFiltered = 0
	t.InnovationRejected = false
	t.Fused = false
}

func (t *EstimatorAidSource1d) GetTypeSupport() types.MessageTypeSupport {
	return EstimatorAidSource1dTypeSupport
}

// EstimatorAidSource1dPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EstimatorAidSource1dPublisher struct {
	*rclgo.Publisher
}

// NewEstimatorAidSource1dPublisher creates and returns a new publisher for the
// EstimatorAidSource1d
func NewEstimatorAidSource1dPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EstimatorAidSource1dPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EstimatorAidSource1dTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EstimatorAidSource1dPublisher{pub}, nil
}

func (p *EstimatorAidSource1dPublisher) Publish(msg *EstimatorAidSource1d) error {
	return p.Publisher.Publish(msg)
}

// EstimatorAidSource1dSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EstimatorAidSource1dSubscription struct {
	*rclgo.Subscription
}

// EstimatorAidSource1dSubscriptionCallback type is used to provide a subscription
// handler function for a EstimatorAidSource1dSubscription.
type EstimatorAidSource1dSubscriptionCallback func(msg *EstimatorAidSource1d, info *rclgo.MessageInfo, err error)

// NewEstimatorAidSource1dSubscription creates and returns a new subscription for the
// EstimatorAidSource1d
func NewEstimatorAidSource1dSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EstimatorAidSource1dSubscriptionCallback) (*EstimatorAidSource1dSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg EstimatorAidSource1d
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EstimatorAidSource1dTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EstimatorAidSource1dSubscription{sub}, nil
}

func (s *EstimatorAidSource1dSubscription) TakeMessage(out *EstimatorAidSource1d) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEstimatorAidSource1dSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEstimatorAidSource1dSlice(dst, src []EstimatorAidSource1d) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EstimatorAidSource1dTypeSupport types.MessageTypeSupport = _EstimatorAidSource1dTypeSupport{}

type _EstimatorAidSource1dTypeSupport struct{}

func (t _EstimatorAidSource1dTypeSupport) New() types.Message {
	return NewEstimatorAidSource1d()
}

func (t _EstimatorAidSource1dTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__EstimatorAidSource1d
	return (unsafe.Pointer)(C.px4_msgs__msg__EstimatorAidSource1d__create())
}

func (t _EstimatorAidSource1dTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__EstimatorAidSource1d__destroy((*C.px4_msgs__msg__EstimatorAidSource1d)(pointer_to_free))
}

func (t _EstimatorAidSource1dTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*EstimatorAidSource1d)
	mem := (*C.px4_msgs__msg__EstimatorAidSource1d)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.estimator_instance = C.uint8_t(m.EstimatorInstance)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.time_last_fuse = C.uint64_t(m.TimeLastFuse)
	mem.observation = C.float(m.Observation)
	mem.observation_variance = C.float(m.ObservationVariance)
	mem.innovation = C.float(m.Innovation)
	mem.innovation_filtered = C.float(m.InnovationFiltered)
	mem.innovation_variance = C.float(m.InnovationVariance)
	mem.test_ratio = C.float(m.TestRatio)
	mem.test_ratio_filtered = C.float(m.TestRatioFiltered)
	mem.innovation_rejected = C.bool(m.InnovationRejected)
	mem.fused = C.bool(m.Fused)
}

func (t _EstimatorAidSource1dTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*EstimatorAidSource1d)
	mem := (*C.px4_msgs__msg__EstimatorAidSource1d)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.EstimatorInstance = uint8(mem.estimator_instance)
	m.DeviceId = uint32(mem.device_id)
	m.TimeLastFuse = uint64(mem.time_last_fuse)
	m.Observation = float32(mem.observation)
	m.ObservationVariance = float32(mem.observation_variance)
	m.Innovation = float32(mem.innovation)
	m.InnovationFiltered = float32(mem.innovation_filtered)
	m.InnovationVariance = float32(mem.innovation_variance)
	m.TestRatio = float32(mem.test_ratio)
	m.TestRatioFiltered = float32(mem.test_ratio_filtered)
	m.InnovationRejected = bool(mem.innovation_rejected)
	m.Fused = bool(mem.fused)
}

func (t _EstimatorAidSource1dTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__EstimatorAidSource1d())
}

type CEstimatorAidSource1d = C.px4_msgs__msg__EstimatorAidSource1d
type CEstimatorAidSource1d__Sequence = C.px4_msgs__msg__EstimatorAidSource1d__Sequence

func EstimatorAidSource1d__Sequence_to_Go(goSlice *[]EstimatorAidSource1d, cSlice CEstimatorAidSource1d__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]EstimatorAidSource1d, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EstimatorAidSource1dTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func EstimatorAidSource1d__Sequence_to_C(cSlice *CEstimatorAidSource1d__Sequence, goSlice []EstimatorAidSource1d) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__EstimatorAidSource1d)(C.malloc(C.sizeof_struct_px4_msgs__msg__EstimatorAidSource1d * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EstimatorAidSource1dTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func EstimatorAidSource1d__Array_to_Go(goSlice []EstimatorAidSource1d, cSlice []CEstimatorAidSource1d) {
	for i := 0; i < len(cSlice); i++ {
		EstimatorAidSource1dTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func EstimatorAidSource1d__Array_to_C(cSlice []CEstimatorAidSource1d, goSlice []EstimatorAidSource1d) {
	for i := 0; i < len(goSlice); i++ {
		EstimatorAidSource1dTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
