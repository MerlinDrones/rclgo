// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_attitude.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleAttitude", VehicleAttitudeTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleAttitude", VehicleAttitudeTypeSupport)
}

type VehicleAttitude struct {
	Timestamp        uint64     `yaml:"timestamp"`          // time since system start (microseconds)
	TimestampSample  uint64     `yaml:"timestamp_sample"`   // the timestamp of the raw data (microseconds)
	Q                [4]float32 `yaml:"q"`                  // Quaternion rotation from the FRD body frame to the NED earth frame
	DeltaQReset      [4]float32 `yaml:"delta_q_reset"`      // Amount by which quaternion has changed during last reset
	QuatResetCounter uint8      `yaml:"quat_reset_counter"` // Quaternion reset counter
}

// NewVehicleAttitude creates a new VehicleAttitude with default values.
func NewVehicleAttitude() *VehicleAttitude {
	self := VehicleAttitude{}
	self.SetDefaults()
	return &self
}

func (t *VehicleAttitude) Clone() *VehicleAttitude {
	c := &VehicleAttitude{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.Q = t.Q
	c.DeltaQReset = t.DeltaQReset
	c.QuatResetCounter = t.QuatResetCounter
	return c
}

func (t *VehicleAttitude) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleAttitude) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.Q = [4]float32{}
	t.DeltaQReset = [4]float32{}
	t.QuatResetCounter = 0
}

func (t *VehicleAttitude) GetTypeSupport() types.MessageTypeSupport {
	return VehicleAttitudeTypeSupport
}

// VehicleAttitudePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleAttitudePublisher struct {
	*rclgo.Publisher
}

// NewVehicleAttitudePublisher creates and returns a new publisher for the
// VehicleAttitude
func NewVehicleAttitudePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleAttitudePublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleAttitudeTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleAttitudePublisher{pub}, nil
}

func (p *VehicleAttitudePublisher) Publish(msg *VehicleAttitude) error {
	return p.Publisher.Publish(msg)
}

// VehicleAttitudeSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleAttitudeSubscription struct {
	*rclgo.Subscription
}

// VehicleAttitudeSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleAttitudeSubscription.
type VehicleAttitudeSubscriptionCallback func(msg *VehicleAttitude, info *rclgo.MessageInfo, err error)

// NewVehicleAttitudeSubscription creates and returns a new subscription for the
// VehicleAttitude
func NewVehicleAttitudeSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleAttitudeSubscriptionCallback) (*VehicleAttitudeSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleAttitude
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleAttitudeTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleAttitudeSubscription{sub}, nil
}

func (s *VehicleAttitudeSubscription) TakeMessage(out *VehicleAttitude) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleAttitudeSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleAttitudeSlice(dst, src []VehicleAttitude) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleAttitudeTypeSupport types.MessageTypeSupport = _VehicleAttitudeTypeSupport{}

type _VehicleAttitudeTypeSupport struct{}

func (t _VehicleAttitudeTypeSupport) New() types.Message {
	return NewVehicleAttitude()
}

func (t _VehicleAttitudeTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleAttitude
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleAttitude__create())
}

func (t _VehicleAttitudeTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleAttitude__destroy((*C.px4_msgs__msg__VehicleAttitude)(pointer_to_free))
}

func (t _VehicleAttitudeTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleAttitude)
	mem := (*C.px4_msgs__msg__VehicleAttitude)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	cSlice_q := mem.q[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_q)), m.Q[:])
	cSlice_delta_q_reset := mem.delta_q_reset[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_q_reset)), m.DeltaQReset[:])
	mem.quat_reset_counter = C.uint8_t(m.QuatResetCounter)
}

func (t _VehicleAttitudeTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleAttitude)
	mem := (*C.px4_msgs__msg__VehicleAttitude)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	cSlice_q := mem.q[:]
	primitives.Float32__Array_to_Go(m.Q[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_q)))
	cSlice_delta_q_reset := mem.delta_q_reset[:]
	primitives.Float32__Array_to_Go(m.DeltaQReset[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_q_reset)))
	m.QuatResetCounter = uint8(mem.quat_reset_counter)
}

func (t _VehicleAttitudeTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleAttitude())
}

type CVehicleAttitude = C.px4_msgs__msg__VehicleAttitude
type CVehicleAttitude__Sequence = C.px4_msgs__msg__VehicleAttitude__Sequence

func VehicleAttitude__Sequence_to_Go(goSlice *[]VehicleAttitude, cSlice CVehicleAttitude__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleAttitude, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleAttitudeTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleAttitude__Sequence_to_C(cSlice *CVehicleAttitude__Sequence, goSlice []VehicleAttitude) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleAttitude)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleAttitude * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleAttitudeTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleAttitude__Array_to_Go(goSlice []VehicleAttitude, cSlice []CVehicleAttitude) {
	for i := 0; i < len(cSlice); i++ {
		VehicleAttitudeTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleAttitude__Array_to_C(cSlice []CVehicleAttitude, goSlice []VehicleAttitude) {
	for i := 0; i < len(goSlice); i++ {
		VehicleAttitudeTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
