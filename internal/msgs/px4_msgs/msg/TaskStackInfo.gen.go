// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/task_stack_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TaskStackInfo", TaskStackInfoTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/TaskStackInfo", TaskStackInfoTypeSupport)
}

const (
	TaskStackInfo_ORB_QUEUE_LENGTH uint8 = 2
)

type TaskStackInfo struct {
	Timestamp uint64   `yaml:"timestamp"` // time since system start (microseconds)
	StackFree uint16   `yaml:"stack_free"`
	TaskName  [24]byte `yaml:"task_name"`
}

// NewTaskStackInfo creates a new TaskStackInfo with default values.
func NewTaskStackInfo() *TaskStackInfo {
	self := TaskStackInfo{}
	self.SetDefaults()
	return &self
}

func (t *TaskStackInfo) Clone() *TaskStackInfo {
	c := &TaskStackInfo{}
	c.Timestamp = t.Timestamp
	c.StackFree = t.StackFree
	c.TaskName = t.TaskName
	return c
}

func (t *TaskStackInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TaskStackInfo) SetDefaults() {
	t.Timestamp = 0
	t.StackFree = 0
	t.TaskName = [24]byte{}
}

func (t *TaskStackInfo) GetTypeSupport() types.MessageTypeSupport {
	return TaskStackInfoTypeSupport
}

// TaskStackInfoPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TaskStackInfoPublisher struct {
	*rclgo.Publisher
}

// NewTaskStackInfoPublisher creates and returns a new publisher for the
// TaskStackInfo
func NewTaskStackInfoPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TaskStackInfoPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TaskStackInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TaskStackInfoPublisher{pub}, nil
}

func (p *TaskStackInfoPublisher) Publish(msg *TaskStackInfo) error {
	return p.Publisher.Publish(msg)
}

// TaskStackInfoSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TaskStackInfoSubscription struct {
	*rclgo.Subscription
}

// TaskStackInfoSubscriptionCallback type is used to provide a subscription
// handler function for a TaskStackInfoSubscription.
type TaskStackInfoSubscriptionCallback func(msg *TaskStackInfo, info *rclgo.MessageInfo, err error)

// NewTaskStackInfoSubscription creates and returns a new subscription for the
// TaskStackInfo
func NewTaskStackInfoSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TaskStackInfoSubscriptionCallback) (*TaskStackInfoSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TaskStackInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TaskStackInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TaskStackInfoSubscription{sub}, nil
}

func (s *TaskStackInfoSubscription) TakeMessage(out *TaskStackInfo) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTaskStackInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTaskStackInfoSlice(dst, src []TaskStackInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TaskStackInfoTypeSupport types.MessageTypeSupport = _TaskStackInfoTypeSupport{}

type _TaskStackInfoTypeSupport struct{}

func (t _TaskStackInfoTypeSupport) New() types.Message {
	return NewTaskStackInfo()
}

func (t _TaskStackInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TaskStackInfo
	return (unsafe.Pointer)(C.px4_msgs__msg__TaskStackInfo__create())
}

func (t _TaskStackInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TaskStackInfo__destroy((*C.px4_msgs__msg__TaskStackInfo)(pointer_to_free))
}

func (t _TaskStackInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TaskStackInfo)
	mem := (*C.px4_msgs__msg__TaskStackInfo)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.stack_free = C.uint16_t(m.StackFree)
	cSlice_task_name := mem.task_name[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_task_name)), m.TaskName[:])
}

func (t _TaskStackInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TaskStackInfo)
	mem := (*C.px4_msgs__msg__TaskStackInfo)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.StackFree = uint16(mem.stack_free)
	cSlice_task_name := mem.task_name[:]
	primitives.Char__Array_to_Go(m.TaskName[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_task_name)))
}

func (t _TaskStackInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TaskStackInfo())
}

type CTaskStackInfo = C.px4_msgs__msg__TaskStackInfo
type CTaskStackInfo__Sequence = C.px4_msgs__msg__TaskStackInfo__Sequence

func TaskStackInfo__Sequence_to_Go(goSlice *[]TaskStackInfo, cSlice CTaskStackInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TaskStackInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TaskStackInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TaskStackInfo__Sequence_to_C(cSlice *CTaskStackInfo__Sequence, goSlice []TaskStackInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TaskStackInfo)(C.malloc(C.sizeof_struct_px4_msgs__msg__TaskStackInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TaskStackInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TaskStackInfo__Array_to_Go(goSlice []TaskStackInfo, cSlice []CTaskStackInfo) {
	for i := 0; i < len(cSlice); i++ {
		TaskStackInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TaskStackInfo__Array_to_C(cSlice []CTaskStackInfo, goSlice []TaskStackInfo) {
	for i := 0; i < len(goSlice); i++ {
		TaskStackInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
