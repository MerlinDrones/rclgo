// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/irlock_report.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/IrlockReport", IrlockReportTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/IrlockReport", IrlockReportTypeSupport)
}

type IrlockReport struct {
	Timestamp uint64  `yaml:"timestamp"` // time since system start (microseconds)
	Signature uint16  `yaml:"signature"`
	PosX      float32 `yaml:"pos_x"`  // tan(theta), where theta is the angle between the target and the camera center of projection in camera x-axis. When looking along the optical axis of the camera, x points right, y points down, and z points along the optical axis.
	PosY      float32 `yaml:"pos_y"`  // tan(theta), where theta is the angle between the target and the camera center of projection in camera y-axis
	SizeX     float32 `yaml:"size_x"` // /** size of target along camera x-axis in units of tan(theta) **/
	SizeY     float32 `yaml:"size_y"` // /** size of target along camera y-axis in units of tan(theta) **/
}

// NewIrlockReport creates a new IrlockReport with default values.
func NewIrlockReport() *IrlockReport {
	self := IrlockReport{}
	self.SetDefaults()
	return &self
}

func (t *IrlockReport) Clone() *IrlockReport {
	c := &IrlockReport{}
	c.Timestamp = t.Timestamp
	c.Signature = t.Signature
	c.PosX = t.PosX
	c.PosY = t.PosY
	c.SizeX = t.SizeX
	c.SizeY = t.SizeY
	return c
}

func (t *IrlockReport) CloneMsg() types.Message {
	return t.Clone()
}

func (t *IrlockReport) SetDefaults() {
	t.Timestamp = 0
	t.Signature = 0
	t.PosX = 0
	t.PosY = 0
	t.SizeX = 0
	t.SizeY = 0
}

func (t *IrlockReport) GetTypeSupport() types.MessageTypeSupport {
	return IrlockReportTypeSupport
}

// IrlockReportPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type IrlockReportPublisher struct {
	*rclgo.Publisher
}

// NewIrlockReportPublisher creates and returns a new publisher for the
// IrlockReport
func NewIrlockReportPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*IrlockReportPublisher, error) {
	pub, err := node.NewPublisher(topic_name, IrlockReportTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &IrlockReportPublisher{pub}, nil
}

func (p *IrlockReportPublisher) Publish(msg *IrlockReport) error {
	return p.Publisher.Publish(msg)
}

// IrlockReportSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type IrlockReportSubscription struct {
	*rclgo.Subscription
}

// IrlockReportSubscriptionCallback type is used to provide a subscription
// handler function for a IrlockReportSubscription.
type IrlockReportSubscriptionCallback func(msg *IrlockReport, info *rclgo.MessageInfo, err error)

// NewIrlockReportSubscription creates and returns a new subscription for the
// IrlockReport
func NewIrlockReportSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback IrlockReportSubscriptionCallback) (*IrlockReportSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg IrlockReport
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, IrlockReportTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &IrlockReportSubscription{sub}, nil
}

func (s *IrlockReportSubscription) TakeMessage(out *IrlockReport) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneIrlockReportSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneIrlockReportSlice(dst, src []IrlockReport) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var IrlockReportTypeSupport types.MessageTypeSupport = _IrlockReportTypeSupport{}

type _IrlockReportTypeSupport struct{}

func (t _IrlockReportTypeSupport) New() types.Message {
	return NewIrlockReport()
}

func (t _IrlockReportTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__IrlockReport
	return (unsafe.Pointer)(C.px4_msgs__msg__IrlockReport__create())
}

func (t _IrlockReportTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__IrlockReport__destroy((*C.px4_msgs__msg__IrlockReport)(pointer_to_free))
}

func (t _IrlockReportTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*IrlockReport)
	mem := (*C.px4_msgs__msg__IrlockReport)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.signature = C.uint16_t(m.Signature)
	mem.pos_x = C.float(m.PosX)
	mem.pos_y = C.float(m.PosY)
	mem.size_x = C.float(m.SizeX)
	mem.size_y = C.float(m.SizeY)
}

func (t _IrlockReportTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*IrlockReport)
	mem := (*C.px4_msgs__msg__IrlockReport)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Signature = uint16(mem.signature)
	m.PosX = float32(mem.pos_x)
	m.PosY = float32(mem.pos_y)
	m.SizeX = float32(mem.size_x)
	m.SizeY = float32(mem.size_y)
}

func (t _IrlockReportTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__IrlockReport())
}

type CIrlockReport = C.px4_msgs__msg__IrlockReport
type CIrlockReport__Sequence = C.px4_msgs__msg__IrlockReport__Sequence

func IrlockReport__Sequence_to_Go(goSlice *[]IrlockReport, cSlice CIrlockReport__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]IrlockReport, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		IrlockReportTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func IrlockReport__Sequence_to_C(cSlice *CIrlockReport__Sequence, goSlice []IrlockReport) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__IrlockReport)(C.malloc(C.sizeof_struct_px4_msgs__msg__IrlockReport * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		IrlockReportTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func IrlockReport__Array_to_Go(goSlice []IrlockReport, cSlice []CIrlockReport) {
	for i := 0; i < len(cSlice); i++ {
		IrlockReportTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func IrlockReport__Array_to_C(cSlice []CIrlockReport, goSlice []IrlockReport) {
	for i := 0; i < len(goSlice); i++ {
		IrlockReportTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
