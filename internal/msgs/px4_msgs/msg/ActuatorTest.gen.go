// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/actuator_test.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/ActuatorTest", ActuatorTestTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/ActuatorTest", ActuatorTestTypeSupport)
}

const (
	ActuatorTest_ACTION_RELEASE_CONTROL uint8 = 0 // exit test mode for the given function
	ActuatorTest_ACTION_DO_CONTROL      uint8 = 1 // enable actuator test mode
	ActuatorTest_FUNCTION_MOTOR1        uint8 = 101
	ActuatorTest_MAX_NUM_MOTORS         uint8 = 12
	ActuatorTest_FUNCTION_SERVO1        uint8 = 201
	ActuatorTest_MAX_NUM_SERVOS         uint8 = 8
	ActuatorTest_ORB_QUEUE_LENGTH       uint8 = 16 // >= MAX_NUM_MOTORS to support code in esc_calibration
)

type ActuatorTest struct {
	Timestamp uint64  `yaml:"timestamp"`  // time since system start (microseconds)
	Action    uint8   `yaml:"action"`     // one of ACTION_*
	Function  uint16  `yaml:"function"`   // actuator output function
	Value     float32 `yaml:"value"`      // range: [-1, 1], where 1 means maximum positive output,
	TimeoutMs uint32  `yaml:"timeout_ms"` // timeout in ms after which to exit test mode (if 0, do not time out). 0 to center servos or minimum motor thrust,-1 maximum negative (if not supported by the motors, <0 maps to NaN),and NaN maps to disarmed (stop the motors)
}

// NewActuatorTest creates a new ActuatorTest with default values.
func NewActuatorTest() *ActuatorTest {
	self := ActuatorTest{}
	self.SetDefaults()
	return &self
}

func (t *ActuatorTest) Clone() *ActuatorTest {
	c := &ActuatorTest{}
	c.Timestamp = t.Timestamp
	c.Action = t.Action
	c.Function = t.Function
	c.Value = t.Value
	c.TimeoutMs = t.TimeoutMs
	return c
}

func (t *ActuatorTest) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ActuatorTest) SetDefaults() {
	t.Timestamp = 0
	t.Action = 0
	t.Function = 0
	t.Value = 0
	t.TimeoutMs = 0
}

func (t *ActuatorTest) GetTypeSupport() types.MessageTypeSupport {
	return ActuatorTestTypeSupport
}

// ActuatorTestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ActuatorTestPublisher struct {
	*rclgo.Publisher
}

// NewActuatorTestPublisher creates and returns a new publisher for the
// ActuatorTest
func NewActuatorTestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ActuatorTestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, ActuatorTestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ActuatorTestPublisher{pub}, nil
}

func (p *ActuatorTestPublisher) Publish(msg *ActuatorTest) error {
	return p.Publisher.Publish(msg)
}

// ActuatorTestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ActuatorTestSubscription struct {
	*rclgo.Subscription
}

// ActuatorTestSubscriptionCallback type is used to provide a subscription
// handler function for a ActuatorTestSubscription.
type ActuatorTestSubscriptionCallback func(msg *ActuatorTest, info *rclgo.MessageInfo, err error)

// NewActuatorTestSubscription creates and returns a new subscription for the
// ActuatorTest
func NewActuatorTestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ActuatorTestSubscriptionCallback) (*ActuatorTestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ActuatorTest
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ActuatorTestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ActuatorTestSubscription{sub}, nil
}

func (s *ActuatorTestSubscription) TakeMessage(out *ActuatorTest) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneActuatorTestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneActuatorTestSlice(dst, src []ActuatorTest) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ActuatorTestTypeSupport types.MessageTypeSupport = _ActuatorTestTypeSupport{}

type _ActuatorTestTypeSupport struct{}

func (t _ActuatorTestTypeSupport) New() types.Message {
	return NewActuatorTest()
}

func (t _ActuatorTestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__ActuatorTest
	return (unsafe.Pointer)(C.px4_msgs__msg__ActuatorTest__create())
}

func (t _ActuatorTestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__ActuatorTest__destroy((*C.px4_msgs__msg__ActuatorTest)(pointer_to_free))
}

func (t _ActuatorTestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ActuatorTest)
	mem := (*C.px4_msgs__msg__ActuatorTest)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.action = C.uint8_t(m.Action)
	mem.function = C.uint16_t(m.Function)
	mem.value = C.float(m.Value)
	mem.timeout_ms = C.uint32_t(m.TimeoutMs)
}

func (t _ActuatorTestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ActuatorTest)
	mem := (*C.px4_msgs__msg__ActuatorTest)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Action = uint8(mem.action)
	m.Function = uint16(mem.function)
	m.Value = float32(mem.value)
	m.TimeoutMs = uint32(mem.timeout_ms)
}

func (t _ActuatorTestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__ActuatorTest())
}

type CActuatorTest = C.px4_msgs__msg__ActuatorTest
type CActuatorTest__Sequence = C.px4_msgs__msg__ActuatorTest__Sequence

func ActuatorTest__Sequence_to_Go(goSlice *[]ActuatorTest, cSlice CActuatorTest__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ActuatorTest, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ActuatorTestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ActuatorTest__Sequence_to_C(cSlice *CActuatorTest__Sequence, goSlice []ActuatorTest) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__ActuatorTest)(C.malloc(C.sizeof_struct_px4_msgs__msg__ActuatorTest * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ActuatorTestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ActuatorTest__Array_to_Go(goSlice []ActuatorTest, cSlice []CActuatorTest) {
	for i := 0; i < len(cSlice); i++ {
		ActuatorTestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ActuatorTest__Array_to_C(cSlice []CActuatorTest, goSlice []ActuatorTest) {
	for i := 0; i < len(goSlice); i++ {
		ActuatorTestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
