// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_airflow.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorAirflow", SensorAirflowTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SensorAirflow", SensorAirflowTypeSupport)
}

type SensorAirflow struct {
	Timestamp uint64  `yaml:"timestamp"` // time since system start (microseconds)
	DeviceId  uint32  `yaml:"device_id"` // unique device ID for the sensor that does not change between power cycles
	Speed     float32 `yaml:"speed"`     // the speed being reported by the wind / airflow sensor
	Direction float32 `yaml:"direction"` // the direction being reported by the wind / airflow sensor
	Status    uint8   `yaml:"status"`    // Status code from the sensor
}

// NewSensorAirflow creates a new SensorAirflow with default values.
func NewSensorAirflow() *SensorAirflow {
	self := SensorAirflow{}
	self.SetDefaults()
	return &self
}

func (t *SensorAirflow) Clone() *SensorAirflow {
	c := &SensorAirflow{}
	c.Timestamp = t.Timestamp
	c.DeviceId = t.DeviceId
	c.Speed = t.Speed
	c.Direction = t.Direction
	c.Status = t.Status
	return c
}

func (t *SensorAirflow) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorAirflow) SetDefaults() {
	t.Timestamp = 0
	t.DeviceId = 0
	t.Speed = 0
	t.Direction = 0
	t.Status = 0
}

func (t *SensorAirflow) GetTypeSupport() types.MessageTypeSupport {
	return SensorAirflowTypeSupport
}

// SensorAirflowPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorAirflowPublisher struct {
	*rclgo.Publisher
}

// NewSensorAirflowPublisher creates and returns a new publisher for the
// SensorAirflow
func NewSensorAirflowPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorAirflowPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorAirflowTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorAirflowPublisher{pub}, nil
}

func (p *SensorAirflowPublisher) Publish(msg *SensorAirflow) error {
	return p.Publisher.Publish(msg)
}

// SensorAirflowSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorAirflowSubscription struct {
	*rclgo.Subscription
}

// SensorAirflowSubscriptionCallback type is used to provide a subscription
// handler function for a SensorAirflowSubscription.
type SensorAirflowSubscriptionCallback func(msg *SensorAirflow, info *rclgo.MessageInfo, err error)

// NewSensorAirflowSubscription creates and returns a new subscription for the
// SensorAirflow
func NewSensorAirflowSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorAirflowSubscriptionCallback) (*SensorAirflowSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorAirflow
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorAirflowTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorAirflowSubscription{sub}, nil
}

func (s *SensorAirflowSubscription) TakeMessage(out *SensorAirflow) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorAirflowSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorAirflowSlice(dst, src []SensorAirflow) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorAirflowTypeSupport types.MessageTypeSupport = _SensorAirflowTypeSupport{}

type _SensorAirflowTypeSupport struct{}

func (t _SensorAirflowTypeSupport) New() types.Message {
	return NewSensorAirflow()
}

func (t _SensorAirflowTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorAirflow
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorAirflow__create())
}

func (t _SensorAirflowTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorAirflow__destroy((*C.px4_msgs__msg__SensorAirflow)(pointer_to_free))
}

func (t _SensorAirflowTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorAirflow)
	mem := (*C.px4_msgs__msg__SensorAirflow)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.speed = C.float(m.Speed)
	mem.direction = C.float(m.Direction)
	mem.status = C.uint8_t(m.Status)
}

func (t _SensorAirflowTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorAirflow)
	mem := (*C.px4_msgs__msg__SensorAirflow)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceId = uint32(mem.device_id)
	m.Speed = float32(mem.speed)
	m.Direction = float32(mem.direction)
	m.Status = uint8(mem.status)
}

func (t _SensorAirflowTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorAirflow())
}

type CSensorAirflow = C.px4_msgs__msg__SensorAirflow
type CSensorAirflow__Sequence = C.px4_msgs__msg__SensorAirflow__Sequence

func SensorAirflow__Sequence_to_Go(goSlice *[]SensorAirflow, cSlice CSensorAirflow__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorAirflow, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorAirflowTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorAirflow__Sequence_to_C(cSlice *CSensorAirflow__Sequence, goSlice []SensorAirflow) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorAirflow)(C.malloc(C.sizeof_struct_px4_msgs__msg__SensorAirflow * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorAirflowTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorAirflow__Array_to_Go(goSlice []SensorAirflow, cSlice []CSensorAirflow) {
	for i := 0; i < len(cSlice); i++ {
		SensorAirflowTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorAirflow__Array_to_C(cSlice []CSensorAirflow, goSlice []SensorAirflow) {
	for i := 0; i < len(goSlice); i++ {
		SensorAirflowTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
