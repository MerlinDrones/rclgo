// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/mount_orientation.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/MountOrientation", MountOrientationTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/MountOrientation", MountOrientationTypeSupport)
}

type MountOrientation struct {
	Timestamp          uint64     `yaml:"timestamp"`            // time since system start (microseconds)
	AttitudeEulerAngle [3]float32 `yaml:"attitude_euler_angle"` // Attitude/direction of the mount as euler angles in rad
}

// NewMountOrientation creates a new MountOrientation with default values.
func NewMountOrientation() *MountOrientation {
	self := MountOrientation{}
	self.SetDefaults()
	return &self
}

func (t *MountOrientation) Clone() *MountOrientation {
	c := &MountOrientation{}
	c.Timestamp = t.Timestamp
	c.AttitudeEulerAngle = t.AttitudeEulerAngle
	return c
}

func (t *MountOrientation) CloneMsg() types.Message {
	return t.Clone()
}

func (t *MountOrientation) SetDefaults() {
	t.Timestamp = 0
	t.AttitudeEulerAngle = [3]float32{}
}

func (t *MountOrientation) GetTypeSupport() types.MessageTypeSupport {
	return MountOrientationTypeSupport
}

// MountOrientationPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type MountOrientationPublisher struct {
	*rclgo.Publisher
}

// NewMountOrientationPublisher creates and returns a new publisher for the
// MountOrientation
func NewMountOrientationPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*MountOrientationPublisher, error) {
	pub, err := node.NewPublisher(topic_name, MountOrientationTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &MountOrientationPublisher{pub}, nil
}

func (p *MountOrientationPublisher) Publish(msg *MountOrientation) error {
	return p.Publisher.Publish(msg)
}

// MountOrientationSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type MountOrientationSubscription struct {
	*rclgo.Subscription
}

// MountOrientationSubscriptionCallback type is used to provide a subscription
// handler function for a MountOrientationSubscription.
type MountOrientationSubscriptionCallback func(msg *MountOrientation, info *rclgo.MessageInfo, err error)

// NewMountOrientationSubscription creates and returns a new subscription for the
// MountOrientation
func NewMountOrientationSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback MountOrientationSubscriptionCallback) (*MountOrientationSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg MountOrientation
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, MountOrientationTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &MountOrientationSubscription{sub}, nil
}

func (s *MountOrientationSubscription) TakeMessage(out *MountOrientation) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneMountOrientationSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneMountOrientationSlice(dst, src []MountOrientation) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var MountOrientationTypeSupport types.MessageTypeSupport = _MountOrientationTypeSupport{}

type _MountOrientationTypeSupport struct{}

func (t _MountOrientationTypeSupport) New() types.Message {
	return NewMountOrientation()
}

func (t _MountOrientationTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__MountOrientation
	return (unsafe.Pointer)(C.px4_msgs__msg__MountOrientation__create())
}

func (t _MountOrientationTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__MountOrientation__destroy((*C.px4_msgs__msg__MountOrientation)(pointer_to_free))
}

func (t _MountOrientationTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*MountOrientation)
	mem := (*C.px4_msgs__msg__MountOrientation)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_attitude_euler_angle := mem.attitude_euler_angle[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_attitude_euler_angle)), m.AttitudeEulerAngle[:])
}

func (t _MountOrientationTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*MountOrientation)
	mem := (*C.px4_msgs__msg__MountOrientation)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_attitude_euler_angle := mem.attitude_euler_angle[:]
	primitives.Float32__Array_to_Go(m.AttitudeEulerAngle[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_attitude_euler_angle)))
}

func (t _MountOrientationTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__MountOrientation())
}

type CMountOrientation = C.px4_msgs__msg__MountOrientation
type CMountOrientation__Sequence = C.px4_msgs__msg__MountOrientation__Sequence

func MountOrientation__Sequence_to_Go(goSlice *[]MountOrientation, cSlice CMountOrientation__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]MountOrientation, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		MountOrientationTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func MountOrientation__Sequence_to_C(cSlice *CMountOrientation__Sequence, goSlice []MountOrientation) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__MountOrientation)(C.malloc(C.sizeof_struct_px4_msgs__msg__MountOrientation * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		MountOrientationTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func MountOrientation__Array_to_Go(goSlice []MountOrientation, cSlice []CMountOrientation) {
	for i := 0; i < len(cSlice); i++ {
		MountOrientationTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func MountOrientation__Array_to_C(cSlice []CMountOrientation, goSlice []MountOrientation) {
	for i := 0; i < len(goSlice); i++ {
		MountOrientationTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
