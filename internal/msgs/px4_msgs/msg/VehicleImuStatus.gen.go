// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_imu_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleImuStatus", VehicleImuStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleImuStatus", VehicleImuStatusTypeSupport)
}

type VehicleImuStatus struct {
	Timestamp              uint64     `yaml:"timestamp"`       // time since system start (microseconds)
	AccelDeviceId          uint32     `yaml:"accel_device_id"` // unique device ID for the sensor that does not change between power cycles
	GyroDeviceId           uint32     `yaml:"gyro_device_id"`  // unique device ID for the sensor that does not change between power cycles
	AccelClipping          [3]uint32  `yaml:"accel_clipping"`  // total clipping per axis
	GyroClipping           [3]uint32  `yaml:"gyro_clipping"`   // total clipping per axis
	AccelErrorCount        uint32     `yaml:"accel_error_count"`
	GyroErrorCount         uint32     `yaml:"gyro_error_count"`
	AccelRateHz            float32    `yaml:"accel_rate_hz"`
	GyroRateHz             float32    `yaml:"gyro_rate_hz"`
	AccelRawRateHz         float32    `yaml:"accel_raw_rate_hz"`         // full raw sensor sample rate (Hz)
	GyroRawRateHz          float32    `yaml:"gyro_raw_rate_hz"`          // full raw sensor sample rate (Hz)
	AccelVibrationMetric   float32    `yaml:"accel_vibration_metric"`    // high frequency vibration level in the accelerometer data (m/s/s)
	GyroVibrationMetric    float32    `yaml:"gyro_vibration_metric"`     // high frequency vibration level in the gyro data (rad/s)
	DeltaAngleConingMetric float32    `yaml:"delta_angle_coning_metric"` // average IMU delta angle coning correction (rad^2)
	MeanAccel              [3]float32 `yaml:"mean_accel"`                // average accelerometer readings since last publication
	MeanGyro               [3]float32 `yaml:"mean_gyro"`                 // average gyroscope readings since last publication
	VarAccel               [3]float32 `yaml:"var_accel"`                 // accelerometer variance since last publication
	VarGyro                [3]float32 `yaml:"var_gyro"`                  // gyroscope variance since last publication
	TemperatureAccel       float32    `yaml:"temperature_accel"`
	TemperatureGyro        float32    `yaml:"temperature_gyro"`
}

// NewVehicleImuStatus creates a new VehicleImuStatus with default values.
func NewVehicleImuStatus() *VehicleImuStatus {
	self := VehicleImuStatus{}
	self.SetDefaults()
	return &self
}

func (t *VehicleImuStatus) Clone() *VehicleImuStatus {
	c := &VehicleImuStatus{}
	c.Timestamp = t.Timestamp
	c.AccelDeviceId = t.AccelDeviceId
	c.GyroDeviceId = t.GyroDeviceId
	c.AccelClipping = t.AccelClipping
	c.GyroClipping = t.GyroClipping
	c.AccelErrorCount = t.AccelErrorCount
	c.GyroErrorCount = t.GyroErrorCount
	c.AccelRateHz = t.AccelRateHz
	c.GyroRateHz = t.GyroRateHz
	c.AccelRawRateHz = t.AccelRawRateHz
	c.GyroRawRateHz = t.GyroRawRateHz
	c.AccelVibrationMetric = t.AccelVibrationMetric
	c.GyroVibrationMetric = t.GyroVibrationMetric
	c.DeltaAngleConingMetric = t.DeltaAngleConingMetric
	c.MeanAccel = t.MeanAccel
	c.MeanGyro = t.MeanGyro
	c.VarAccel = t.VarAccel
	c.VarGyro = t.VarGyro
	c.TemperatureAccel = t.TemperatureAccel
	c.TemperatureGyro = t.TemperatureGyro
	return c
}

func (t *VehicleImuStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleImuStatus) SetDefaults() {
	t.Timestamp = 0
	t.AccelDeviceId = 0
	t.GyroDeviceId = 0
	t.AccelClipping = [3]uint32{}
	t.GyroClipping = [3]uint32{}
	t.AccelErrorCount = 0
	t.GyroErrorCount = 0
	t.AccelRateHz = 0
	t.GyroRateHz = 0
	t.AccelRawRateHz = 0
	t.GyroRawRateHz = 0
	t.AccelVibrationMetric = 0
	t.GyroVibrationMetric = 0
	t.DeltaAngleConingMetric = 0
	t.MeanAccel = [3]float32{}
	t.MeanGyro = [3]float32{}
	t.VarAccel = [3]float32{}
	t.VarGyro = [3]float32{}
	t.TemperatureAccel = 0
	t.TemperatureGyro = 0
}

func (t *VehicleImuStatus) GetTypeSupport() types.MessageTypeSupport {
	return VehicleImuStatusTypeSupport
}

// VehicleImuStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleImuStatusPublisher struct {
	*rclgo.Publisher
}

// NewVehicleImuStatusPublisher creates and returns a new publisher for the
// VehicleImuStatus
func NewVehicleImuStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleImuStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleImuStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleImuStatusPublisher{pub}, nil
}

func (p *VehicleImuStatusPublisher) Publish(msg *VehicleImuStatus) error {
	return p.Publisher.Publish(msg)
}

// VehicleImuStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleImuStatusSubscription struct {
	*rclgo.Subscription
}

// VehicleImuStatusSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleImuStatusSubscription.
type VehicleImuStatusSubscriptionCallback func(msg *VehicleImuStatus, info *rclgo.MessageInfo, err error)

// NewVehicleImuStatusSubscription creates and returns a new subscription for the
// VehicleImuStatus
func NewVehicleImuStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleImuStatusSubscriptionCallback) (*VehicleImuStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleImuStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleImuStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleImuStatusSubscription{sub}, nil
}

func (s *VehicleImuStatusSubscription) TakeMessage(out *VehicleImuStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleImuStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleImuStatusSlice(dst, src []VehicleImuStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleImuStatusTypeSupport types.MessageTypeSupport = _VehicleImuStatusTypeSupport{}

type _VehicleImuStatusTypeSupport struct{}

func (t _VehicleImuStatusTypeSupport) New() types.Message {
	return NewVehicleImuStatus()
}

func (t _VehicleImuStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleImuStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleImuStatus__create())
}

func (t _VehicleImuStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleImuStatus__destroy((*C.px4_msgs__msg__VehicleImuStatus)(pointer_to_free))
}

func (t _VehicleImuStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleImuStatus)
	mem := (*C.px4_msgs__msg__VehicleImuStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.accel_device_id = C.uint32_t(m.AccelDeviceId)
	mem.gyro_device_id = C.uint32_t(m.GyroDeviceId)
	cSlice_accel_clipping := mem.accel_clipping[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_accel_clipping)), m.AccelClipping[:])
	cSlice_gyro_clipping := mem.gyro_clipping[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_gyro_clipping)), m.GyroClipping[:])
	mem.accel_error_count = C.uint32_t(m.AccelErrorCount)
	mem.gyro_error_count = C.uint32_t(m.GyroErrorCount)
	mem.accel_rate_hz = C.float(m.AccelRateHz)
	mem.gyro_rate_hz = C.float(m.GyroRateHz)
	mem.accel_raw_rate_hz = C.float(m.AccelRawRateHz)
	mem.gyro_raw_rate_hz = C.float(m.GyroRawRateHz)
	mem.accel_vibration_metric = C.float(m.AccelVibrationMetric)
	mem.gyro_vibration_metric = C.float(m.GyroVibrationMetric)
	mem.delta_angle_coning_metric = C.float(m.DeltaAngleConingMetric)
	cSlice_mean_accel := mem.mean_accel[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mean_accel)), m.MeanAccel[:])
	cSlice_mean_gyro := mem.mean_gyro[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mean_gyro)), m.MeanGyro[:])
	cSlice_var_accel := mem.var_accel[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_var_accel)), m.VarAccel[:])
	cSlice_var_gyro := mem.var_gyro[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_var_gyro)), m.VarGyro[:])
	mem.temperature_accel = C.float(m.TemperatureAccel)
	mem.temperature_gyro = C.float(m.TemperatureGyro)
}

func (t _VehicleImuStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleImuStatus)
	mem := (*C.px4_msgs__msg__VehicleImuStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.AccelDeviceId = uint32(mem.accel_device_id)
	m.GyroDeviceId = uint32(mem.gyro_device_id)
	cSlice_accel_clipping := mem.accel_clipping[:]
	primitives.Uint32__Array_to_Go(m.AccelClipping[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_accel_clipping)))
	cSlice_gyro_clipping := mem.gyro_clipping[:]
	primitives.Uint32__Array_to_Go(m.GyroClipping[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_gyro_clipping)))
	m.AccelErrorCount = uint32(mem.accel_error_count)
	m.GyroErrorCount = uint32(mem.gyro_error_count)
	m.AccelRateHz = float32(mem.accel_rate_hz)
	m.GyroRateHz = float32(mem.gyro_rate_hz)
	m.AccelRawRateHz = float32(mem.accel_raw_rate_hz)
	m.GyroRawRateHz = float32(mem.gyro_raw_rate_hz)
	m.AccelVibrationMetric = float32(mem.accel_vibration_metric)
	m.GyroVibrationMetric = float32(mem.gyro_vibration_metric)
	m.DeltaAngleConingMetric = float32(mem.delta_angle_coning_metric)
	cSlice_mean_accel := mem.mean_accel[:]
	primitives.Float32__Array_to_Go(m.MeanAccel[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mean_accel)))
	cSlice_mean_gyro := mem.mean_gyro[:]
	primitives.Float32__Array_to_Go(m.MeanGyro[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_mean_gyro)))
	cSlice_var_accel := mem.var_accel[:]
	primitives.Float32__Array_to_Go(m.VarAccel[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_var_accel)))
	cSlice_var_gyro := mem.var_gyro[:]
	primitives.Float32__Array_to_Go(m.VarGyro[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_var_gyro)))
	m.TemperatureAccel = float32(mem.temperature_accel)
	m.TemperatureGyro = float32(mem.temperature_gyro)
}

func (t _VehicleImuStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleImuStatus())
}

type CVehicleImuStatus = C.px4_msgs__msg__VehicleImuStatus
type CVehicleImuStatus__Sequence = C.px4_msgs__msg__VehicleImuStatus__Sequence

func VehicleImuStatus__Sequence_to_Go(goSlice *[]VehicleImuStatus, cSlice CVehicleImuStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleImuStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleImuStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleImuStatus__Sequence_to_C(cSlice *CVehicleImuStatus__Sequence, goSlice []VehicleImuStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleImuStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleImuStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleImuStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleImuStatus__Array_to_Go(goSlice []VehicleImuStatus, cSlice []CVehicleImuStatus) {
	for i := 0; i < len(cSlice); i++ {
		VehicleImuStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleImuStatus__Array_to_C(cSlice []CVehicleImuStatus, goSlice []VehicleImuStatus) {
	for i := 0; i < len(goSlice); i++ {
		VehicleImuStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
