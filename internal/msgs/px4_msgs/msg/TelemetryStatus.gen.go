// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/telemetry_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TelemetryStatus", TelemetryStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/TelemetryStatus", TelemetryStatusTypeSupport)
}

const (
	TelemetryStatus_LINK_TYPE_GENERIC         uint8  = 0
	TelemetryStatus_LINK_TYPE_UBIQUITY_BULLET uint8  = 1
	TelemetryStatus_LINK_TYPE_WIRE            uint8  = 2
	TelemetryStatus_LINK_TYPE_USB             uint8  = 3
	TelemetryStatus_LINK_TYPE_IRIDIUM         uint8  = 4
	TelemetryStatus_HEARTBEAT_TIMEOUT_US      uint64 = 2500000 // Heartbeat timeout (tolerate missing 1 + jitter)
)

type TelemetryStatus struct {
	Timestamp                           uint64  `yaml:"timestamp"` // time since system start (microseconds)
	Type                                uint8   `yaml:"type"`      // type of the radio hardware (LINK_TYPE_*)
	Mode                                uint8   `yaml:"mode"`
	FlowControl                         bool    `yaml:"flow_control"`
	Forwarding                          bool    `yaml:"forwarding"`
	MavlinkV2                           bool    `yaml:"mavlink_v2"`
	Ftp                                 bool    `yaml:"ftp"`
	Streams                             uint8   `yaml:"streams"`
	DataRate                            float32 `yaml:"data_rate"` // configured maximum data rate (Bytes/s)
	RateMultiplier                      float32 `yaml:"rate_multiplier"`
	TxRateAvg                           float32 `yaml:"tx_rate_avg"`        // transmit rate average (Bytes/s)
	TxErrorRateAvg                      float32 `yaml:"tx_error_rate_avg"`  // transmit error rate average (Bytes/s)
	TxMessageCount                      uint32  `yaml:"tx_message_count"`   // total message sent count
	TxBufferOverruns                    uint32  `yaml:"tx_buffer_overruns"` // number of TX buffer overruns
	RxRateAvg                           float32 `yaml:"rx_rate_avg"`        // transmit rate average (Bytes/s)
	RxMessageCount                      uint32  `yaml:"rx_message_count"`   // count of total messages received
	RxMessageLostCount                  uint32  `yaml:"rx_message_lost_count"`
	RxBufferOverruns                    uint32  `yaml:"rx_buffer_overruns"`   // number of RX buffer overruns
	RxParseErrors                       uint32  `yaml:"rx_parse_errors"`      // number of parse errors
	RxPacketDropCount                   uint32  `yaml:"rx_packet_drop_count"` // number of packet drops
	RxMessageLostRate                   float32 `yaml:"rx_message_lost_rate"`
	HeartbeatTypeAntennaTracker         bool    `yaml:"heartbeat_type_antenna_tracker"`         // MAV_TYPE_ANTENNA_TRACKER. Heartbeats per type
	HeartbeatTypeGcs                    bool    `yaml:"heartbeat_type_gcs"`                     // MAV_TYPE_GCS
	HeartbeatTypeOnboardController      bool    `yaml:"heartbeat_type_onboard_controller"`      // MAV_TYPE_ONBOARD_CONTROLLER
	HeartbeatTypeGimbal                 bool    `yaml:"heartbeat_type_gimbal"`                  // MAV_TYPE_GIMBAL
	HeartbeatTypeAdsb                   bool    `yaml:"heartbeat_type_adsb"`                    // MAV_TYPE_ADSB
	HeartbeatTypeCamera                 bool    `yaml:"heartbeat_type_camera"`                  // MAV_TYPE_CAMERA
	HeartbeatTypeParachute              bool    `yaml:"heartbeat_type_parachute"`               // MAV_TYPE_PARACHUTE
	HeartbeatTypeOpenDroneId            bool    `yaml:"heartbeat_type_open_drone_id"`           // MAV_TYPE_ODID
	HeartbeatComponentTelemetryRadio    bool    `yaml:"heartbeat_component_telemetry_radio"`    // MAV_COMP_ID_TELEMETRY_RADIO. Heartbeats per component
	HeartbeatComponentLog               bool    `yaml:"heartbeat_component_log"`                // MAV_COMP_ID_LOG
	HeartbeatComponentOsd               bool    `yaml:"heartbeat_component_osd"`                // MAV_COMP_ID_OSD
	HeartbeatComponentObstacleAvoidance bool    `yaml:"heartbeat_component_obstacle_avoidance"` // MAV_COMP_ID_OBSTACLE_AVOIDANCE
	HeartbeatComponentVio               bool    `yaml:"heartbeat_component_vio"`                // MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY
	HeartbeatComponentPairingManager    bool    `yaml:"heartbeat_component_pairing_manager"`    // MAV_COMP_ID_PAIRING_MANAGER
	HeartbeatComponentUdpBridge         bool    `yaml:"heartbeat_component_udp_bridge"`         // MAV_COMP_ID_UDP_BRIDGE
	HeartbeatComponentUartBridge        bool    `yaml:"heartbeat_component_uart_bridge"`        // MAV_COMP_ID_UART_BRIDGE
	AvoidanceSystemHealthy              bool    `yaml:"avoidance_system_healthy"`               // Misc component health
	OpenDroneIdSystemHealthy            bool    `yaml:"open_drone_id_system_healthy"`
	ParachuteSystemHealthy              bool    `yaml:"parachute_system_healthy"`
}

// NewTelemetryStatus creates a new TelemetryStatus with default values.
func NewTelemetryStatus() *TelemetryStatus {
	self := TelemetryStatus{}
	self.SetDefaults()
	return &self
}

func (t *TelemetryStatus) Clone() *TelemetryStatus {
	c := &TelemetryStatus{}
	c.Timestamp = t.Timestamp
	c.Type = t.Type
	c.Mode = t.Mode
	c.FlowControl = t.FlowControl
	c.Forwarding = t.Forwarding
	c.MavlinkV2 = t.MavlinkV2
	c.Ftp = t.Ftp
	c.Streams = t.Streams
	c.DataRate = t.DataRate
	c.RateMultiplier = t.RateMultiplier
	c.TxRateAvg = t.TxRateAvg
	c.TxErrorRateAvg = t.TxErrorRateAvg
	c.TxMessageCount = t.TxMessageCount
	c.TxBufferOverruns = t.TxBufferOverruns
	c.RxRateAvg = t.RxRateAvg
	c.RxMessageCount = t.RxMessageCount
	c.RxMessageLostCount = t.RxMessageLostCount
	c.RxBufferOverruns = t.RxBufferOverruns
	c.RxParseErrors = t.RxParseErrors
	c.RxPacketDropCount = t.RxPacketDropCount
	c.RxMessageLostRate = t.RxMessageLostRate
	c.HeartbeatTypeAntennaTracker = t.HeartbeatTypeAntennaTracker
	c.HeartbeatTypeGcs = t.HeartbeatTypeGcs
	c.HeartbeatTypeOnboardController = t.HeartbeatTypeOnboardController
	c.HeartbeatTypeGimbal = t.HeartbeatTypeGimbal
	c.HeartbeatTypeAdsb = t.HeartbeatTypeAdsb
	c.HeartbeatTypeCamera = t.HeartbeatTypeCamera
	c.HeartbeatTypeParachute = t.HeartbeatTypeParachute
	c.HeartbeatTypeOpenDroneId = t.HeartbeatTypeOpenDroneId
	c.HeartbeatComponentTelemetryRadio = t.HeartbeatComponentTelemetryRadio
	c.HeartbeatComponentLog = t.HeartbeatComponentLog
	c.HeartbeatComponentOsd = t.HeartbeatComponentOsd
	c.HeartbeatComponentObstacleAvoidance = t.HeartbeatComponentObstacleAvoidance
	c.HeartbeatComponentVio = t.HeartbeatComponentVio
	c.HeartbeatComponentPairingManager = t.HeartbeatComponentPairingManager
	c.HeartbeatComponentUdpBridge = t.HeartbeatComponentUdpBridge
	c.HeartbeatComponentUartBridge = t.HeartbeatComponentUartBridge
	c.AvoidanceSystemHealthy = t.AvoidanceSystemHealthy
	c.OpenDroneIdSystemHealthy = t.OpenDroneIdSystemHealthy
	c.ParachuteSystemHealthy = t.ParachuteSystemHealthy
	return c
}

func (t *TelemetryStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TelemetryStatus) SetDefaults() {
	t.Timestamp = 0
	t.Type = 0
	t.Mode = 0
	t.FlowControl = false
	t.Forwarding = false
	t.MavlinkV2 = false
	t.Ftp = false
	t.Streams = 0
	t.DataRate = 0
	t.RateMultiplier = 0
	t.TxRateAvg = 0
	t.TxErrorRateAvg = 0
	t.TxMessageCount = 0
	t.TxBufferOverruns = 0
	t.RxRateAvg = 0
	t.RxMessageCount = 0
	t.RxMessageLostCount = 0
	t.RxBufferOverruns = 0
	t.RxParseErrors = 0
	t.RxPacketDropCount = 0
	t.RxMessageLostRate = 0
	t.HeartbeatTypeAntennaTracker = false
	t.HeartbeatTypeGcs = false
	t.HeartbeatTypeOnboardController = false
	t.HeartbeatTypeGimbal = false
	t.HeartbeatTypeAdsb = false
	t.HeartbeatTypeCamera = false
	t.HeartbeatTypeParachute = false
	t.HeartbeatTypeOpenDroneId = false
	t.HeartbeatComponentTelemetryRadio = false
	t.HeartbeatComponentLog = false
	t.HeartbeatComponentOsd = false
	t.HeartbeatComponentObstacleAvoidance = false
	t.HeartbeatComponentVio = false
	t.HeartbeatComponentPairingManager = false
	t.HeartbeatComponentUdpBridge = false
	t.HeartbeatComponentUartBridge = false
	t.AvoidanceSystemHealthy = false
	t.OpenDroneIdSystemHealthy = false
	t.ParachuteSystemHealthy = false
}

func (t *TelemetryStatus) GetTypeSupport() types.MessageTypeSupport {
	return TelemetryStatusTypeSupport
}

// TelemetryStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TelemetryStatusPublisher struct {
	*rclgo.Publisher
}

// NewTelemetryStatusPublisher creates and returns a new publisher for the
// TelemetryStatus
func NewTelemetryStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TelemetryStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TelemetryStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TelemetryStatusPublisher{pub}, nil
}

func (p *TelemetryStatusPublisher) Publish(msg *TelemetryStatus) error {
	return p.Publisher.Publish(msg)
}

// TelemetryStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TelemetryStatusSubscription struct {
	*rclgo.Subscription
}

// TelemetryStatusSubscriptionCallback type is used to provide a subscription
// handler function for a TelemetryStatusSubscription.
type TelemetryStatusSubscriptionCallback func(msg *TelemetryStatus, info *rclgo.MessageInfo, err error)

// NewTelemetryStatusSubscription creates and returns a new subscription for the
// TelemetryStatus
func NewTelemetryStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TelemetryStatusSubscriptionCallback) (*TelemetryStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TelemetryStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TelemetryStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TelemetryStatusSubscription{sub}, nil
}

func (s *TelemetryStatusSubscription) TakeMessage(out *TelemetryStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTelemetryStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTelemetryStatusSlice(dst, src []TelemetryStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TelemetryStatusTypeSupport types.MessageTypeSupport = _TelemetryStatusTypeSupport{}

type _TelemetryStatusTypeSupport struct{}

func (t _TelemetryStatusTypeSupport) New() types.Message {
	return NewTelemetryStatus()
}

func (t _TelemetryStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TelemetryStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__TelemetryStatus__create())
}

func (t _TelemetryStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TelemetryStatus__destroy((*C.px4_msgs__msg__TelemetryStatus)(pointer_to_free))
}

func (t _TelemetryStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TelemetryStatus)
	mem := (*C.px4_msgs__msg__TelemetryStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem._type = C.uint8_t(m.Type)
	mem.mode = C.uint8_t(m.Mode)
	mem.flow_control = C.bool(m.FlowControl)
	mem.forwarding = C.bool(m.Forwarding)
	mem.mavlink_v2 = C.bool(m.MavlinkV2)
	mem.ftp = C.bool(m.Ftp)
	mem.streams = C.uint8_t(m.Streams)
	mem.data_rate = C.float(m.DataRate)
	mem.rate_multiplier = C.float(m.RateMultiplier)
	mem.tx_rate_avg = C.float(m.TxRateAvg)
	mem.tx_error_rate_avg = C.float(m.TxErrorRateAvg)
	mem.tx_message_count = C.uint32_t(m.TxMessageCount)
	mem.tx_buffer_overruns = C.uint32_t(m.TxBufferOverruns)
	mem.rx_rate_avg = C.float(m.RxRateAvg)
	mem.rx_message_count = C.uint32_t(m.RxMessageCount)
	mem.rx_message_lost_count = C.uint32_t(m.RxMessageLostCount)
	mem.rx_buffer_overruns = C.uint32_t(m.RxBufferOverruns)
	mem.rx_parse_errors = C.uint32_t(m.RxParseErrors)
	mem.rx_packet_drop_count = C.uint32_t(m.RxPacketDropCount)
	mem.rx_message_lost_rate = C.float(m.RxMessageLostRate)
	mem.heartbeat_type_antenna_tracker = C.bool(m.HeartbeatTypeAntennaTracker)
	mem.heartbeat_type_gcs = C.bool(m.HeartbeatTypeGcs)
	mem.heartbeat_type_onboard_controller = C.bool(m.HeartbeatTypeOnboardController)
	mem.heartbeat_type_gimbal = C.bool(m.HeartbeatTypeGimbal)
	mem.heartbeat_type_adsb = C.bool(m.HeartbeatTypeAdsb)
	mem.heartbeat_type_camera = C.bool(m.HeartbeatTypeCamera)
	mem.heartbeat_type_parachute = C.bool(m.HeartbeatTypeParachute)
	mem.heartbeat_type_open_drone_id = C.bool(m.HeartbeatTypeOpenDroneId)
	mem.heartbeat_component_telemetry_radio = C.bool(m.HeartbeatComponentTelemetryRadio)
	mem.heartbeat_component_log = C.bool(m.HeartbeatComponentLog)
	mem.heartbeat_component_osd = C.bool(m.HeartbeatComponentOsd)
	mem.heartbeat_component_obstacle_avoidance = C.bool(m.HeartbeatComponentObstacleAvoidance)
	mem.heartbeat_component_vio = C.bool(m.HeartbeatComponentVio)
	mem.heartbeat_component_pairing_manager = C.bool(m.HeartbeatComponentPairingManager)
	mem.heartbeat_component_udp_bridge = C.bool(m.HeartbeatComponentUdpBridge)
	mem.heartbeat_component_uart_bridge = C.bool(m.HeartbeatComponentUartBridge)
	mem.avoidance_system_healthy = C.bool(m.AvoidanceSystemHealthy)
	mem.open_drone_id_system_healthy = C.bool(m.OpenDroneIdSystemHealthy)
	mem.parachute_system_healthy = C.bool(m.ParachuteSystemHealthy)
}

func (t _TelemetryStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TelemetryStatus)
	mem := (*C.px4_msgs__msg__TelemetryStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Type = uint8(mem._type)
	m.Mode = uint8(mem.mode)
	m.FlowControl = bool(mem.flow_control)
	m.Forwarding = bool(mem.forwarding)
	m.MavlinkV2 = bool(mem.mavlink_v2)
	m.Ftp = bool(mem.ftp)
	m.Streams = uint8(mem.streams)
	m.DataRate = float32(mem.data_rate)
	m.RateMultiplier = float32(mem.rate_multiplier)
	m.TxRateAvg = float32(mem.tx_rate_avg)
	m.TxErrorRateAvg = float32(mem.tx_error_rate_avg)
	m.TxMessageCount = uint32(mem.tx_message_count)
	m.TxBufferOverruns = uint32(mem.tx_buffer_overruns)
	m.RxRateAvg = float32(mem.rx_rate_avg)
	m.RxMessageCount = uint32(mem.rx_message_count)
	m.RxMessageLostCount = uint32(mem.rx_message_lost_count)
	m.RxBufferOverruns = uint32(mem.rx_buffer_overruns)
	m.RxParseErrors = uint32(mem.rx_parse_errors)
	m.RxPacketDropCount = uint32(mem.rx_packet_drop_count)
	m.RxMessageLostRate = float32(mem.rx_message_lost_rate)
	m.HeartbeatTypeAntennaTracker = bool(mem.heartbeat_type_antenna_tracker)
	m.HeartbeatTypeGcs = bool(mem.heartbeat_type_gcs)
	m.HeartbeatTypeOnboardController = bool(mem.heartbeat_type_onboard_controller)
	m.HeartbeatTypeGimbal = bool(mem.heartbeat_type_gimbal)
	m.HeartbeatTypeAdsb = bool(mem.heartbeat_type_adsb)
	m.HeartbeatTypeCamera = bool(mem.heartbeat_type_camera)
	m.HeartbeatTypeParachute = bool(mem.heartbeat_type_parachute)
	m.HeartbeatTypeOpenDroneId = bool(mem.heartbeat_type_open_drone_id)
	m.HeartbeatComponentTelemetryRadio = bool(mem.heartbeat_component_telemetry_radio)
	m.HeartbeatComponentLog = bool(mem.heartbeat_component_log)
	m.HeartbeatComponentOsd = bool(mem.heartbeat_component_osd)
	m.HeartbeatComponentObstacleAvoidance = bool(mem.heartbeat_component_obstacle_avoidance)
	m.HeartbeatComponentVio = bool(mem.heartbeat_component_vio)
	m.HeartbeatComponentPairingManager = bool(mem.heartbeat_component_pairing_manager)
	m.HeartbeatComponentUdpBridge = bool(mem.heartbeat_component_udp_bridge)
	m.HeartbeatComponentUartBridge = bool(mem.heartbeat_component_uart_bridge)
	m.AvoidanceSystemHealthy = bool(mem.avoidance_system_healthy)
	m.OpenDroneIdSystemHealthy = bool(mem.open_drone_id_system_healthy)
	m.ParachuteSystemHealthy = bool(mem.parachute_system_healthy)
}

func (t _TelemetryStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TelemetryStatus())
}

type CTelemetryStatus = C.px4_msgs__msg__TelemetryStatus
type CTelemetryStatus__Sequence = C.px4_msgs__msg__TelemetryStatus__Sequence

func TelemetryStatus__Sequence_to_Go(goSlice *[]TelemetryStatus, cSlice CTelemetryStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TelemetryStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TelemetryStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TelemetryStatus__Sequence_to_C(cSlice *CTelemetryStatus__Sequence, goSlice []TelemetryStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TelemetryStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__TelemetryStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TelemetryStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TelemetryStatus__Array_to_Go(goSlice []TelemetryStatus, cSlice []CTelemetryStatus) {
	for i := 0; i < len(cSlice); i++ {
		TelemetryStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TelemetryStatus__Array_to_C(cSlice []CTelemetryStatus, goSlice []TelemetryStatus) {
	for i := 0; i < len(goSlice); i++ {
		TelemetryStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
