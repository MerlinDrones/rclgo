// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/vehicle_air_data.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VehicleAirData", VehicleAirDataTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VehicleAirData", VehicleAirDataTypeSupport)
}

type VehicleAirData struct {
	Timestamp        uint64  `yaml:"timestamp"`         // time since system start (microseconds)
	TimestampSample  uint64  `yaml:"timestamp_sample"`  // the timestamp of the raw data (microseconds)
	BaroDeviceId     uint32  `yaml:"baro_device_id"`    // unique device ID for the selected barometer
	BaroAltMeter     float32 `yaml:"baro_alt_meter"`    // Altitude above MSL calculated from temperature compensated baro sensor data using an ISA corrected for sea level pressure SENS_BARO_QNH.
	BaroTempCelcius  float32 `yaml:"baro_temp_celcius"` // Temperature in degrees Celsius
	BaroPressurePa   float32 `yaml:"baro_pressure_pa"`  // Absolute pressure in Pascals
	Rho              float32 `yaml:"rho"`               // air density
	Eas2tas          float32 `yaml:"eas2tas"`           // equivalent airspeed to true airspeed conversion factor
	CalibrationCount uint8   `yaml:"calibration_count"` // Calibration changed counter. Monotonically increases whenever calibration changes.
}

// NewVehicleAirData creates a new VehicleAirData with default values.
func NewVehicleAirData() *VehicleAirData {
	self := VehicleAirData{}
	self.SetDefaults()
	return &self
}

func (t *VehicleAirData) Clone() *VehicleAirData {
	c := &VehicleAirData{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.BaroDeviceId = t.BaroDeviceId
	c.BaroAltMeter = t.BaroAltMeter
	c.BaroTempCelcius = t.BaroTempCelcius
	c.BaroPressurePa = t.BaroPressurePa
	c.Rho = t.Rho
	c.Eas2tas = t.Eas2tas
	c.CalibrationCount = t.CalibrationCount
	return c
}

func (t *VehicleAirData) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VehicleAirData) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.BaroDeviceId = 0
	t.BaroAltMeter = 0
	t.BaroTempCelcius = 0
	t.BaroPressurePa = 0
	t.Rho = 0
	t.Eas2tas = 0
	t.CalibrationCount = 0
}

func (t *VehicleAirData) GetTypeSupport() types.MessageTypeSupport {
	return VehicleAirDataTypeSupport
}

// VehicleAirDataPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VehicleAirDataPublisher struct {
	*rclgo.Publisher
}

// NewVehicleAirDataPublisher creates and returns a new publisher for the
// VehicleAirData
func NewVehicleAirDataPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VehicleAirDataPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VehicleAirDataTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VehicleAirDataPublisher{pub}, nil
}

func (p *VehicleAirDataPublisher) Publish(msg *VehicleAirData) error {
	return p.Publisher.Publish(msg)
}

// VehicleAirDataSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VehicleAirDataSubscription struct {
	*rclgo.Subscription
}

// VehicleAirDataSubscriptionCallback type is used to provide a subscription
// handler function for a VehicleAirDataSubscription.
type VehicleAirDataSubscriptionCallback func(msg *VehicleAirData, info *rclgo.MessageInfo, err error)

// NewVehicleAirDataSubscription creates and returns a new subscription for the
// VehicleAirData
func NewVehicleAirDataSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VehicleAirDataSubscriptionCallback) (*VehicleAirDataSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VehicleAirData
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VehicleAirDataTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VehicleAirDataSubscription{sub}, nil
}

func (s *VehicleAirDataSubscription) TakeMessage(out *VehicleAirData) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVehicleAirDataSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVehicleAirDataSlice(dst, src []VehicleAirData) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VehicleAirDataTypeSupport types.MessageTypeSupport = _VehicleAirDataTypeSupport{}

type _VehicleAirDataTypeSupport struct{}

func (t _VehicleAirDataTypeSupport) New() types.Message {
	return NewVehicleAirData()
}

func (t _VehicleAirDataTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VehicleAirData
	return (unsafe.Pointer)(C.px4_msgs__msg__VehicleAirData__create())
}

func (t _VehicleAirDataTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VehicleAirData__destroy((*C.px4_msgs__msg__VehicleAirData)(pointer_to_free))
}

func (t _VehicleAirDataTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VehicleAirData)
	mem := (*C.px4_msgs__msg__VehicleAirData)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.baro_device_id = C.uint32_t(m.BaroDeviceId)
	mem.baro_alt_meter = C.float(m.BaroAltMeter)
	mem.baro_temp_celcius = C.float(m.BaroTempCelcius)
	mem.baro_pressure_pa = C.float(m.BaroPressurePa)
	mem.rho = C.float(m.Rho)
	mem.eas2tas = C.float(m.Eas2tas)
	mem.calibration_count = C.uint8_t(m.CalibrationCount)
}

func (t _VehicleAirDataTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VehicleAirData)
	mem := (*C.px4_msgs__msg__VehicleAirData)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.BaroDeviceId = uint32(mem.baro_device_id)
	m.BaroAltMeter = float32(mem.baro_alt_meter)
	m.BaroTempCelcius = float32(mem.baro_temp_celcius)
	m.BaroPressurePa = float32(mem.baro_pressure_pa)
	m.Rho = float32(mem.rho)
	m.Eas2tas = float32(mem.eas2tas)
	m.CalibrationCount = uint8(mem.calibration_count)
}

func (t _VehicleAirDataTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VehicleAirData())
}

type CVehicleAirData = C.px4_msgs__msg__VehicleAirData
type CVehicleAirData__Sequence = C.px4_msgs__msg__VehicleAirData__Sequence

func VehicleAirData__Sequence_to_Go(goSlice *[]VehicleAirData, cSlice CVehicleAirData__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VehicleAirData, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VehicleAirDataTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VehicleAirData__Sequence_to_C(cSlice *CVehicleAirData__Sequence, goSlice []VehicleAirData) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VehicleAirData)(C.malloc(C.sizeof_struct_px4_msgs__msg__VehicleAirData * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VehicleAirDataTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VehicleAirData__Array_to_Go(goSlice []VehicleAirData, cSlice []CVehicleAirData) {
	for i := 0; i < len(cSlice); i++ {
		VehicleAirDataTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VehicleAirData__Array_to_C(cSlice []CVehicleAirData, goSlice []VehicleAirData) {
	for i := 0; i < len(goSlice); i++ {
		VehicleAirDataTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
