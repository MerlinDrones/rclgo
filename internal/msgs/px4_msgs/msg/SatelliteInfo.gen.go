// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/satellite_info.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SatelliteInfo", SatelliteInfoTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SatelliteInfo", SatelliteInfoTypeSupport)
}

const (
	SatelliteInfo_SAT_INFO_MAX_SATELLITES uint8 = 20
)

type SatelliteInfo struct {
	Timestamp uint64    `yaml:"timestamp"` // time since system start (microseconds)
	Count     uint8     `yaml:"count"`     // Number of satellites visible to the receiver
	Svid      [20]uint8 `yaml:"svid"`      // Space vehicle ID [1..255], see scheme below
	Used      [20]uint8 `yaml:"used"`      // 0: Satellite not used, 1: used for navigation
	Elevation [20]uint8 `yaml:"elevation"` // Elevation (0: right on top of receiver, 90: on the horizon) of satellite
	Azimuth   [20]uint8 `yaml:"azimuth"`   // Direction of satellite, 0: 0 deg, 255: 360 deg.
	Snr       [20]uint8 `yaml:"snr"`       // dBHz, Signal to noise ratio of satellite C/N0, range 0..99, zero when not tracking this satellite.
	Prn       [20]uint8 `yaml:"prn"`       // Satellite PRN code assignment, (psuedorandom number SBAS, valid codes are 120-144)
}

// NewSatelliteInfo creates a new SatelliteInfo with default values.
func NewSatelliteInfo() *SatelliteInfo {
	self := SatelliteInfo{}
	self.SetDefaults()
	return &self
}

func (t *SatelliteInfo) Clone() *SatelliteInfo {
	c := &SatelliteInfo{}
	c.Timestamp = t.Timestamp
	c.Count = t.Count
	c.Svid = t.Svid
	c.Used = t.Used
	c.Elevation = t.Elevation
	c.Azimuth = t.Azimuth
	c.Snr = t.Snr
	c.Prn = t.Prn
	return c
}

func (t *SatelliteInfo) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SatelliteInfo) SetDefaults() {
	t.Timestamp = 0
	t.Count = 0
	t.Svid = [20]uint8{}
	t.Used = [20]uint8{}
	t.Elevation = [20]uint8{}
	t.Azimuth = [20]uint8{}
	t.Snr = [20]uint8{}
	t.Prn = [20]uint8{}
}

func (t *SatelliteInfo) GetTypeSupport() types.MessageTypeSupport {
	return SatelliteInfoTypeSupport
}

// SatelliteInfoPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SatelliteInfoPublisher struct {
	*rclgo.Publisher
}

// NewSatelliteInfoPublisher creates and returns a new publisher for the
// SatelliteInfo
func NewSatelliteInfoPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SatelliteInfoPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SatelliteInfoTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SatelliteInfoPublisher{pub}, nil
}

func (p *SatelliteInfoPublisher) Publish(msg *SatelliteInfo) error {
	return p.Publisher.Publish(msg)
}

// SatelliteInfoSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SatelliteInfoSubscription struct {
	*rclgo.Subscription
}

// SatelliteInfoSubscriptionCallback type is used to provide a subscription
// handler function for a SatelliteInfoSubscription.
type SatelliteInfoSubscriptionCallback func(msg *SatelliteInfo, info *rclgo.MessageInfo, err error)

// NewSatelliteInfoSubscription creates and returns a new subscription for the
// SatelliteInfo
func NewSatelliteInfoSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SatelliteInfoSubscriptionCallback) (*SatelliteInfoSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SatelliteInfo
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SatelliteInfoTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SatelliteInfoSubscription{sub}, nil
}

func (s *SatelliteInfoSubscription) TakeMessage(out *SatelliteInfo) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSatelliteInfoSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSatelliteInfoSlice(dst, src []SatelliteInfo) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SatelliteInfoTypeSupport types.MessageTypeSupport = _SatelliteInfoTypeSupport{}

type _SatelliteInfoTypeSupport struct{}

func (t _SatelliteInfoTypeSupport) New() types.Message {
	return NewSatelliteInfo()
}

func (t _SatelliteInfoTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SatelliteInfo
	return (unsafe.Pointer)(C.px4_msgs__msg__SatelliteInfo__create())
}

func (t _SatelliteInfoTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SatelliteInfo__destroy((*C.px4_msgs__msg__SatelliteInfo)(pointer_to_free))
}

func (t _SatelliteInfoTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SatelliteInfo)
	mem := (*C.px4_msgs__msg__SatelliteInfo)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.count = C.uint8_t(m.Count)
	cSlice_svid := mem.svid[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_svid)), m.Svid[:])
	cSlice_used := mem.used[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_used)), m.Used[:])
	cSlice_elevation := mem.elevation[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_elevation)), m.Elevation[:])
	cSlice_azimuth := mem.azimuth[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_azimuth)), m.Azimuth[:])
	cSlice_snr := mem.snr[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_snr)), m.Snr[:])
	cSlice_prn := mem.prn[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_prn)), m.Prn[:])
}

func (t _SatelliteInfoTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SatelliteInfo)
	mem := (*C.px4_msgs__msg__SatelliteInfo)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Count = uint8(mem.count)
	cSlice_svid := mem.svid[:]
	primitives.Uint8__Array_to_Go(m.Svid[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_svid)))
	cSlice_used := mem.used[:]
	primitives.Uint8__Array_to_Go(m.Used[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_used)))
	cSlice_elevation := mem.elevation[:]
	primitives.Uint8__Array_to_Go(m.Elevation[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_elevation)))
	cSlice_azimuth := mem.azimuth[:]
	primitives.Uint8__Array_to_Go(m.Azimuth[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_azimuth)))
	cSlice_snr := mem.snr[:]
	primitives.Uint8__Array_to_Go(m.Snr[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_snr)))
	cSlice_prn := mem.prn[:]
	primitives.Uint8__Array_to_Go(m.Prn[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_prn)))
}

func (t _SatelliteInfoTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SatelliteInfo())
}

type CSatelliteInfo = C.px4_msgs__msg__SatelliteInfo
type CSatelliteInfo__Sequence = C.px4_msgs__msg__SatelliteInfo__Sequence

func SatelliteInfo__Sequence_to_Go(goSlice *[]SatelliteInfo, cSlice CSatelliteInfo__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SatelliteInfo, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SatelliteInfoTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SatelliteInfo__Sequence_to_C(cSlice *CSatelliteInfo__Sequence, goSlice []SatelliteInfo) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SatelliteInfo)(C.malloc(C.sizeof_struct_px4_msgs__msg__SatelliteInfo * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SatelliteInfoTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SatelliteInfo__Array_to_Go(goSlice []SatelliteInfo, cSlice []CSatelliteInfo) {
	for i := 0; i < len(cSlice); i++ {
		SatelliteInfoTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SatelliteInfo__Array_to_C(cSlice []CSatelliteInfo, goSlice []SatelliteInfo) {
	for i := 0; i < len(goSlice); i++ {
		SatelliteInfoTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
