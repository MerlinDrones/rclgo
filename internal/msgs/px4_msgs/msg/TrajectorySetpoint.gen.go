// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/trajectory_setpoint.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TrajectorySetpoint", TrajectorySetpointTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/TrajectorySetpoint", TrajectorySetpointTypeSupport)
}

type TrajectorySetpoint struct {
	Timestamp    uint64     `yaml:"timestamp"`    // time since system start (microseconds)
	Position     [3]float32 `yaml:"position"`     // in meters. NED local world frame
	Velocity     [3]float32 `yaml:"velocity"`     // in meters/second
	Acceleration [3]float32 `yaml:"acceleration"` // in meters/second^2
	Jerk         [3]float32 `yaml:"jerk"`         // in meters/second^3 (for logging only)
	Yaw          float32    `yaml:"yaw"`          // euler angle of desired attitude in radians -PI..+PI
	Yawspeed     float32    `yaml:"yawspeed"`     // angular velocity around NED frame z-axis in radians/second
}

// NewTrajectorySetpoint creates a new TrajectorySetpoint with default values.
func NewTrajectorySetpoint() *TrajectorySetpoint {
	self := TrajectorySetpoint{}
	self.SetDefaults()
	return &self
}

func (t *TrajectorySetpoint) Clone() *TrajectorySetpoint {
	c := &TrajectorySetpoint{}
	c.Timestamp = t.Timestamp
	c.Position = t.Position
	c.Velocity = t.Velocity
	c.Acceleration = t.Acceleration
	c.Jerk = t.Jerk
	c.Yaw = t.Yaw
	c.Yawspeed = t.Yawspeed
	return c
}

func (t *TrajectorySetpoint) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TrajectorySetpoint) SetDefaults() {
	t.Timestamp = 0
	t.Position = [3]float32{}
	t.Velocity = [3]float32{}
	t.Acceleration = [3]float32{}
	t.Jerk = [3]float32{}
	t.Yaw = 0
	t.Yawspeed = 0
}

func (t *TrajectorySetpoint) GetTypeSupport() types.MessageTypeSupport {
	return TrajectorySetpointTypeSupport
}

// TrajectorySetpointPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TrajectorySetpointPublisher struct {
	*rclgo.Publisher
}

// NewTrajectorySetpointPublisher creates and returns a new publisher for the
// TrajectorySetpoint
func NewTrajectorySetpointPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TrajectorySetpointPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TrajectorySetpointTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TrajectorySetpointPublisher{pub}, nil
}

func (p *TrajectorySetpointPublisher) Publish(msg *TrajectorySetpoint) error {
	return p.Publisher.Publish(msg)
}

// TrajectorySetpointSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TrajectorySetpointSubscription struct {
	*rclgo.Subscription
}

// TrajectorySetpointSubscriptionCallback type is used to provide a subscription
// handler function for a TrajectorySetpointSubscription.
type TrajectorySetpointSubscriptionCallback func(msg *TrajectorySetpoint, info *rclgo.MessageInfo, err error)

// NewTrajectorySetpointSubscription creates and returns a new subscription for the
// TrajectorySetpoint
func NewTrajectorySetpointSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TrajectorySetpointSubscriptionCallback) (*TrajectorySetpointSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TrajectorySetpoint
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TrajectorySetpointTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TrajectorySetpointSubscription{sub}, nil
}

func (s *TrajectorySetpointSubscription) TakeMessage(out *TrajectorySetpoint) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrajectorySetpointSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajectorySetpointSlice(dst, src []TrajectorySetpoint) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajectorySetpointTypeSupport types.MessageTypeSupport = _TrajectorySetpointTypeSupport{}

type _TrajectorySetpointTypeSupport struct{}

func (t _TrajectorySetpointTypeSupport) New() types.Message {
	return NewTrajectorySetpoint()
}

func (t _TrajectorySetpointTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TrajectorySetpoint
	return (unsafe.Pointer)(C.px4_msgs__msg__TrajectorySetpoint__create())
}

func (t _TrajectorySetpointTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TrajectorySetpoint__destroy((*C.px4_msgs__msg__TrajectorySetpoint)(pointer_to_free))
}

func (t _TrajectorySetpointTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TrajectorySetpoint)
	mem := (*C.px4_msgs__msg__TrajectorySetpoint)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)), m.Position[:])
	cSlice_velocity := mem.velocity[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity)), m.Velocity[:])
	cSlice_acceleration := mem.acceleration[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_acceleration)), m.Acceleration[:])
	cSlice_jerk := mem.jerk[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_jerk)), m.Jerk[:])
	mem.yaw = C.float(m.Yaw)
	mem.yawspeed = C.float(m.Yawspeed)
}

func (t _TrajectorySetpointTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TrajectorySetpoint)
	mem := (*C.px4_msgs__msg__TrajectorySetpoint)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_Go(m.Position[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)))
	cSlice_velocity := mem.velocity[:]
	primitives.Float32__Array_to_Go(m.Velocity[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_velocity)))
	cSlice_acceleration := mem.acceleration[:]
	primitives.Float32__Array_to_Go(m.Acceleration[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_acceleration)))
	cSlice_jerk := mem.jerk[:]
	primitives.Float32__Array_to_Go(m.Jerk[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_jerk)))
	m.Yaw = float32(mem.yaw)
	m.Yawspeed = float32(mem.yawspeed)
}

func (t _TrajectorySetpointTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TrajectorySetpoint())
}

type CTrajectorySetpoint = C.px4_msgs__msg__TrajectorySetpoint
type CTrajectorySetpoint__Sequence = C.px4_msgs__msg__TrajectorySetpoint__Sequence

func TrajectorySetpoint__Sequence_to_Go(goSlice *[]TrajectorySetpoint, cSlice CTrajectorySetpoint__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrajectorySetpoint, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TrajectorySetpointTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TrajectorySetpoint__Sequence_to_C(cSlice *CTrajectorySetpoint__Sequence, goSlice []TrajectorySetpoint) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TrajectorySetpoint)(C.malloc(C.sizeof_struct_px4_msgs__msg__TrajectorySetpoint * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TrajectorySetpointTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TrajectorySetpoint__Array_to_Go(goSlice []TrajectorySetpoint, cSlice []CTrajectorySetpoint) {
	for i := 0; i < len(cSlice); i++ {
		TrajectorySetpointTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TrajectorySetpoint__Array_to_C(cSlice []CTrajectorySetpoint, goSlice []TrajectorySetpoint) {
	for i := 0; i < len(goSlice); i++ {
		TrajectorySetpointTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
