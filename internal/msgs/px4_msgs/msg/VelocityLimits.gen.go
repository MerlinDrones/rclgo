// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/velocity_limits.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/VelocityLimits", VelocityLimitsTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/VelocityLimits", VelocityLimitsTypeSupport)
}

type VelocityLimits struct {
	Timestamp          uint64  `yaml:"timestamp"`           // time since system start (microseconds)
	HorizontalVelocity float32 `yaml:"horizontal_velocity"` // [m/s]. absolute speeds, NAN means use default limit
	VerticalVelocity   float32 `yaml:"vertical_velocity"`   // [m/s]
	YawRate            float32 `yaml:"yaw_rate"`            // [rad/s]
}

// NewVelocityLimits creates a new VelocityLimits with default values.
func NewVelocityLimits() *VelocityLimits {
	self := VelocityLimits{}
	self.SetDefaults()
	return &self
}

func (t *VelocityLimits) Clone() *VelocityLimits {
	c := &VelocityLimits{}
	c.Timestamp = t.Timestamp
	c.HorizontalVelocity = t.HorizontalVelocity
	c.VerticalVelocity = t.VerticalVelocity
	c.YawRate = t.YawRate
	return c
}

func (t *VelocityLimits) CloneMsg() types.Message {
	return t.Clone()
}

func (t *VelocityLimits) SetDefaults() {
	t.Timestamp = 0
	t.HorizontalVelocity = 0
	t.VerticalVelocity = 0
	t.YawRate = 0
}

func (t *VelocityLimits) GetTypeSupport() types.MessageTypeSupport {
	return VelocityLimitsTypeSupport
}

// VelocityLimitsPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type VelocityLimitsPublisher struct {
	*rclgo.Publisher
}

// NewVelocityLimitsPublisher creates and returns a new publisher for the
// VelocityLimits
func NewVelocityLimitsPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*VelocityLimitsPublisher, error) {
	pub, err := node.NewPublisher(topic_name, VelocityLimitsTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &VelocityLimitsPublisher{pub}, nil
}

func (p *VelocityLimitsPublisher) Publish(msg *VelocityLimits) error {
	return p.Publisher.Publish(msg)
}

// VelocityLimitsSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type VelocityLimitsSubscription struct {
	*rclgo.Subscription
}

// VelocityLimitsSubscriptionCallback type is used to provide a subscription
// handler function for a VelocityLimitsSubscription.
type VelocityLimitsSubscriptionCallback func(msg *VelocityLimits, info *rclgo.MessageInfo, err error)

// NewVelocityLimitsSubscription creates and returns a new subscription for the
// VelocityLimits
func NewVelocityLimitsSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback VelocityLimitsSubscriptionCallback) (*VelocityLimitsSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg VelocityLimits
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, VelocityLimitsTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &VelocityLimitsSubscription{sub}, nil
}

func (s *VelocityLimitsSubscription) TakeMessage(out *VelocityLimits) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneVelocityLimitsSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneVelocityLimitsSlice(dst, src []VelocityLimits) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var VelocityLimitsTypeSupport types.MessageTypeSupport = _VelocityLimitsTypeSupport{}

type _VelocityLimitsTypeSupport struct{}

func (t _VelocityLimitsTypeSupport) New() types.Message {
	return NewVelocityLimits()
}

func (t _VelocityLimitsTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__VelocityLimits
	return (unsafe.Pointer)(C.px4_msgs__msg__VelocityLimits__create())
}

func (t _VelocityLimitsTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__VelocityLimits__destroy((*C.px4_msgs__msg__VelocityLimits)(pointer_to_free))
}

func (t _VelocityLimitsTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*VelocityLimits)
	mem := (*C.px4_msgs__msg__VelocityLimits)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.horizontal_velocity = C.float(m.HorizontalVelocity)
	mem.vertical_velocity = C.float(m.VerticalVelocity)
	mem.yaw_rate = C.float(m.YawRate)
}

func (t _VelocityLimitsTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*VelocityLimits)
	mem := (*C.px4_msgs__msg__VelocityLimits)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.HorizontalVelocity = float32(mem.horizontal_velocity)
	m.VerticalVelocity = float32(mem.vertical_velocity)
	m.YawRate = float32(mem.yaw_rate)
}

func (t _VelocityLimitsTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__VelocityLimits())
}

type CVelocityLimits = C.px4_msgs__msg__VelocityLimits
type CVelocityLimits__Sequence = C.px4_msgs__msg__VelocityLimits__Sequence

func VelocityLimits__Sequence_to_Go(goSlice *[]VelocityLimits, cSlice CVelocityLimits__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]VelocityLimits, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		VelocityLimitsTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func VelocityLimits__Sequence_to_C(cSlice *CVelocityLimits__Sequence, goSlice []VelocityLimits) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__VelocityLimits)(C.malloc(C.sizeof_struct_px4_msgs__msg__VelocityLimits * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		VelocityLimitsTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func VelocityLimits__Array_to_Go(goSlice []VelocityLimits, cSlice []CVelocityLimits) {
	for i := 0; i < len(cSlice); i++ {
		VelocityLimitsTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func VelocityLimits__Array_to_C(cSlice []CVelocityLimits, goSlice []VelocityLimits) {
	for i := 0; i < len(goSlice); i++ {
		VelocityLimitsTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
