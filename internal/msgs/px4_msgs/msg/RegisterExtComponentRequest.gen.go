// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/register_ext_component_request.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RegisterExtComponentRequest", RegisterExtComponentRequestTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RegisterExtComponentRequest", RegisterExtComponentRequestTypeSupport)
}

const (
	RegisterExtComponentRequest_LATEST_PX4_ROS2_API_VERSION uint16 = 1 // API version compatibility. Increase this on a breaking semantic change. Changes to any message field are detected separately and do not require an API version change.
	RegisterExtComponentRequest_ORB_QUEUE_LENGTH            uint8  = 2
)

type RegisterExtComponentRequest struct {
	Timestamp                 uint64   `yaml:"timestamp"`                    // time since system start (microseconds). Request to register an external component
	RequestId                 uint64   `yaml:"request_id"`                   // ID, set this to a random value
	Name                      [25]byte `yaml:"name"`                         // either the requested mode name, or component name
	Px4Ros2ApiVersion         uint16   `yaml:"px4_ros2_api_version"`         // Set to LATEST_PX4_ROS2_API_VERSION
	RegisterArmingCheck       bool     `yaml:"register_arming_check"`        // Components to be registered
	RegisterMode              bool     `yaml:"register_mode"`                // registering a mode also requires arming_check to be set
	RegisterModeExecutor      bool     `yaml:"register_mode_executor"`       // registering an executor also requires a mode to be registered (which is the owned mode by the executor)
	EnableReplaceInternalMode bool     `yaml:"enable_replace_internal_mode"` // set to true if an internal mode should be replaced
	ReplaceInternalMode       uint8    `yaml:"replace_internal_mode"`        // vehicle_status::NAVIGATION_STATE_*
	ActivateModeImmediately   bool     `yaml:"activate_mode_immediately"`    // switch to the registered mode (can only be set in combination with an executor)
}

// NewRegisterExtComponentRequest creates a new RegisterExtComponentRequest with default values.
func NewRegisterExtComponentRequest() *RegisterExtComponentRequest {
	self := RegisterExtComponentRequest{}
	self.SetDefaults()
	return &self
}

func (t *RegisterExtComponentRequest) Clone() *RegisterExtComponentRequest {
	c := &RegisterExtComponentRequest{}
	c.Timestamp = t.Timestamp
	c.RequestId = t.RequestId
	c.Name = t.Name
	c.Px4Ros2ApiVersion = t.Px4Ros2ApiVersion
	c.RegisterArmingCheck = t.RegisterArmingCheck
	c.RegisterMode = t.RegisterMode
	c.RegisterModeExecutor = t.RegisterModeExecutor
	c.EnableReplaceInternalMode = t.EnableReplaceInternalMode
	c.ReplaceInternalMode = t.ReplaceInternalMode
	c.ActivateModeImmediately = t.ActivateModeImmediately
	return c
}

func (t *RegisterExtComponentRequest) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RegisterExtComponentRequest) SetDefaults() {
	t.Timestamp = 0
	t.RequestId = 0
	t.Name = [25]byte{}
	t.Px4Ros2ApiVersion = 0
	t.RegisterArmingCheck = false
	t.RegisterMode = false
	t.RegisterModeExecutor = false
	t.EnableReplaceInternalMode = false
	t.ReplaceInternalMode = 0
	t.ActivateModeImmediately = false
}

func (t *RegisterExtComponentRequest) GetTypeSupport() types.MessageTypeSupport {
	return RegisterExtComponentRequestTypeSupport
}

// RegisterExtComponentRequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RegisterExtComponentRequestPublisher struct {
	*rclgo.Publisher
}

// NewRegisterExtComponentRequestPublisher creates and returns a new publisher for the
// RegisterExtComponentRequest
func NewRegisterExtComponentRequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RegisterExtComponentRequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RegisterExtComponentRequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RegisterExtComponentRequestPublisher{pub}, nil
}

func (p *RegisterExtComponentRequestPublisher) Publish(msg *RegisterExtComponentRequest) error {
	return p.Publisher.Publish(msg)
}

// RegisterExtComponentRequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RegisterExtComponentRequestSubscription struct {
	*rclgo.Subscription
}

// RegisterExtComponentRequestSubscriptionCallback type is used to provide a subscription
// handler function for a RegisterExtComponentRequestSubscription.
type RegisterExtComponentRequestSubscriptionCallback func(msg *RegisterExtComponentRequest, info *rclgo.MessageInfo, err error)

// NewRegisterExtComponentRequestSubscription creates and returns a new subscription for the
// RegisterExtComponentRequest
func NewRegisterExtComponentRequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RegisterExtComponentRequestSubscriptionCallback) (*RegisterExtComponentRequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RegisterExtComponentRequest
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RegisterExtComponentRequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RegisterExtComponentRequestSubscription{sub}, nil
}

func (s *RegisterExtComponentRequestSubscription) TakeMessage(out *RegisterExtComponentRequest) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRegisterExtComponentRequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRegisterExtComponentRequestSlice(dst, src []RegisterExtComponentRequest) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RegisterExtComponentRequestTypeSupport types.MessageTypeSupport = _RegisterExtComponentRequestTypeSupport{}

type _RegisterExtComponentRequestTypeSupport struct{}

func (t _RegisterExtComponentRequestTypeSupport) New() types.Message {
	return NewRegisterExtComponentRequest()
}

func (t _RegisterExtComponentRequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RegisterExtComponentRequest
	return (unsafe.Pointer)(C.px4_msgs__msg__RegisterExtComponentRequest__create())
}

func (t _RegisterExtComponentRequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RegisterExtComponentRequest__destroy((*C.px4_msgs__msg__RegisterExtComponentRequest)(pointer_to_free))
}

func (t _RegisterExtComponentRequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RegisterExtComponentRequest)
	mem := (*C.px4_msgs__msg__RegisterExtComponentRequest)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.request_id = C.uint64_t(m.RequestId)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)), m.Name[:])
	mem.px4_ros2_api_version = C.uint16_t(m.Px4Ros2ApiVersion)
	mem.register_arming_check = C.bool(m.RegisterArmingCheck)
	mem.register_mode = C.bool(m.RegisterMode)
	mem.register_mode_executor = C.bool(m.RegisterModeExecutor)
	mem.enable_replace_internal_mode = C.bool(m.EnableReplaceInternalMode)
	mem.replace_internal_mode = C.uint8_t(m.ReplaceInternalMode)
	mem.activate_mode_immediately = C.bool(m.ActivateModeImmediately)
}

func (t _RegisterExtComponentRequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RegisterExtComponentRequest)
	mem := (*C.px4_msgs__msg__RegisterExtComponentRequest)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.RequestId = uint64(mem.request_id)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_Go(m.Name[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)))
	m.Px4Ros2ApiVersion = uint16(mem.px4_ros2_api_version)
	m.RegisterArmingCheck = bool(mem.register_arming_check)
	m.RegisterMode = bool(mem.register_mode)
	m.RegisterModeExecutor = bool(mem.register_mode_executor)
	m.EnableReplaceInternalMode = bool(mem.enable_replace_internal_mode)
	m.ReplaceInternalMode = uint8(mem.replace_internal_mode)
	m.ActivateModeImmediately = bool(mem.activate_mode_immediately)
}

func (t _RegisterExtComponentRequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RegisterExtComponentRequest())
}

type CRegisterExtComponentRequest = C.px4_msgs__msg__RegisterExtComponentRequest
type CRegisterExtComponentRequest__Sequence = C.px4_msgs__msg__RegisterExtComponentRequest__Sequence

func RegisterExtComponentRequest__Sequence_to_Go(goSlice *[]RegisterExtComponentRequest, cSlice CRegisterExtComponentRequest__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RegisterExtComponentRequest, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RegisterExtComponentRequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RegisterExtComponentRequest__Sequence_to_C(cSlice *CRegisterExtComponentRequest__Sequence, goSlice []RegisterExtComponentRequest) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RegisterExtComponentRequest)(C.malloc(C.sizeof_struct_px4_msgs__msg__RegisterExtComponentRequest * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RegisterExtComponentRequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RegisterExtComponentRequest__Array_to_Go(goSlice []RegisterExtComponentRequest, cSlice []CRegisterExtComponentRequest) {
	for i := 0; i < len(cSlice); i++ {
		RegisterExtComponentRequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RegisterExtComponentRequest__Array_to_C(cSlice []CRegisterExtComponentRequest, goSlice []RegisterExtComponentRequest) {
	for i := 0; i < len(goSlice); i++ {
		RegisterExtComponentRequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
