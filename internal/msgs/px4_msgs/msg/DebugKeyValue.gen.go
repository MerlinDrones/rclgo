// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/debug_key_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/DebugKeyValue", DebugKeyValueTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/DebugKeyValue", DebugKeyValueTypeSupport)
}

type DebugKeyValue struct {
	Timestamp uint64   `yaml:"timestamp"` // time since system start (microseconds)
	Key       [10]byte `yaml:"key"`       // max. 10 characters as key / name
	Value     float32  `yaml:"value"`     // the value to send as debug output
}

// NewDebugKeyValue creates a new DebugKeyValue with default values.
func NewDebugKeyValue() *DebugKeyValue {
	self := DebugKeyValue{}
	self.SetDefaults()
	return &self
}

func (t *DebugKeyValue) Clone() *DebugKeyValue {
	c := &DebugKeyValue{}
	c.Timestamp = t.Timestamp
	c.Key = t.Key
	c.Value = t.Value
	return c
}

func (t *DebugKeyValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DebugKeyValue) SetDefaults() {
	t.Timestamp = 0
	t.Key = [10]byte{}
	t.Value = 0
}

func (t *DebugKeyValue) GetTypeSupport() types.MessageTypeSupport {
	return DebugKeyValueTypeSupport
}

// DebugKeyValuePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DebugKeyValuePublisher struct {
	*rclgo.Publisher
}

// NewDebugKeyValuePublisher creates and returns a new publisher for the
// DebugKeyValue
func NewDebugKeyValuePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DebugKeyValuePublisher, error) {
	pub, err := node.NewPublisher(topic_name, DebugKeyValueTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DebugKeyValuePublisher{pub}, nil
}

func (p *DebugKeyValuePublisher) Publish(msg *DebugKeyValue) error {
	return p.Publisher.Publish(msg)
}

// DebugKeyValueSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DebugKeyValueSubscription struct {
	*rclgo.Subscription
}

// DebugKeyValueSubscriptionCallback type is used to provide a subscription
// handler function for a DebugKeyValueSubscription.
type DebugKeyValueSubscriptionCallback func(msg *DebugKeyValue, info *rclgo.MessageInfo, err error)

// NewDebugKeyValueSubscription creates and returns a new subscription for the
// DebugKeyValue
func NewDebugKeyValueSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DebugKeyValueSubscriptionCallback) (*DebugKeyValueSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DebugKeyValue
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DebugKeyValueTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DebugKeyValueSubscription{sub}, nil
}

func (s *DebugKeyValueSubscription) TakeMessage(out *DebugKeyValue) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDebugKeyValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDebugKeyValueSlice(dst, src []DebugKeyValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DebugKeyValueTypeSupport types.MessageTypeSupport = _DebugKeyValueTypeSupport{}

type _DebugKeyValueTypeSupport struct{}

func (t _DebugKeyValueTypeSupport) New() types.Message {
	return NewDebugKeyValue()
}

func (t _DebugKeyValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DebugKeyValue
	return (unsafe.Pointer)(C.px4_msgs__msg__DebugKeyValue__create())
}

func (t _DebugKeyValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DebugKeyValue__destroy((*C.px4_msgs__msg__DebugKeyValue)(pointer_to_free))
}

func (t _DebugKeyValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DebugKeyValue)
	mem := (*C.px4_msgs__msg__DebugKeyValue)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_key := mem.key[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_key)), m.Key[:])
	mem.value = C.float(m.Value)
}

func (t _DebugKeyValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DebugKeyValue)
	mem := (*C.px4_msgs__msg__DebugKeyValue)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_key := mem.key[:]
	primitives.Char__Array_to_Go(m.Key[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_key)))
	m.Value = float32(mem.value)
}

func (t _DebugKeyValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DebugKeyValue())
}

type CDebugKeyValue = C.px4_msgs__msg__DebugKeyValue
type CDebugKeyValue__Sequence = C.px4_msgs__msg__DebugKeyValue__Sequence

func DebugKeyValue__Sequence_to_Go(goSlice *[]DebugKeyValue, cSlice CDebugKeyValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DebugKeyValue, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DebugKeyValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DebugKeyValue__Sequence_to_C(cSlice *CDebugKeyValue__Sequence, goSlice []DebugKeyValue) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DebugKeyValue)(C.malloc(C.sizeof_struct_px4_msgs__msg__DebugKeyValue * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DebugKeyValueTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DebugKeyValue__Array_to_Go(goSlice []DebugKeyValue, cSlice []CDebugKeyValue) {
	for i := 0; i < len(cSlice); i++ {
		DebugKeyValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DebugKeyValue__Array_to_C(cSlice []CDebugKeyValue, goSlice []DebugKeyValue) {
	for i := 0; i < len(goSlice); i++ {
		DebugKeyValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
