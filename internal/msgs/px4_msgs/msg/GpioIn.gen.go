// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gpio_in.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GpioIn", GpioInTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GpioIn", GpioInTypeSupport)
}

type GpioIn struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds)
	DeviceId  uint32 `yaml:"device_id"` // Device id
	State     uint32 `yaml:"state"`     // pin state mask
}

// NewGpioIn creates a new GpioIn with default values.
func NewGpioIn() *GpioIn {
	self := GpioIn{}
	self.SetDefaults()
	return &self
}

func (t *GpioIn) Clone() *GpioIn {
	c := &GpioIn{}
	c.Timestamp = t.Timestamp
	c.DeviceId = t.DeviceId
	c.State = t.State
	return c
}

func (t *GpioIn) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GpioIn) SetDefaults() {
	t.Timestamp = 0
	t.DeviceId = 0
	t.State = 0
}

func (t *GpioIn) GetTypeSupport() types.MessageTypeSupport {
	return GpioInTypeSupport
}

// GpioInPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GpioInPublisher struct {
	*rclgo.Publisher
}

// NewGpioInPublisher creates and returns a new publisher for the
// GpioIn
func NewGpioInPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GpioInPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GpioInTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GpioInPublisher{pub}, nil
}

func (p *GpioInPublisher) Publish(msg *GpioIn) error {
	return p.Publisher.Publish(msg)
}

// GpioInSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GpioInSubscription struct {
	*rclgo.Subscription
}

// GpioInSubscriptionCallback type is used to provide a subscription
// handler function for a GpioInSubscription.
type GpioInSubscriptionCallback func(msg *GpioIn, info *rclgo.MessageInfo, err error)

// NewGpioInSubscription creates and returns a new subscription for the
// GpioIn
func NewGpioInSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GpioInSubscriptionCallback) (*GpioInSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GpioIn
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GpioInTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GpioInSubscription{sub}, nil
}

func (s *GpioInSubscription) TakeMessage(out *GpioIn) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGpioInSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGpioInSlice(dst, src []GpioIn) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GpioInTypeSupport types.MessageTypeSupport = _GpioInTypeSupport{}

type _GpioInTypeSupport struct{}

func (t _GpioInTypeSupport) New() types.Message {
	return NewGpioIn()
}

func (t _GpioInTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GpioIn
	return (unsafe.Pointer)(C.px4_msgs__msg__GpioIn__create())
}

func (t _GpioInTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GpioIn__destroy((*C.px4_msgs__msg__GpioIn)(pointer_to_free))
}

func (t _GpioInTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GpioIn)
	mem := (*C.px4_msgs__msg__GpioIn)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.state = C.uint32_t(m.State)
}

func (t _GpioInTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GpioIn)
	mem := (*C.px4_msgs__msg__GpioIn)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceId = uint32(mem.device_id)
	m.State = uint32(mem.state)
}

func (t _GpioInTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GpioIn())
}

type CGpioIn = C.px4_msgs__msg__GpioIn
type CGpioIn__Sequence = C.px4_msgs__msg__GpioIn__Sequence

func GpioIn__Sequence_to_Go(goSlice *[]GpioIn, cSlice CGpioIn__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GpioIn, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GpioInTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GpioIn__Sequence_to_C(cSlice *CGpioIn__Sequence, goSlice []GpioIn) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GpioIn)(C.malloc(C.sizeof_struct_px4_msgs__msg__GpioIn * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GpioInTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GpioIn__Array_to_Go(goSlice []GpioIn, cSlice []CGpioIn) {
	for i := 0; i < len(cSlice); i++ {
		GpioInTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GpioIn__Array_to_C(cSlice []CGpioIn, goSlice []GpioIn) {
	for i := 0; i < len(goSlice); i++ {
		GpioInTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
