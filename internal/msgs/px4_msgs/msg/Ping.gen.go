// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/ping.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Ping", PingTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/Ping", PingTypeSupport)
}

type Ping struct {
	Timestamp      uint64  `yaml:"timestamp"`       // time since system start (microseconds)
	PingTime       uint64  `yaml:"ping_time"`       // Timestamp of the ping packet
	PingSequence   uint32  `yaml:"ping_sequence"`   // Sequence number of the ping packet
	DroppedPackets uint32  `yaml:"dropped_packets"` // Number of dropped ping packets
	RttMs          float32 `yaml:"rtt_ms"`          // Round trip time (in ms)
	SystemId       uint8   `yaml:"system_id"`       // System ID of the remote system
	ComponentId    uint8   `yaml:"component_id"`    // Component ID of the remote system
}

// NewPing creates a new Ping with default values.
func NewPing() *Ping {
	self := Ping{}
	self.SetDefaults()
	return &self
}

func (t *Ping) Clone() *Ping {
	c := &Ping{}
	c.Timestamp = t.Timestamp
	c.PingTime = t.PingTime
	c.PingSequence = t.PingSequence
	c.DroppedPackets = t.DroppedPackets
	c.RttMs = t.RttMs
	c.SystemId = t.SystemId
	c.ComponentId = t.ComponentId
	return c
}

func (t *Ping) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Ping) SetDefaults() {
	t.Timestamp = 0
	t.PingTime = 0
	t.PingSequence = 0
	t.DroppedPackets = 0
	t.RttMs = 0
	t.SystemId = 0
	t.ComponentId = 0
}

func (t *Ping) GetTypeSupport() types.MessageTypeSupport {
	return PingTypeSupport
}

// PingPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type PingPublisher struct {
	*rclgo.Publisher
}

// NewPingPublisher creates and returns a new publisher for the
// Ping
func NewPingPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*PingPublisher, error) {
	pub, err := node.NewPublisher(topic_name, PingTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &PingPublisher{pub}, nil
}

func (p *PingPublisher) Publish(msg *Ping) error {
	return p.Publisher.Publish(msg)
}

// PingSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type PingSubscription struct {
	*rclgo.Subscription
}

// PingSubscriptionCallback type is used to provide a subscription
// handler function for a PingSubscription.
type PingSubscriptionCallback func(msg *Ping, info *rclgo.MessageInfo, err error)

// NewPingSubscription creates and returns a new subscription for the
// Ping
func NewPingSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback PingSubscriptionCallback) (*PingSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Ping
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, PingTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &PingSubscription{sub}, nil
}

func (s *PingSubscription) TakeMessage(out *Ping) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// ClonePingSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func ClonePingSlice(dst, src []Ping) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var PingTypeSupport types.MessageTypeSupport = _PingTypeSupport{}

type _PingTypeSupport struct{}

func (t _PingTypeSupport) New() types.Message {
	return NewPing()
}

func (t _PingTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Ping
	return (unsafe.Pointer)(C.px4_msgs__msg__Ping__create())
}

func (t _PingTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Ping__destroy((*C.px4_msgs__msg__Ping)(pointer_to_free))
}

func (t _PingTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Ping)
	mem := (*C.px4_msgs__msg__Ping)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.ping_time = C.uint64_t(m.PingTime)
	mem.ping_sequence = C.uint32_t(m.PingSequence)
	mem.dropped_packets = C.uint32_t(m.DroppedPackets)
	mem.rtt_ms = C.float(m.RttMs)
	mem.system_id = C.uint8_t(m.SystemId)
	mem.component_id = C.uint8_t(m.ComponentId)
}

func (t _PingTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Ping)
	mem := (*C.px4_msgs__msg__Ping)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.PingTime = uint64(mem.ping_time)
	m.PingSequence = uint32(mem.ping_sequence)
	m.DroppedPackets = uint32(mem.dropped_packets)
	m.RttMs = float32(mem.rtt_ms)
	m.SystemId = uint8(mem.system_id)
	m.ComponentId = uint8(mem.component_id)
}

func (t _PingTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Ping())
}

type CPing = C.px4_msgs__msg__Ping
type CPing__Sequence = C.px4_msgs__msg__Ping__Sequence

func Ping__Sequence_to_Go(goSlice *[]Ping, cSlice CPing__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Ping, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		PingTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Ping__Sequence_to_C(cSlice *CPing__Sequence, goSlice []Ping) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Ping)(C.malloc(C.sizeof_struct_px4_msgs__msg__Ping * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		PingTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Ping__Array_to_Go(goSlice []Ping, cSlice []CPing) {
	for i := 0; i < len(cSlice); i++ {
		PingTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Ping__Array_to_C(cSlice []CPing, goSlice []Ping) {
	for i := 0; i < len(goSlice); i++ {
		PingTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
