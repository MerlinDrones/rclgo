// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/differential_pressure.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/DifferentialPressure", DifferentialPressureTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/DifferentialPressure", DifferentialPressureTypeSupport)
}

type DifferentialPressure struct {
	Timestamp              uint64  `yaml:"timestamp"` // time since system start (microseconds)
	TimestampSample        uint64  `yaml:"timestamp_sample"`
	DeviceId               uint32  `yaml:"device_id"`                // unique device ID for the sensor that does not change between power cycles
	DifferentialPressurePa float32 `yaml:"differential_pressure_pa"` // differential pressure reading in Pascals (may be negative)
	Temperature            float32 `yaml:"temperature"`              // Temperature provided by sensor in degrees Celsius, NAN if unknown
	ErrorCount             uint32  `yaml:"error_count"`              // Number of errors detected by driver
}

// NewDifferentialPressure creates a new DifferentialPressure with default values.
func NewDifferentialPressure() *DifferentialPressure {
	self := DifferentialPressure{}
	self.SetDefaults()
	return &self
}

func (t *DifferentialPressure) Clone() *DifferentialPressure {
	c := &DifferentialPressure{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.DeviceId = t.DeviceId
	c.DifferentialPressurePa = t.DifferentialPressurePa
	c.Temperature = t.Temperature
	c.ErrorCount = t.ErrorCount
	return c
}

func (t *DifferentialPressure) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DifferentialPressure) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.DeviceId = 0
	t.DifferentialPressurePa = 0
	t.Temperature = 0
	t.ErrorCount = 0
}

func (t *DifferentialPressure) GetTypeSupport() types.MessageTypeSupport {
	return DifferentialPressureTypeSupport
}

// DifferentialPressurePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DifferentialPressurePublisher struct {
	*rclgo.Publisher
}

// NewDifferentialPressurePublisher creates and returns a new publisher for the
// DifferentialPressure
func NewDifferentialPressurePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DifferentialPressurePublisher, error) {
	pub, err := node.NewPublisher(topic_name, DifferentialPressureTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DifferentialPressurePublisher{pub}, nil
}

func (p *DifferentialPressurePublisher) Publish(msg *DifferentialPressure) error {
	return p.Publisher.Publish(msg)
}

// DifferentialPressureSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DifferentialPressureSubscription struct {
	*rclgo.Subscription
}

// DifferentialPressureSubscriptionCallback type is used to provide a subscription
// handler function for a DifferentialPressureSubscription.
type DifferentialPressureSubscriptionCallback func(msg *DifferentialPressure, info *rclgo.MessageInfo, err error)

// NewDifferentialPressureSubscription creates and returns a new subscription for the
// DifferentialPressure
func NewDifferentialPressureSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DifferentialPressureSubscriptionCallback) (*DifferentialPressureSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DifferentialPressure
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DifferentialPressureTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DifferentialPressureSubscription{sub}, nil
}

func (s *DifferentialPressureSubscription) TakeMessage(out *DifferentialPressure) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDifferentialPressureSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDifferentialPressureSlice(dst, src []DifferentialPressure) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DifferentialPressureTypeSupport types.MessageTypeSupport = _DifferentialPressureTypeSupport{}

type _DifferentialPressureTypeSupport struct{}

func (t _DifferentialPressureTypeSupport) New() types.Message {
	return NewDifferentialPressure()
}

func (t _DifferentialPressureTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DifferentialPressure
	return (unsafe.Pointer)(C.px4_msgs__msg__DifferentialPressure__create())
}

func (t _DifferentialPressureTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DifferentialPressure__destroy((*C.px4_msgs__msg__DifferentialPressure)(pointer_to_free))
}

func (t _DifferentialPressureTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DifferentialPressure)
	mem := (*C.px4_msgs__msg__DifferentialPressure)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.differential_pressure_pa = C.float(m.DifferentialPressurePa)
	mem.temperature = C.float(m.Temperature)
	mem.error_count = C.uint32_t(m.ErrorCount)
}

func (t _DifferentialPressureTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DifferentialPressure)
	mem := (*C.px4_msgs__msg__DifferentialPressure)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.DeviceId = uint32(mem.device_id)
	m.DifferentialPressurePa = float32(mem.differential_pressure_pa)
	m.Temperature = float32(mem.temperature)
	m.ErrorCount = uint32(mem.error_count)
}

func (t _DifferentialPressureTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DifferentialPressure())
}

type CDifferentialPressure = C.px4_msgs__msg__DifferentialPressure
type CDifferentialPressure__Sequence = C.px4_msgs__msg__DifferentialPressure__Sequence

func DifferentialPressure__Sequence_to_Go(goSlice *[]DifferentialPressure, cSlice CDifferentialPressure__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DifferentialPressure, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DifferentialPressureTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DifferentialPressure__Sequence_to_C(cSlice *CDifferentialPressure__Sequence, goSlice []DifferentialPressure) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DifferentialPressure)(C.malloc(C.sizeof_struct_px4_msgs__msg__DifferentialPressure * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DifferentialPressureTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DifferentialPressure__Array_to_Go(goSlice []DifferentialPressure, cSlice []CDifferentialPressure) {
	for i := 0; i < len(cSlice); i++ {
		DifferentialPressureTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DifferentialPressure__Array_to_C(cSlice []CDifferentialPressure, goSlice []DifferentialPressure) {
	for i := 0; i < len(goSlice); i++ {
		DifferentialPressureTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
