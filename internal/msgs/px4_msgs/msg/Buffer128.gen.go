// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/buffer128.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Buffer128", Buffer128TypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/Buffer128", Buffer128TypeSupport)
}

const (
	Buffer128_MAX_BUFLEN uint32 = 128
)

type Buffer128 struct {
	Timestamp uint64     `yaml:"timestamp"` // time since system start (microseconds)
	Len       uint8      `yaml:"len"`       // length of data
	Data      [128]uint8 `yaml:"data"`      // data
}

// NewBuffer128 creates a new Buffer128 with default values.
func NewBuffer128() *Buffer128 {
	self := Buffer128{}
	self.SetDefaults()
	return &self
}

func (t *Buffer128) Clone() *Buffer128 {
	c := &Buffer128{}
	c.Timestamp = t.Timestamp
	c.Len = t.Len
	c.Data = t.Data
	return c
}

func (t *Buffer128) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Buffer128) SetDefaults() {
	t.Timestamp = 0
	t.Len = 0
	t.Data = [128]uint8{}
}

func (t *Buffer128) GetTypeSupport() types.MessageTypeSupport {
	return Buffer128TypeSupport
}

// Buffer128Publisher wraps rclgo.Publisher to provide type safe helper
// functions
type Buffer128Publisher struct {
	*rclgo.Publisher
}

// NewBuffer128Publisher creates and returns a new publisher for the
// Buffer128
func NewBuffer128Publisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*Buffer128Publisher, error) {
	pub, err := node.NewPublisher(topic_name, Buffer128TypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &Buffer128Publisher{pub}, nil
}

func (p *Buffer128Publisher) Publish(msg *Buffer128) error {
	return p.Publisher.Publish(msg)
}

// Buffer128Subscription wraps rclgo.Subscription to provide type safe helper
// functions
type Buffer128Subscription struct {
	*rclgo.Subscription
}

// Buffer128SubscriptionCallback type is used to provide a subscription
// handler function for a Buffer128Subscription.
type Buffer128SubscriptionCallback func(msg *Buffer128, info *rclgo.MessageInfo, err error)

// NewBuffer128Subscription creates and returns a new subscription for the
// Buffer128
func NewBuffer128Subscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback Buffer128SubscriptionCallback) (*Buffer128Subscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Buffer128
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, Buffer128TypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &Buffer128Subscription{sub}, nil
}

func (s *Buffer128Subscription) TakeMessage(out *Buffer128) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneBuffer128Slice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneBuffer128Slice(dst, src []Buffer128) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var Buffer128TypeSupport types.MessageTypeSupport = _Buffer128TypeSupport{}

type _Buffer128TypeSupport struct{}

func (t _Buffer128TypeSupport) New() types.Message {
	return NewBuffer128()
}

func (t _Buffer128TypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Buffer128
	return (unsafe.Pointer)(C.px4_msgs__msg__Buffer128__create())
}

func (t _Buffer128TypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Buffer128__destroy((*C.px4_msgs__msg__Buffer128)(pointer_to_free))
}

func (t _Buffer128TypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Buffer128)
	mem := (*C.px4_msgs__msg__Buffer128)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.len = C.uint8_t(m.Len)
	cSlice_data := mem.data[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_data)), m.Data[:])
}

func (t _Buffer128TypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Buffer128)
	mem := (*C.px4_msgs__msg__Buffer128)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Len = uint8(mem.len)
	cSlice_data := mem.data[:]
	primitives.Uint8__Array_to_Go(m.Data[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_data)))
}

func (t _Buffer128TypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Buffer128())
}

type CBuffer128 = C.px4_msgs__msg__Buffer128
type CBuffer128__Sequence = C.px4_msgs__msg__Buffer128__Sequence

func Buffer128__Sequence_to_Go(goSlice *[]Buffer128, cSlice CBuffer128__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Buffer128, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		Buffer128TypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Buffer128__Sequence_to_C(cSlice *CBuffer128__Sequence, goSlice []Buffer128) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Buffer128)(C.malloc(C.sizeof_struct_px4_msgs__msg__Buffer128 * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		Buffer128TypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Buffer128__Array_to_Go(goSlice []Buffer128, cSlice []CBuffer128) {
	for i := 0; i < len(cSlice); i++ {
		Buffer128TypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Buffer128__Array_to_C(cSlice []CBuffer128, goSlice []Buffer128) {
	for i := 0; i < len(goSlice); i++ {
		Buffer128TypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
