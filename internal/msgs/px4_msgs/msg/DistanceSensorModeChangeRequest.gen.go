// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/distance_sensor_mode_change_request.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/DistanceSensorModeChangeRequest", DistanceSensorModeChangeRequestTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/DistanceSensorModeChangeRequest", DistanceSensorModeChangeRequestTypeSupport)
}

const (
	DistanceSensorModeChangeRequest_REQUEST_OFF uint8 = 0
	DistanceSensorModeChangeRequest_REQUEST_ON  uint8 = 1
)

type DistanceSensorModeChangeRequest struct {
	Timestamp    uint64 `yaml:"timestamp"`      // time since system start (microseconds)
	RequestOnOff uint8  `yaml:"request_on_off"` // request to disable/enable the distance sensor
}

// NewDistanceSensorModeChangeRequest creates a new DistanceSensorModeChangeRequest with default values.
func NewDistanceSensorModeChangeRequest() *DistanceSensorModeChangeRequest {
	self := DistanceSensorModeChangeRequest{}
	self.SetDefaults()
	return &self
}

func (t *DistanceSensorModeChangeRequest) Clone() *DistanceSensorModeChangeRequest {
	c := &DistanceSensorModeChangeRequest{}
	c.Timestamp = t.Timestamp
	c.RequestOnOff = t.RequestOnOff
	return c
}

func (t *DistanceSensorModeChangeRequest) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DistanceSensorModeChangeRequest) SetDefaults() {
	t.Timestamp = 0
	t.RequestOnOff = 0
}

func (t *DistanceSensorModeChangeRequest) GetTypeSupport() types.MessageTypeSupport {
	return DistanceSensorModeChangeRequestTypeSupport
}

// DistanceSensorModeChangeRequestPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DistanceSensorModeChangeRequestPublisher struct {
	*rclgo.Publisher
}

// NewDistanceSensorModeChangeRequestPublisher creates and returns a new publisher for the
// DistanceSensorModeChangeRequest
func NewDistanceSensorModeChangeRequestPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DistanceSensorModeChangeRequestPublisher, error) {
	pub, err := node.NewPublisher(topic_name, DistanceSensorModeChangeRequestTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DistanceSensorModeChangeRequestPublisher{pub}, nil
}

func (p *DistanceSensorModeChangeRequestPublisher) Publish(msg *DistanceSensorModeChangeRequest) error {
	return p.Publisher.Publish(msg)
}

// DistanceSensorModeChangeRequestSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DistanceSensorModeChangeRequestSubscription struct {
	*rclgo.Subscription
}

// DistanceSensorModeChangeRequestSubscriptionCallback type is used to provide a subscription
// handler function for a DistanceSensorModeChangeRequestSubscription.
type DistanceSensorModeChangeRequestSubscriptionCallback func(msg *DistanceSensorModeChangeRequest, info *rclgo.MessageInfo, err error)

// NewDistanceSensorModeChangeRequestSubscription creates and returns a new subscription for the
// DistanceSensorModeChangeRequest
func NewDistanceSensorModeChangeRequestSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DistanceSensorModeChangeRequestSubscriptionCallback) (*DistanceSensorModeChangeRequestSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DistanceSensorModeChangeRequest
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DistanceSensorModeChangeRequestTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DistanceSensorModeChangeRequestSubscription{sub}, nil
}

func (s *DistanceSensorModeChangeRequestSubscription) TakeMessage(out *DistanceSensorModeChangeRequest) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDistanceSensorModeChangeRequestSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDistanceSensorModeChangeRequestSlice(dst, src []DistanceSensorModeChangeRequest) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DistanceSensorModeChangeRequestTypeSupport types.MessageTypeSupport = _DistanceSensorModeChangeRequestTypeSupport{}

type _DistanceSensorModeChangeRequestTypeSupport struct{}

func (t _DistanceSensorModeChangeRequestTypeSupport) New() types.Message {
	return NewDistanceSensorModeChangeRequest()
}

func (t _DistanceSensorModeChangeRequestTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DistanceSensorModeChangeRequest
	return (unsafe.Pointer)(C.px4_msgs__msg__DistanceSensorModeChangeRequest__create())
}

func (t _DistanceSensorModeChangeRequestTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DistanceSensorModeChangeRequest__destroy((*C.px4_msgs__msg__DistanceSensorModeChangeRequest)(pointer_to_free))
}

func (t _DistanceSensorModeChangeRequestTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DistanceSensorModeChangeRequest)
	mem := (*C.px4_msgs__msg__DistanceSensorModeChangeRequest)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.request_on_off = C.uint8_t(m.RequestOnOff)
}

func (t _DistanceSensorModeChangeRequestTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DistanceSensorModeChangeRequest)
	mem := (*C.px4_msgs__msg__DistanceSensorModeChangeRequest)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.RequestOnOff = uint8(mem.request_on_off)
}

func (t _DistanceSensorModeChangeRequestTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DistanceSensorModeChangeRequest())
}

type CDistanceSensorModeChangeRequest = C.px4_msgs__msg__DistanceSensorModeChangeRequest
type CDistanceSensorModeChangeRequest__Sequence = C.px4_msgs__msg__DistanceSensorModeChangeRequest__Sequence

func DistanceSensorModeChangeRequest__Sequence_to_Go(goSlice *[]DistanceSensorModeChangeRequest, cSlice CDistanceSensorModeChangeRequest__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DistanceSensorModeChangeRequest, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DistanceSensorModeChangeRequestTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DistanceSensorModeChangeRequest__Sequence_to_C(cSlice *CDistanceSensorModeChangeRequest__Sequence, goSlice []DistanceSensorModeChangeRequest) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DistanceSensorModeChangeRequest)(C.malloc(C.sizeof_struct_px4_msgs__msg__DistanceSensorModeChangeRequest * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DistanceSensorModeChangeRequestTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DistanceSensorModeChangeRequest__Array_to_Go(goSlice []DistanceSensorModeChangeRequest, cSlice []CDistanceSensorModeChangeRequest) {
	for i := 0; i < len(cSlice); i++ {
		DistanceSensorModeChangeRequestTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DistanceSensorModeChangeRequest__Array_to_C(cSlice []CDistanceSensorModeChangeRequest, goSlice []DistanceSensorModeChangeRequest) {
	for i := 0; i < len(goSlice); i++ {
		DistanceSensorModeChangeRequestTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
