// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/wheel_encoders.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/WheelEncoders", WheelEncodersTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/WheelEncoders", WheelEncodersTypeSupport)
}

type WheelEncoders struct {
	Timestamp  uint64     `yaml:"timestamp"`   // time since system start (microseconds)
	WheelSpeed [2]float32 `yaml:"wheel_speed"` // [rad/s]. Two wheels: 0 right, 1 left
	WheelAngle [2]float32 `yaml:"wheel_angle"` // [rad]
}

// NewWheelEncoders creates a new WheelEncoders with default values.
func NewWheelEncoders() *WheelEncoders {
	self := WheelEncoders{}
	self.SetDefaults()
	return &self
}

func (t *WheelEncoders) Clone() *WheelEncoders {
	c := &WheelEncoders{}
	c.Timestamp = t.Timestamp
	c.WheelSpeed = t.WheelSpeed
	c.WheelAngle = t.WheelAngle
	return c
}

func (t *WheelEncoders) CloneMsg() types.Message {
	return t.Clone()
}

func (t *WheelEncoders) SetDefaults() {
	t.Timestamp = 0
	t.WheelSpeed = [2]float32{}
	t.WheelAngle = [2]float32{}
}

func (t *WheelEncoders) GetTypeSupport() types.MessageTypeSupport {
	return WheelEncodersTypeSupport
}

// WheelEncodersPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type WheelEncodersPublisher struct {
	*rclgo.Publisher
}

// NewWheelEncodersPublisher creates and returns a new publisher for the
// WheelEncoders
func NewWheelEncodersPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*WheelEncodersPublisher, error) {
	pub, err := node.NewPublisher(topic_name, WheelEncodersTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &WheelEncodersPublisher{pub}, nil
}

func (p *WheelEncodersPublisher) Publish(msg *WheelEncoders) error {
	return p.Publisher.Publish(msg)
}

// WheelEncodersSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type WheelEncodersSubscription struct {
	*rclgo.Subscription
}

// WheelEncodersSubscriptionCallback type is used to provide a subscription
// handler function for a WheelEncodersSubscription.
type WheelEncodersSubscriptionCallback func(msg *WheelEncoders, info *rclgo.MessageInfo, err error)

// NewWheelEncodersSubscription creates and returns a new subscription for the
// WheelEncoders
func NewWheelEncodersSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback WheelEncodersSubscriptionCallback) (*WheelEncodersSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg WheelEncoders
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, WheelEncodersTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &WheelEncodersSubscription{sub}, nil
}

func (s *WheelEncodersSubscription) TakeMessage(out *WheelEncoders) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneWheelEncodersSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneWheelEncodersSlice(dst, src []WheelEncoders) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var WheelEncodersTypeSupport types.MessageTypeSupport = _WheelEncodersTypeSupport{}

type _WheelEncodersTypeSupport struct{}

func (t _WheelEncodersTypeSupport) New() types.Message {
	return NewWheelEncoders()
}

func (t _WheelEncodersTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__WheelEncoders
	return (unsafe.Pointer)(C.px4_msgs__msg__WheelEncoders__create())
}

func (t _WheelEncodersTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__WheelEncoders__destroy((*C.px4_msgs__msg__WheelEncoders)(pointer_to_free))
}

func (t _WheelEncodersTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*WheelEncoders)
	mem := (*C.px4_msgs__msg__WheelEncoders)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_wheel_speed := mem.wheel_speed[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_wheel_speed)), m.WheelSpeed[:])
	cSlice_wheel_angle := mem.wheel_angle[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_wheel_angle)), m.WheelAngle[:])
}

func (t _WheelEncodersTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*WheelEncoders)
	mem := (*C.px4_msgs__msg__WheelEncoders)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_wheel_speed := mem.wheel_speed[:]
	primitives.Float32__Array_to_Go(m.WheelSpeed[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_wheel_speed)))
	cSlice_wheel_angle := mem.wheel_angle[:]
	primitives.Float32__Array_to_Go(m.WheelAngle[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_wheel_angle)))
}

func (t _WheelEncodersTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__WheelEncoders())
}

type CWheelEncoders = C.px4_msgs__msg__WheelEncoders
type CWheelEncoders__Sequence = C.px4_msgs__msg__WheelEncoders__Sequence

func WheelEncoders__Sequence_to_Go(goSlice *[]WheelEncoders, cSlice CWheelEncoders__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]WheelEncoders, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		WheelEncodersTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func WheelEncoders__Sequence_to_C(cSlice *CWheelEncoders__Sequence, goSlice []WheelEncoders) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__WheelEncoders)(C.malloc(C.sizeof_struct_px4_msgs__msg__WheelEncoders * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		WheelEncodersTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func WheelEncoders__Array_to_Go(goSlice []WheelEncoders, cSlice []CWheelEncoders) {
	for i := 0; i < len(cSlice); i++ {
		WheelEncodersTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func WheelEncoders__Array_to_C(cSlice []CWheelEncoders, goSlice []WheelEncoders) {
	for i := 0; i < len(goSlice); i++ {
		WheelEncodersTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
