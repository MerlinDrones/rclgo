// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensors_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorsStatus", SensorsStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SensorsStatus", SensorsStatusTypeSupport)
}

type SensorsStatus struct {
	Timestamp       uint64     `yaml:"timestamp"`         // time since system start (microseconds). Sensor check metrics. This will be zero for a sensor that's primary or unpopulated.
	DeviceIdPrimary uint32     `yaml:"device_id_primary"` // current primary device id for reference
	DeviceIds       [4]uint32  `yaml:"device_ids"`
	Inconsistency   [4]float32 `yaml:"inconsistency"` // magnitude of difference between sensor instance and mean
	Healthy         [4]bool    `yaml:"healthy"`       // sensor healthy
	Priority        [4]uint8   `yaml:"priority"`
	Enabled         [4]bool    `yaml:"enabled"`
	External        [4]bool    `yaml:"external"`
}

// NewSensorsStatus creates a new SensorsStatus with default values.
func NewSensorsStatus() *SensorsStatus {
	self := SensorsStatus{}
	self.SetDefaults()
	return &self
}

func (t *SensorsStatus) Clone() *SensorsStatus {
	c := &SensorsStatus{}
	c.Timestamp = t.Timestamp
	c.DeviceIdPrimary = t.DeviceIdPrimary
	c.DeviceIds = t.DeviceIds
	c.Inconsistency = t.Inconsistency
	c.Healthy = t.Healthy
	c.Priority = t.Priority
	c.Enabled = t.Enabled
	c.External = t.External
	return c
}

func (t *SensorsStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorsStatus) SetDefaults() {
	t.Timestamp = 0
	t.DeviceIdPrimary = 0
	t.DeviceIds = [4]uint32{}
	t.Inconsistency = [4]float32{}
	t.Healthy = [4]bool{}
	t.Priority = [4]uint8{}
	t.Enabled = [4]bool{}
	t.External = [4]bool{}
}

func (t *SensorsStatus) GetTypeSupport() types.MessageTypeSupport {
	return SensorsStatusTypeSupport
}

// SensorsStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorsStatusPublisher struct {
	*rclgo.Publisher
}

// NewSensorsStatusPublisher creates and returns a new publisher for the
// SensorsStatus
func NewSensorsStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorsStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorsStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorsStatusPublisher{pub}, nil
}

func (p *SensorsStatusPublisher) Publish(msg *SensorsStatus) error {
	return p.Publisher.Publish(msg)
}

// SensorsStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorsStatusSubscription struct {
	*rclgo.Subscription
}

// SensorsStatusSubscriptionCallback type is used to provide a subscription
// handler function for a SensorsStatusSubscription.
type SensorsStatusSubscriptionCallback func(msg *SensorsStatus, info *rclgo.MessageInfo, err error)

// NewSensorsStatusSubscription creates and returns a new subscription for the
// SensorsStatus
func NewSensorsStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorsStatusSubscriptionCallback) (*SensorsStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorsStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorsStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorsStatusSubscription{sub}, nil
}

func (s *SensorsStatusSubscription) TakeMessage(out *SensorsStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorsStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorsStatusSlice(dst, src []SensorsStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorsStatusTypeSupport types.MessageTypeSupport = _SensorsStatusTypeSupport{}

type _SensorsStatusTypeSupport struct{}

func (t _SensorsStatusTypeSupport) New() types.Message {
	return NewSensorsStatus()
}

func (t _SensorsStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorsStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorsStatus__create())
}

func (t _SensorsStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorsStatus__destroy((*C.px4_msgs__msg__SensorsStatus)(pointer_to_free))
}

func (t _SensorsStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorsStatus)
	mem := (*C.px4_msgs__msg__SensorsStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id_primary = C.uint32_t(m.DeviceIdPrimary)
	cSlice_device_ids := mem.device_ids[:]
	primitives.Uint32__Array_to_C(*(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_device_ids)), m.DeviceIds[:])
	cSlice_inconsistency := mem.inconsistency[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_inconsistency)), m.Inconsistency[:])
	cSlice_healthy := mem.healthy[:]
	primitives.Bool__Array_to_C(*(*[]primitives.CBool)(unsafe.Pointer(&cSlice_healthy)), m.Healthy[:])
	cSlice_priority := mem.priority[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_priority)), m.Priority[:])
	cSlice_enabled := mem.enabled[:]
	primitives.Bool__Array_to_C(*(*[]primitives.CBool)(unsafe.Pointer(&cSlice_enabled)), m.Enabled[:])
	cSlice_external := mem.external[:]
	primitives.Bool__Array_to_C(*(*[]primitives.CBool)(unsafe.Pointer(&cSlice_external)), m.External[:])
}

func (t _SensorsStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorsStatus)
	mem := (*C.px4_msgs__msg__SensorsStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceIdPrimary = uint32(mem.device_id_primary)
	cSlice_device_ids := mem.device_ids[:]
	primitives.Uint32__Array_to_Go(m.DeviceIds[:], *(*[]primitives.CUint32)(unsafe.Pointer(&cSlice_device_ids)))
	cSlice_inconsistency := mem.inconsistency[:]
	primitives.Float32__Array_to_Go(m.Inconsistency[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_inconsistency)))
	cSlice_healthy := mem.healthy[:]
	primitives.Bool__Array_to_Go(m.Healthy[:], *(*[]primitives.CBool)(unsafe.Pointer(&cSlice_healthy)))
	cSlice_priority := mem.priority[:]
	primitives.Uint8__Array_to_Go(m.Priority[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_priority)))
	cSlice_enabled := mem.enabled[:]
	primitives.Bool__Array_to_Go(m.Enabled[:], *(*[]primitives.CBool)(unsafe.Pointer(&cSlice_enabled)))
	cSlice_external := mem.external[:]
	primitives.Bool__Array_to_Go(m.External[:], *(*[]primitives.CBool)(unsafe.Pointer(&cSlice_external)))
}

func (t _SensorsStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorsStatus())
}

type CSensorsStatus = C.px4_msgs__msg__SensorsStatus
type CSensorsStatus__Sequence = C.px4_msgs__msg__SensorsStatus__Sequence

func SensorsStatus__Sequence_to_Go(goSlice *[]SensorsStatus, cSlice CSensorsStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorsStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorsStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorsStatus__Sequence_to_C(cSlice *CSensorsStatus__Sequence, goSlice []SensorsStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorsStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__SensorsStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorsStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorsStatus__Array_to_Go(goSlice []SensorsStatus, cSlice []CSensorsStatus) {
	for i := 0; i < len(cSlice); i++ {
		SensorsStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorsStatus__Array_to_C(cSlice []CSensorsStatus, goSlice []SensorsStatus) {
	for i := 0; i < len(goSlice); i++ {
		SensorsStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
