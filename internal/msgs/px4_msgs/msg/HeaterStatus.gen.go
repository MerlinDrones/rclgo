// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/heater_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/HeaterStatus", HeaterStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/HeaterStatus", HeaterStatusTypeSupport)
}

const (
	HeaterStatus_MODE_GPIO  uint8 = 1
	HeaterStatus_MODE_PX4IO uint8 = 2
)

type HeaterStatus struct {
	Timestamp            uint64  `yaml:"timestamp"` // time since system start (microseconds)
	DeviceId             uint32  `yaml:"device_id"`
	HeaterOn             bool    `yaml:"heater_on"`
	TemperatureTargetMet bool    `yaml:"temperature_target_met"`
	TemperatureSensor    float32 `yaml:"temperature_sensor"`
	TemperatureTarget    float32 `yaml:"temperature_target"`
	ControllerPeriodUsec uint32  `yaml:"controller_period_usec"`
	ControllerTimeOnUsec uint32  `yaml:"controller_time_on_usec"`
	ProportionalValue    float32 `yaml:"proportional_value"`
	IntegratorValue      float32 `yaml:"integrator_value"`
	FeedForwardValue     float32 `yaml:"feed_forward_value"`
	Mode                 uint8   `yaml:"mode"`
}

// NewHeaterStatus creates a new HeaterStatus with default values.
func NewHeaterStatus() *HeaterStatus {
	self := HeaterStatus{}
	self.SetDefaults()
	return &self
}

func (t *HeaterStatus) Clone() *HeaterStatus {
	c := &HeaterStatus{}
	c.Timestamp = t.Timestamp
	c.DeviceId = t.DeviceId
	c.HeaterOn = t.HeaterOn
	c.TemperatureTargetMet = t.TemperatureTargetMet
	c.TemperatureSensor = t.TemperatureSensor
	c.TemperatureTarget = t.TemperatureTarget
	c.ControllerPeriodUsec = t.ControllerPeriodUsec
	c.ControllerTimeOnUsec = t.ControllerTimeOnUsec
	c.ProportionalValue = t.ProportionalValue
	c.IntegratorValue = t.IntegratorValue
	c.FeedForwardValue = t.FeedForwardValue
	c.Mode = t.Mode
	return c
}

func (t *HeaterStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HeaterStatus) SetDefaults() {
	t.Timestamp = 0
	t.DeviceId = 0
	t.HeaterOn = false
	t.TemperatureTargetMet = false
	t.TemperatureSensor = 0
	t.TemperatureTarget = 0
	t.ControllerPeriodUsec = 0
	t.ControllerTimeOnUsec = 0
	t.ProportionalValue = 0
	t.IntegratorValue = 0
	t.FeedForwardValue = 0
	t.Mode = 0
}

func (t *HeaterStatus) GetTypeSupport() types.MessageTypeSupport {
	return HeaterStatusTypeSupport
}

// HeaterStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HeaterStatusPublisher struct {
	*rclgo.Publisher
}

// NewHeaterStatusPublisher creates and returns a new publisher for the
// HeaterStatus
func NewHeaterStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HeaterStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, HeaterStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HeaterStatusPublisher{pub}, nil
}

func (p *HeaterStatusPublisher) Publish(msg *HeaterStatus) error {
	return p.Publisher.Publish(msg)
}

// HeaterStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HeaterStatusSubscription struct {
	*rclgo.Subscription
}

// HeaterStatusSubscriptionCallback type is used to provide a subscription
// handler function for a HeaterStatusSubscription.
type HeaterStatusSubscriptionCallback func(msg *HeaterStatus, info *rclgo.MessageInfo, err error)

// NewHeaterStatusSubscription creates and returns a new subscription for the
// HeaterStatus
func NewHeaterStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HeaterStatusSubscriptionCallback) (*HeaterStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HeaterStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HeaterStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HeaterStatusSubscription{sub}, nil
}

func (s *HeaterStatusSubscription) TakeMessage(out *HeaterStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHeaterStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHeaterStatusSlice(dst, src []HeaterStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HeaterStatusTypeSupport types.MessageTypeSupport = _HeaterStatusTypeSupport{}

type _HeaterStatusTypeSupport struct{}

func (t _HeaterStatusTypeSupport) New() types.Message {
	return NewHeaterStatus()
}

func (t _HeaterStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__HeaterStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__HeaterStatus__create())
}

func (t _HeaterStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__HeaterStatus__destroy((*C.px4_msgs__msg__HeaterStatus)(pointer_to_free))
}

func (t _HeaterStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HeaterStatus)
	mem := (*C.px4_msgs__msg__HeaterStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.heater_on = C.bool(m.HeaterOn)
	mem.temperature_target_met = C.bool(m.TemperatureTargetMet)
	mem.temperature_sensor = C.float(m.TemperatureSensor)
	mem.temperature_target = C.float(m.TemperatureTarget)
	mem.controller_period_usec = C.uint32_t(m.ControllerPeriodUsec)
	mem.controller_time_on_usec = C.uint32_t(m.ControllerTimeOnUsec)
	mem.proportional_value = C.float(m.ProportionalValue)
	mem.integrator_value = C.float(m.IntegratorValue)
	mem.feed_forward_value = C.float(m.FeedForwardValue)
	mem.mode = C.uint8_t(m.Mode)
}

func (t _HeaterStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HeaterStatus)
	mem := (*C.px4_msgs__msg__HeaterStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceId = uint32(mem.device_id)
	m.HeaterOn = bool(mem.heater_on)
	m.TemperatureTargetMet = bool(mem.temperature_target_met)
	m.TemperatureSensor = float32(mem.temperature_sensor)
	m.TemperatureTarget = float32(mem.temperature_target)
	m.ControllerPeriodUsec = uint32(mem.controller_period_usec)
	m.ControllerTimeOnUsec = uint32(mem.controller_time_on_usec)
	m.ProportionalValue = float32(mem.proportional_value)
	m.IntegratorValue = float32(mem.integrator_value)
	m.FeedForwardValue = float32(mem.feed_forward_value)
	m.Mode = uint8(mem.mode)
}

func (t _HeaterStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__HeaterStatus())
}

type CHeaterStatus = C.px4_msgs__msg__HeaterStatus
type CHeaterStatus__Sequence = C.px4_msgs__msg__HeaterStatus__Sequence

func HeaterStatus__Sequence_to_Go(goSlice *[]HeaterStatus, cSlice CHeaterStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HeaterStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HeaterStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HeaterStatus__Sequence_to_C(cSlice *CHeaterStatus__Sequence, goSlice []HeaterStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__HeaterStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__HeaterStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HeaterStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HeaterStatus__Array_to_Go(goSlice []HeaterStatus, cSlice []CHeaterStatus) {
	for i := 0; i < len(cSlice); i++ {
		HeaterStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HeaterStatus__Array_to_C(cSlice []CHeaterStatus, goSlice []HeaterStatus) {
	for i := 0; i < len(goSlice); i++ {
		HeaterStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
