// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/gpio_config.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/GpioConfig", GpioConfigTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/GpioConfig", GpioConfigTypeSupport)
}

const (
	GpioConfig_INPUT                   uint32 = 0   // 0x0000. Configuration MaskBit 0-3: Direction: 0=Input, 1=OutputBit 4-7: Input Config: 0=Floating, 1=PullUp, 2=PullDownBit 8-12: Output Config: 0=PushPull, 1=OpenDrainBit 13-31: Reserved
	GpioConfig_OUTPUT                  uint32 = 1   // 0x0001
	GpioConfig_PULLUP                  uint32 = 16  // 0x0010
	GpioConfig_PULLDOWN                uint32 = 32  // 0x0020
	GpioConfig_OPENDRAIN               uint32 = 256 // 0x0100
	GpioConfig_INPUT_FLOATING          uint32 = 0   // 0x0000
	GpioConfig_INPUT_PULLUP            uint32 = 16  // 0x0010
	GpioConfig_INPUT_PULLDOWN          uint32 = 32  // 0x0020
	GpioConfig_OUTPUT_PUSHPULL         uint32 = 0   // 0x0000
	GpioConfig_OUTPUT_OPENDRAIN        uint32 = 256 // 0x0100
	GpioConfig_OUTPUT_OPENDRAIN_PULLUP uint32 = 272 // 0x0110
)

type GpioConfig struct {
	Timestamp uint64 `yaml:"timestamp"` // time since system start (microseconds)
	DeviceId  uint32 `yaml:"device_id"` // Device id
	Mask      uint32 `yaml:"mask"`      // Pin mask
	State     uint32 `yaml:"state"`     // Initial pin output state
	Config    uint32 `yaml:"config"`
}

// NewGpioConfig creates a new GpioConfig with default values.
func NewGpioConfig() *GpioConfig {
	self := GpioConfig{}
	self.SetDefaults()
	return &self
}

func (t *GpioConfig) Clone() *GpioConfig {
	c := &GpioConfig{}
	c.Timestamp = t.Timestamp
	c.DeviceId = t.DeviceId
	c.Mask = t.Mask
	c.State = t.State
	c.Config = t.Config
	return c
}

func (t *GpioConfig) CloneMsg() types.Message {
	return t.Clone()
}

func (t *GpioConfig) SetDefaults() {
	t.Timestamp = 0
	t.DeviceId = 0
	t.Mask = 0
	t.State = 0
	t.Config = 0
}

func (t *GpioConfig) GetTypeSupport() types.MessageTypeSupport {
	return GpioConfigTypeSupport
}

// GpioConfigPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type GpioConfigPublisher struct {
	*rclgo.Publisher
}

// NewGpioConfigPublisher creates and returns a new publisher for the
// GpioConfig
func NewGpioConfigPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*GpioConfigPublisher, error) {
	pub, err := node.NewPublisher(topic_name, GpioConfigTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &GpioConfigPublisher{pub}, nil
}

func (p *GpioConfigPublisher) Publish(msg *GpioConfig) error {
	return p.Publisher.Publish(msg)
}

// GpioConfigSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type GpioConfigSubscription struct {
	*rclgo.Subscription
}

// GpioConfigSubscriptionCallback type is used to provide a subscription
// handler function for a GpioConfigSubscription.
type GpioConfigSubscriptionCallback func(msg *GpioConfig, info *rclgo.MessageInfo, err error)

// NewGpioConfigSubscription creates and returns a new subscription for the
// GpioConfig
func NewGpioConfigSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback GpioConfigSubscriptionCallback) (*GpioConfigSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg GpioConfig
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, GpioConfigTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &GpioConfigSubscription{sub}, nil
}

func (s *GpioConfigSubscription) TakeMessage(out *GpioConfig) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneGpioConfigSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneGpioConfigSlice(dst, src []GpioConfig) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var GpioConfigTypeSupport types.MessageTypeSupport = _GpioConfigTypeSupport{}

type _GpioConfigTypeSupport struct{}

func (t _GpioConfigTypeSupport) New() types.Message {
	return NewGpioConfig()
}

func (t _GpioConfigTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__GpioConfig
	return (unsafe.Pointer)(C.px4_msgs__msg__GpioConfig__create())
}

func (t _GpioConfigTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__GpioConfig__destroy((*C.px4_msgs__msg__GpioConfig)(pointer_to_free))
}

func (t _GpioConfigTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*GpioConfig)
	mem := (*C.px4_msgs__msg__GpioConfig)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.mask = C.uint32_t(m.Mask)
	mem.state = C.uint32_t(m.State)
	mem.config = C.uint32_t(m.Config)
}

func (t _GpioConfigTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*GpioConfig)
	mem := (*C.px4_msgs__msg__GpioConfig)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.DeviceId = uint32(mem.device_id)
	m.Mask = uint32(mem.mask)
	m.State = uint32(mem.state)
	m.Config = uint32(mem.config)
}

func (t _GpioConfigTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__GpioConfig())
}

type CGpioConfig = C.px4_msgs__msg__GpioConfig
type CGpioConfig__Sequence = C.px4_msgs__msg__GpioConfig__Sequence

func GpioConfig__Sequence_to_Go(goSlice *[]GpioConfig, cSlice CGpioConfig__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]GpioConfig, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		GpioConfigTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func GpioConfig__Sequence_to_C(cSlice *CGpioConfig__Sequence, goSlice []GpioConfig) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__GpioConfig)(C.malloc(C.sizeof_struct_px4_msgs__msg__GpioConfig * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		GpioConfigTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func GpioConfig__Array_to_Go(goSlice []GpioConfig, cSlice []CGpioConfig) {
	for i := 0; i < len(cSlice); i++ {
		GpioConfigTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func GpioConfig__Array_to_C(cSlice []CGpioConfig, goSlice []GpioConfig) {
	for i := 0; i < len(goSlice); i++ {
		GpioConfigTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
