// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_baro.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorBaro", SensorBaroTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SensorBaro", SensorBaroTypeSupport)
}

const (
	SensorBaro_ORB_QUEUE_LENGTH uint8 = 4
)

type SensorBaro struct {
	Timestamp       uint64  `yaml:"timestamp"` // time since system start (microseconds)
	TimestampSample uint64  `yaml:"timestamp_sample"`
	DeviceId        uint32  `yaml:"device_id"`   // unique device ID for the sensor that does not change between power cycles
	Pressure        float32 `yaml:"pressure"`    // static pressure measurement in Pascals
	Temperature     float32 `yaml:"temperature"` // temperature in degrees Celsius
	ErrorCount      uint32  `yaml:"error_count"`
}

// NewSensorBaro creates a new SensorBaro with default values.
func NewSensorBaro() *SensorBaro {
	self := SensorBaro{}
	self.SetDefaults()
	return &self
}

func (t *SensorBaro) Clone() *SensorBaro {
	c := &SensorBaro{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.DeviceId = t.DeviceId
	c.Pressure = t.Pressure
	c.Temperature = t.Temperature
	c.ErrorCount = t.ErrorCount
	return c
}

func (t *SensorBaro) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorBaro) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.DeviceId = 0
	t.Pressure = 0
	t.Temperature = 0
	t.ErrorCount = 0
}

func (t *SensorBaro) GetTypeSupport() types.MessageTypeSupport {
	return SensorBaroTypeSupport
}

// SensorBaroPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorBaroPublisher struct {
	*rclgo.Publisher
}

// NewSensorBaroPublisher creates and returns a new publisher for the
// SensorBaro
func NewSensorBaroPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorBaroPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorBaroTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorBaroPublisher{pub}, nil
}

func (p *SensorBaroPublisher) Publish(msg *SensorBaro) error {
	return p.Publisher.Publish(msg)
}

// SensorBaroSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorBaroSubscription struct {
	*rclgo.Subscription
}

// SensorBaroSubscriptionCallback type is used to provide a subscription
// handler function for a SensorBaroSubscription.
type SensorBaroSubscriptionCallback func(msg *SensorBaro, info *rclgo.MessageInfo, err error)

// NewSensorBaroSubscription creates and returns a new subscription for the
// SensorBaro
func NewSensorBaroSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorBaroSubscriptionCallback) (*SensorBaroSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorBaro
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorBaroTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorBaroSubscription{sub}, nil
}

func (s *SensorBaroSubscription) TakeMessage(out *SensorBaro) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorBaroSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorBaroSlice(dst, src []SensorBaro) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorBaroTypeSupport types.MessageTypeSupport = _SensorBaroTypeSupport{}

type _SensorBaroTypeSupport struct{}

func (t _SensorBaroTypeSupport) New() types.Message {
	return NewSensorBaro()
}

func (t _SensorBaroTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorBaro
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorBaro__create())
}

func (t _SensorBaroTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorBaro__destroy((*C.px4_msgs__msg__SensorBaro)(pointer_to_free))
}

func (t _SensorBaroTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorBaro)
	mem := (*C.px4_msgs__msg__SensorBaro)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.device_id = C.uint32_t(m.DeviceId)
	mem.pressure = C.float(m.Pressure)
	mem.temperature = C.float(m.Temperature)
	mem.error_count = C.uint32_t(m.ErrorCount)
}

func (t _SensorBaroTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorBaro)
	mem := (*C.px4_msgs__msg__SensorBaro)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.DeviceId = uint32(mem.device_id)
	m.Pressure = float32(mem.pressure)
	m.Temperature = float32(mem.temperature)
	m.ErrorCount = uint32(mem.error_count)
}

func (t _SensorBaroTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorBaro())
}

type CSensorBaro = C.px4_msgs__msg__SensorBaro
type CSensorBaro__Sequence = C.px4_msgs__msg__SensorBaro__Sequence

func SensorBaro__Sequence_to_Go(goSlice *[]SensorBaro, cSlice CSensorBaro__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorBaro, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorBaroTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorBaro__Sequence_to_C(cSlice *CSensorBaro__Sequence, goSlice []SensorBaro) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorBaro)(C.malloc(C.sizeof_struct_px4_msgs__msg__SensorBaro * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorBaroTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorBaro__Array_to_Go(goSlice []SensorBaro, cSlice []CSensorBaro) {
	for i := 0; i < len(cSlice); i++ {
		SensorBaroTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorBaro__Array_to_C(cSlice []CSensorBaro, goSlice []SensorBaro) {
	for i := 0; i < len(goSlice); i++ {
		SensorBaroTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
