// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_optical_flow.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorOpticalFlow", SensorOpticalFlowTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SensorOpticalFlow", SensorOpticalFlowTypeSupport)
}

const (
	SensorOpticalFlow_MODE_UNKNOWN        uint8 = 0
	SensorOpticalFlow_MODE_BRIGHT         uint8 = 1
	SensorOpticalFlow_MODE_LOWLIGHT       uint8 = 2
	SensorOpticalFlow_MODE_SUPER_LOWLIGHT uint8 = 3
)

type SensorOpticalFlow struct {
	Timestamp             uint64     `yaml:"timestamp"` // time since system start (microseconds)
	TimestampSample       uint64     `yaml:"timestamp_sample"`
	DeviceId              uint32     `yaml:"device_id"`   // unique device ID for the sensor that does not change between power cycles
	PixelFlow             [2]float32 `yaml:"pixel_flow"`  // (radians) optical flow in radians where a positive value is produced by a RH rotation about the body axis
	DeltaAngle            [3]float32 `yaml:"delta_angle"` // (radians) accumulated gyro radians where a positive value is produced by a RH rotation about the body axis. Set to NaN if flow sensor does not have 3-axis gyro data.
	DeltaAngleAvailable   bool       `yaml:"delta_angle_available"`
	DistanceM             float32    `yaml:"distance_m"` // (meters) Distance to the center of the flow field
	DistanceAvailable     bool       `yaml:"distance_available"`
	IntegrationTimespanUs uint32     `yaml:"integration_timespan_us"` // (microseconds) accumulation timespan in microseconds
	Quality               uint8      `yaml:"quality"`                 // quality, 0: bad quality, 255: maximum quality
	ErrorCount            uint32     `yaml:"error_count"`
	MaxFlowRate           float32    `yaml:"max_flow_rate"`       // (radians/s) Magnitude of maximum angular which the optical flow sensor can measure reliably
	MinGroundDistance     float32    `yaml:"min_ground_distance"` // (meters) Minimum distance from ground at which the optical flow sensor operates reliably
	MaxGroundDistance     float32    `yaml:"max_ground_distance"` // (meters) Maximum distance from ground at which the optical flow sensor operates reliably
	Mode                  uint8      `yaml:"mode"`
}

// NewSensorOpticalFlow creates a new SensorOpticalFlow with default values.
func NewSensorOpticalFlow() *SensorOpticalFlow {
	self := SensorOpticalFlow{}
	self.SetDefaults()
	return &self
}

func (t *SensorOpticalFlow) Clone() *SensorOpticalFlow {
	c := &SensorOpticalFlow{}
	c.Timestamp = t.Timestamp
	c.TimestampSample = t.TimestampSample
	c.DeviceId = t.DeviceId
	c.PixelFlow = t.PixelFlow
	c.DeltaAngle = t.DeltaAngle
	c.DeltaAngleAvailable = t.DeltaAngleAvailable
	c.DistanceM = t.DistanceM
	c.DistanceAvailable = t.DistanceAvailable
	c.IntegrationTimespanUs = t.IntegrationTimespanUs
	c.Quality = t.Quality
	c.ErrorCount = t.ErrorCount
	c.MaxFlowRate = t.MaxFlowRate
	c.MinGroundDistance = t.MinGroundDistance
	c.MaxGroundDistance = t.MaxGroundDistance
	c.Mode = t.Mode
	return c
}

func (t *SensorOpticalFlow) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorOpticalFlow) SetDefaults() {
	t.Timestamp = 0
	t.TimestampSample = 0
	t.DeviceId = 0
	t.PixelFlow = [2]float32{}
	t.DeltaAngle = [3]float32{}
	t.DeltaAngleAvailable = false
	t.DistanceM = 0
	t.DistanceAvailable = false
	t.IntegrationTimespanUs = 0
	t.Quality = 0
	t.ErrorCount = 0
	t.MaxFlowRate = 0
	t.MinGroundDistance = 0
	t.MaxGroundDistance = 0
	t.Mode = 0
}

func (t *SensorOpticalFlow) GetTypeSupport() types.MessageTypeSupport {
	return SensorOpticalFlowTypeSupport
}

// SensorOpticalFlowPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorOpticalFlowPublisher struct {
	*rclgo.Publisher
}

// NewSensorOpticalFlowPublisher creates and returns a new publisher for the
// SensorOpticalFlow
func NewSensorOpticalFlowPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorOpticalFlowPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorOpticalFlowTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorOpticalFlowPublisher{pub}, nil
}

func (p *SensorOpticalFlowPublisher) Publish(msg *SensorOpticalFlow) error {
	return p.Publisher.Publish(msg)
}

// SensorOpticalFlowSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorOpticalFlowSubscription struct {
	*rclgo.Subscription
}

// SensorOpticalFlowSubscriptionCallback type is used to provide a subscription
// handler function for a SensorOpticalFlowSubscription.
type SensorOpticalFlowSubscriptionCallback func(msg *SensorOpticalFlow, info *rclgo.MessageInfo, err error)

// NewSensorOpticalFlowSubscription creates and returns a new subscription for the
// SensorOpticalFlow
func NewSensorOpticalFlowSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorOpticalFlowSubscriptionCallback) (*SensorOpticalFlowSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorOpticalFlow
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorOpticalFlowTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorOpticalFlowSubscription{sub}, nil
}

func (s *SensorOpticalFlowSubscription) TakeMessage(out *SensorOpticalFlow) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorOpticalFlowSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorOpticalFlowSlice(dst, src []SensorOpticalFlow) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorOpticalFlowTypeSupport types.MessageTypeSupport = _SensorOpticalFlowTypeSupport{}

type _SensorOpticalFlowTypeSupport struct{}

func (t _SensorOpticalFlowTypeSupport) New() types.Message {
	return NewSensorOpticalFlow()
}

func (t _SensorOpticalFlowTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorOpticalFlow
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorOpticalFlow__create())
}

func (t _SensorOpticalFlowTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorOpticalFlow__destroy((*C.px4_msgs__msg__SensorOpticalFlow)(pointer_to_free))
}

func (t _SensorOpticalFlowTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorOpticalFlow)
	mem := (*C.px4_msgs__msg__SensorOpticalFlow)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.timestamp_sample = C.uint64_t(m.TimestampSample)
	mem.device_id = C.uint32_t(m.DeviceId)
	cSlice_pixel_flow := mem.pixel_flow[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_pixel_flow)), m.PixelFlow[:])
	cSlice_delta_angle := mem.delta_angle[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_angle)), m.DeltaAngle[:])
	mem.delta_angle_available = C.bool(m.DeltaAngleAvailable)
	mem.distance_m = C.float(m.DistanceM)
	mem.distance_available = C.bool(m.DistanceAvailable)
	mem.integration_timespan_us = C.uint32_t(m.IntegrationTimespanUs)
	mem.quality = C.uint8_t(m.Quality)
	mem.error_count = C.uint32_t(m.ErrorCount)
	mem.max_flow_rate = C.float(m.MaxFlowRate)
	mem.min_ground_distance = C.float(m.MinGroundDistance)
	mem.max_ground_distance = C.float(m.MaxGroundDistance)
	mem.mode = C.uint8_t(m.Mode)
}

func (t _SensorOpticalFlowTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorOpticalFlow)
	mem := (*C.px4_msgs__msg__SensorOpticalFlow)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TimestampSample = uint64(mem.timestamp_sample)
	m.DeviceId = uint32(mem.device_id)
	cSlice_pixel_flow := mem.pixel_flow[:]
	primitives.Float32__Array_to_Go(m.PixelFlow[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_pixel_flow)))
	cSlice_delta_angle := mem.delta_angle[:]
	primitives.Float32__Array_to_Go(m.DeltaAngle[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_delta_angle)))
	m.DeltaAngleAvailable = bool(mem.delta_angle_available)
	m.DistanceM = float32(mem.distance_m)
	m.DistanceAvailable = bool(mem.distance_available)
	m.IntegrationTimespanUs = uint32(mem.integration_timespan_us)
	m.Quality = uint8(mem.quality)
	m.ErrorCount = uint32(mem.error_count)
	m.MaxFlowRate = float32(mem.max_flow_rate)
	m.MinGroundDistance = float32(mem.min_ground_distance)
	m.MaxGroundDistance = float32(mem.max_ground_distance)
	m.Mode = uint8(mem.mode)
}

func (t _SensorOpticalFlowTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorOpticalFlow())
}

type CSensorOpticalFlow = C.px4_msgs__msg__SensorOpticalFlow
type CSensorOpticalFlow__Sequence = C.px4_msgs__msg__SensorOpticalFlow__Sequence

func SensorOpticalFlow__Sequence_to_Go(goSlice *[]SensorOpticalFlow, cSlice CSensorOpticalFlow__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorOpticalFlow, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorOpticalFlowTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorOpticalFlow__Sequence_to_C(cSlice *CSensorOpticalFlow__Sequence, goSlice []SensorOpticalFlow) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorOpticalFlow)(C.malloc(C.sizeof_struct_px4_msgs__msg__SensorOpticalFlow * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorOpticalFlowTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorOpticalFlow__Array_to_Go(goSlice []SensorOpticalFlow, cSlice []CSensorOpticalFlow) {
	for i := 0; i < len(cSlice); i++ {
		SensorOpticalFlowTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorOpticalFlow__Array_to_C(cSlice []CSensorOpticalFlow, goSlice []SensorOpticalFlow) {
	for i := 0; i < len(goSlice); i++ {
		SensorOpticalFlowTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
