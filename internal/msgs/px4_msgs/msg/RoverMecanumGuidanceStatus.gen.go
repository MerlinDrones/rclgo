// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rover_mecanum_guidance_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RoverMecanumGuidanceStatus", RoverMecanumGuidanceStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RoverMecanumGuidanceStatus", RoverMecanumGuidanceStatusTypeSupport)
}

type RoverMecanumGuidanceStatus struct {
	Timestamp         uint64  `yaml:"timestamp"`          // time since system start (microseconds)
	LookaheadDistance float32 `yaml:"lookahead_distance"` // [m] Lookahead distance of pure the pursuit controller
	HeadingError      float32 `yaml:"heading_error"`      // [rad] Heading error of the pure pursuit controller
	DesiredSpeed      float32 `yaml:"desired_speed"`      // [m/s] Desired velocity magnitude (speed)
}

// NewRoverMecanumGuidanceStatus creates a new RoverMecanumGuidanceStatus with default values.
func NewRoverMecanumGuidanceStatus() *RoverMecanumGuidanceStatus {
	self := RoverMecanumGuidanceStatus{}
	self.SetDefaults()
	return &self
}

func (t *RoverMecanumGuidanceStatus) Clone() *RoverMecanumGuidanceStatus {
	c := &RoverMecanumGuidanceStatus{}
	c.Timestamp = t.Timestamp
	c.LookaheadDistance = t.LookaheadDistance
	c.HeadingError = t.HeadingError
	c.DesiredSpeed = t.DesiredSpeed
	return c
}

func (t *RoverMecanumGuidanceStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RoverMecanumGuidanceStatus) SetDefaults() {
	t.Timestamp = 0
	t.LookaheadDistance = 0
	t.HeadingError = 0
	t.DesiredSpeed = 0
}

func (t *RoverMecanumGuidanceStatus) GetTypeSupport() types.MessageTypeSupport {
	return RoverMecanumGuidanceStatusTypeSupport
}

// RoverMecanumGuidanceStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RoverMecanumGuidanceStatusPublisher struct {
	*rclgo.Publisher
}

// NewRoverMecanumGuidanceStatusPublisher creates and returns a new publisher for the
// RoverMecanumGuidanceStatus
func NewRoverMecanumGuidanceStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RoverMecanumGuidanceStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RoverMecanumGuidanceStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RoverMecanumGuidanceStatusPublisher{pub}, nil
}

func (p *RoverMecanumGuidanceStatusPublisher) Publish(msg *RoverMecanumGuidanceStatus) error {
	return p.Publisher.Publish(msg)
}

// RoverMecanumGuidanceStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RoverMecanumGuidanceStatusSubscription struct {
	*rclgo.Subscription
}

// RoverMecanumGuidanceStatusSubscriptionCallback type is used to provide a subscription
// handler function for a RoverMecanumGuidanceStatusSubscription.
type RoverMecanumGuidanceStatusSubscriptionCallback func(msg *RoverMecanumGuidanceStatus, info *rclgo.MessageInfo, err error)

// NewRoverMecanumGuidanceStatusSubscription creates and returns a new subscription for the
// RoverMecanumGuidanceStatus
func NewRoverMecanumGuidanceStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RoverMecanumGuidanceStatusSubscriptionCallback) (*RoverMecanumGuidanceStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RoverMecanumGuidanceStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RoverMecanumGuidanceStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RoverMecanumGuidanceStatusSubscription{sub}, nil
}

func (s *RoverMecanumGuidanceStatusSubscription) TakeMessage(out *RoverMecanumGuidanceStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRoverMecanumGuidanceStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRoverMecanumGuidanceStatusSlice(dst, src []RoverMecanumGuidanceStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RoverMecanumGuidanceStatusTypeSupport types.MessageTypeSupport = _RoverMecanumGuidanceStatusTypeSupport{}

type _RoverMecanumGuidanceStatusTypeSupport struct{}

func (t _RoverMecanumGuidanceStatusTypeSupport) New() types.Message {
	return NewRoverMecanumGuidanceStatus()
}

func (t _RoverMecanumGuidanceStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RoverMecanumGuidanceStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__RoverMecanumGuidanceStatus__create())
}

func (t _RoverMecanumGuidanceStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RoverMecanumGuidanceStatus__destroy((*C.px4_msgs__msg__RoverMecanumGuidanceStatus)(pointer_to_free))
}

func (t _RoverMecanumGuidanceStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RoverMecanumGuidanceStatus)
	mem := (*C.px4_msgs__msg__RoverMecanumGuidanceStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.lookahead_distance = C.float(m.LookaheadDistance)
	mem.heading_error = C.float(m.HeadingError)
	mem.desired_speed = C.float(m.DesiredSpeed)
}

func (t _RoverMecanumGuidanceStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RoverMecanumGuidanceStatus)
	mem := (*C.px4_msgs__msg__RoverMecanumGuidanceStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.LookaheadDistance = float32(mem.lookahead_distance)
	m.HeadingError = float32(mem.heading_error)
	m.DesiredSpeed = float32(mem.desired_speed)
}

func (t _RoverMecanumGuidanceStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RoverMecanumGuidanceStatus())
}

type CRoverMecanumGuidanceStatus = C.px4_msgs__msg__RoverMecanumGuidanceStatus
type CRoverMecanumGuidanceStatus__Sequence = C.px4_msgs__msg__RoverMecanumGuidanceStatus__Sequence

func RoverMecanumGuidanceStatus__Sequence_to_Go(goSlice *[]RoverMecanumGuidanceStatus, cSlice CRoverMecanumGuidanceStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RoverMecanumGuidanceStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RoverMecanumGuidanceStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RoverMecanumGuidanceStatus__Sequence_to_C(cSlice *CRoverMecanumGuidanceStatus__Sequence, goSlice []RoverMecanumGuidanceStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RoverMecanumGuidanceStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__RoverMecanumGuidanceStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RoverMecanumGuidanceStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RoverMecanumGuidanceStatus__Array_to_Go(goSlice []RoverMecanumGuidanceStatus, cSlice []CRoverMecanumGuidanceStatus) {
	for i := 0; i < len(cSlice); i++ {
		RoverMecanumGuidanceStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RoverMecanumGuidanceStatus__Array_to_C(cSlice []CRoverMecanumGuidanceStatus, goSlice []RoverMecanumGuidanceStatus) {
	for i := 0; i < len(goSlice); i++ {
		RoverMecanumGuidanceStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
