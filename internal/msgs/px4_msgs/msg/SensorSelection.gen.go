// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/sensor_selection.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/SensorSelection", SensorSelectionTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/SensorSelection", SensorSelectionTypeSupport)
}

type SensorSelection struct {
	Timestamp     uint64 `yaml:"timestamp"`       // time since system start (microseconds). Sensor ID's for the voted sensors output on the sensor_combined topic.Will be updated on startup of the sensor module and when sensor selection changes
	AccelDeviceId uint32 `yaml:"accel_device_id"` // unique device ID for the selected accelerometers
	GyroDeviceId  uint32 `yaml:"gyro_device_id"`  // unique device ID for the selected rate gyros
}

// NewSensorSelection creates a new SensorSelection with default values.
func NewSensorSelection() *SensorSelection {
	self := SensorSelection{}
	self.SetDefaults()
	return &self
}

func (t *SensorSelection) Clone() *SensorSelection {
	c := &SensorSelection{}
	c.Timestamp = t.Timestamp
	c.AccelDeviceId = t.AccelDeviceId
	c.GyroDeviceId = t.GyroDeviceId
	return c
}

func (t *SensorSelection) CloneMsg() types.Message {
	return t.Clone()
}

func (t *SensorSelection) SetDefaults() {
	t.Timestamp = 0
	t.AccelDeviceId = 0
	t.GyroDeviceId = 0
}

func (t *SensorSelection) GetTypeSupport() types.MessageTypeSupport {
	return SensorSelectionTypeSupport
}

// SensorSelectionPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type SensorSelectionPublisher struct {
	*rclgo.Publisher
}

// NewSensorSelectionPublisher creates and returns a new publisher for the
// SensorSelection
func NewSensorSelectionPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*SensorSelectionPublisher, error) {
	pub, err := node.NewPublisher(topic_name, SensorSelectionTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SensorSelectionPublisher{pub}, nil
}

func (p *SensorSelectionPublisher) Publish(msg *SensorSelection) error {
	return p.Publisher.Publish(msg)
}

// SensorSelectionSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type SensorSelectionSubscription struct {
	*rclgo.Subscription
}

// SensorSelectionSubscriptionCallback type is used to provide a subscription
// handler function for a SensorSelectionSubscription.
type SensorSelectionSubscriptionCallback func(msg *SensorSelection, info *rclgo.MessageInfo, err error)

// NewSensorSelectionSubscription creates and returns a new subscription for the
// SensorSelection
func NewSensorSelectionSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback SensorSelectionSubscriptionCallback) (*SensorSelectionSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg SensorSelection
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, SensorSelectionTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &SensorSelectionSubscription{sub}, nil
}

func (s *SensorSelectionSubscription) TakeMessage(out *SensorSelection) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneSensorSelectionSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneSensorSelectionSlice(dst, src []SensorSelection) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var SensorSelectionTypeSupport types.MessageTypeSupport = _SensorSelectionTypeSupport{}

type _SensorSelectionTypeSupport struct{}

func (t _SensorSelectionTypeSupport) New() types.Message {
	return NewSensorSelection()
}

func (t _SensorSelectionTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__SensorSelection
	return (unsafe.Pointer)(C.px4_msgs__msg__SensorSelection__create())
}

func (t _SensorSelectionTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__SensorSelection__destroy((*C.px4_msgs__msg__SensorSelection)(pointer_to_free))
}

func (t _SensorSelectionTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*SensorSelection)
	mem := (*C.px4_msgs__msg__SensorSelection)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.accel_device_id = C.uint32_t(m.AccelDeviceId)
	mem.gyro_device_id = C.uint32_t(m.GyroDeviceId)
}

func (t _SensorSelectionTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*SensorSelection)
	mem := (*C.px4_msgs__msg__SensorSelection)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.AccelDeviceId = uint32(mem.accel_device_id)
	m.GyroDeviceId = uint32(mem.gyro_device_id)
}

func (t _SensorSelectionTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__SensorSelection())
}

type CSensorSelection = C.px4_msgs__msg__SensorSelection
type CSensorSelection__Sequence = C.px4_msgs__msg__SensorSelection__Sequence

func SensorSelection__Sequence_to_Go(goSlice *[]SensorSelection, cSlice CSensorSelection__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]SensorSelection, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		SensorSelectionTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func SensorSelection__Sequence_to_C(cSlice *CSensorSelection__Sequence, goSlice []SensorSelection) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__SensorSelection)(C.malloc(C.sizeof_struct_px4_msgs__msg__SensorSelection * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		SensorSelectionTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func SensorSelection__Array_to_Go(goSlice []SensorSelection, cSlice []CSensorSelection) {
	for i := 0; i < len(cSlice); i++ {
		SensorSelectionTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func SensorSelection__Array_to_C(cSlice []CSensorSelection, goSlice []SensorSelection) {
	for i := 0; i < len(goSlice); i++ {
		SensorSelectionTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
