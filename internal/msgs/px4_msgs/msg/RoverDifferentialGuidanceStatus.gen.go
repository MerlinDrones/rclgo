// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/rover_differential_guidance_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/RoverDifferentialGuidanceStatus", RoverDifferentialGuidanceStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/RoverDifferentialGuidanceStatus", RoverDifferentialGuidanceStatusTypeSupport)
}

type RoverDifferentialGuidanceStatus struct {
	Timestamp         uint64  `yaml:"timestamp"`          // time since system start (microseconds)
	LookaheadDistance float32 `yaml:"lookahead_distance"` // [m] Lookahead distance of pure the pursuit controller
	HeadingErrorDeg   float32 `yaml:"heading_error_deg"`  // [deg] Heading error of the pure pursuit controller
	StateMachine      uint8   `yaml:"state_machine"`      // Driving state of the rover [0: SPOT_TURNING, 1: DRIVING, 2: GOAL_REACHED]
}

// NewRoverDifferentialGuidanceStatus creates a new RoverDifferentialGuidanceStatus with default values.
func NewRoverDifferentialGuidanceStatus() *RoverDifferentialGuidanceStatus {
	self := RoverDifferentialGuidanceStatus{}
	self.SetDefaults()
	return &self
}

func (t *RoverDifferentialGuidanceStatus) Clone() *RoverDifferentialGuidanceStatus {
	c := &RoverDifferentialGuidanceStatus{}
	c.Timestamp = t.Timestamp
	c.LookaheadDistance = t.LookaheadDistance
	c.HeadingErrorDeg = t.HeadingErrorDeg
	c.StateMachine = t.StateMachine
	return c
}

func (t *RoverDifferentialGuidanceStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *RoverDifferentialGuidanceStatus) SetDefaults() {
	t.Timestamp = 0
	t.LookaheadDistance = 0
	t.HeadingErrorDeg = 0
	t.StateMachine = 0
}

func (t *RoverDifferentialGuidanceStatus) GetTypeSupport() types.MessageTypeSupport {
	return RoverDifferentialGuidanceStatusTypeSupport
}

// RoverDifferentialGuidanceStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type RoverDifferentialGuidanceStatusPublisher struct {
	*rclgo.Publisher
}

// NewRoverDifferentialGuidanceStatusPublisher creates and returns a new publisher for the
// RoverDifferentialGuidanceStatus
func NewRoverDifferentialGuidanceStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*RoverDifferentialGuidanceStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, RoverDifferentialGuidanceStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &RoverDifferentialGuidanceStatusPublisher{pub}, nil
}

func (p *RoverDifferentialGuidanceStatusPublisher) Publish(msg *RoverDifferentialGuidanceStatus) error {
	return p.Publisher.Publish(msg)
}

// RoverDifferentialGuidanceStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type RoverDifferentialGuidanceStatusSubscription struct {
	*rclgo.Subscription
}

// RoverDifferentialGuidanceStatusSubscriptionCallback type is used to provide a subscription
// handler function for a RoverDifferentialGuidanceStatusSubscription.
type RoverDifferentialGuidanceStatusSubscriptionCallback func(msg *RoverDifferentialGuidanceStatus, info *rclgo.MessageInfo, err error)

// NewRoverDifferentialGuidanceStatusSubscription creates and returns a new subscription for the
// RoverDifferentialGuidanceStatus
func NewRoverDifferentialGuidanceStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback RoverDifferentialGuidanceStatusSubscriptionCallback) (*RoverDifferentialGuidanceStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg RoverDifferentialGuidanceStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, RoverDifferentialGuidanceStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &RoverDifferentialGuidanceStatusSubscription{sub}, nil
}

func (s *RoverDifferentialGuidanceStatusSubscription) TakeMessage(out *RoverDifferentialGuidanceStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneRoverDifferentialGuidanceStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneRoverDifferentialGuidanceStatusSlice(dst, src []RoverDifferentialGuidanceStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var RoverDifferentialGuidanceStatusTypeSupport types.MessageTypeSupport = _RoverDifferentialGuidanceStatusTypeSupport{}

type _RoverDifferentialGuidanceStatusTypeSupport struct{}

func (t _RoverDifferentialGuidanceStatusTypeSupport) New() types.Message {
	return NewRoverDifferentialGuidanceStatus()
}

func (t _RoverDifferentialGuidanceStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__RoverDifferentialGuidanceStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__RoverDifferentialGuidanceStatus__create())
}

func (t _RoverDifferentialGuidanceStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__RoverDifferentialGuidanceStatus__destroy((*C.px4_msgs__msg__RoverDifferentialGuidanceStatus)(pointer_to_free))
}

func (t _RoverDifferentialGuidanceStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*RoverDifferentialGuidanceStatus)
	mem := (*C.px4_msgs__msg__RoverDifferentialGuidanceStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.lookahead_distance = C.float(m.LookaheadDistance)
	mem.heading_error_deg = C.float(m.HeadingErrorDeg)
	mem.state_machine = C.uint8_t(m.StateMachine)
}

func (t _RoverDifferentialGuidanceStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*RoverDifferentialGuidanceStatus)
	mem := (*C.px4_msgs__msg__RoverDifferentialGuidanceStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.LookaheadDistance = float32(mem.lookahead_distance)
	m.HeadingErrorDeg = float32(mem.heading_error_deg)
	m.StateMachine = uint8(mem.state_machine)
}

func (t _RoverDifferentialGuidanceStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__RoverDifferentialGuidanceStatus())
}

type CRoverDifferentialGuidanceStatus = C.px4_msgs__msg__RoverDifferentialGuidanceStatus
type CRoverDifferentialGuidanceStatus__Sequence = C.px4_msgs__msg__RoverDifferentialGuidanceStatus__Sequence

func RoverDifferentialGuidanceStatus__Sequence_to_Go(goSlice *[]RoverDifferentialGuidanceStatus, cSlice CRoverDifferentialGuidanceStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]RoverDifferentialGuidanceStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		RoverDifferentialGuidanceStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func RoverDifferentialGuidanceStatus__Sequence_to_C(cSlice *CRoverDifferentialGuidanceStatus__Sequence, goSlice []RoverDifferentialGuidanceStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__RoverDifferentialGuidanceStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__RoverDifferentialGuidanceStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		RoverDifferentialGuidanceStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func RoverDifferentialGuidanceStatus__Array_to_Go(goSlice []RoverDifferentialGuidanceStatus, cSlice []CRoverDifferentialGuidanceStatus) {
	for i := 0; i < len(cSlice); i++ {
		RoverDifferentialGuidanceStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func RoverDifferentialGuidanceStatus__Array_to_C(cSlice []CRoverDifferentialGuidanceStatus, goSlice []RoverDifferentialGuidanceStatus) {
	for i := 0; i < len(goSlice); i++ {
		RoverDifferentialGuidanceStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
