// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/uavcan_parameter_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/UavcanParameterValue", UavcanParameterValueTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/UavcanParameterValue", UavcanParameterValueTypeSupport)
}

type UavcanParameterValue struct {
	Timestamp  uint64   `yaml:"timestamp"`   // time since system start (microseconds). UAVCAN-MAVLink parameter bridge response type
	NodeId     uint8    `yaml:"node_id"`     // UAVCAN node ID mapped from MAVLink component ID
	ParamId    [17]byte `yaml:"param_id"`    // MAVLink/UAVCAN parameter name
	ParamIndex int16    `yaml:"param_index"` // parameter index, if known
	ParamCount uint16   `yaml:"param_count"` // number of parameters exposed by the node
	ParamType  uint8    `yaml:"param_type"`  // MAVLink parameter type
	IntValue   int64    `yaml:"int_value"`   // current value if param_type is int-like
	RealValue  float32  `yaml:"real_value"`  // current value if param_type is float-like
}

// NewUavcanParameterValue creates a new UavcanParameterValue with default values.
func NewUavcanParameterValue() *UavcanParameterValue {
	self := UavcanParameterValue{}
	self.SetDefaults()
	return &self
}

func (t *UavcanParameterValue) Clone() *UavcanParameterValue {
	c := &UavcanParameterValue{}
	c.Timestamp = t.Timestamp
	c.NodeId = t.NodeId
	c.ParamId = t.ParamId
	c.ParamIndex = t.ParamIndex
	c.ParamCount = t.ParamCount
	c.ParamType = t.ParamType
	c.IntValue = t.IntValue
	c.RealValue = t.RealValue
	return c
}

func (t *UavcanParameterValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *UavcanParameterValue) SetDefaults() {
	t.Timestamp = 0
	t.NodeId = 0
	t.ParamId = [17]byte{}
	t.ParamIndex = 0
	t.ParamCount = 0
	t.ParamType = 0
	t.IntValue = 0
	t.RealValue = 0
}

func (t *UavcanParameterValue) GetTypeSupport() types.MessageTypeSupport {
	return UavcanParameterValueTypeSupport
}

// UavcanParameterValuePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type UavcanParameterValuePublisher struct {
	*rclgo.Publisher
}

// NewUavcanParameterValuePublisher creates and returns a new publisher for the
// UavcanParameterValue
func NewUavcanParameterValuePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*UavcanParameterValuePublisher, error) {
	pub, err := node.NewPublisher(topic_name, UavcanParameterValueTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UavcanParameterValuePublisher{pub}, nil
}

func (p *UavcanParameterValuePublisher) Publish(msg *UavcanParameterValue) error {
	return p.Publisher.Publish(msg)
}

// UavcanParameterValueSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type UavcanParameterValueSubscription struct {
	*rclgo.Subscription
}

// UavcanParameterValueSubscriptionCallback type is used to provide a subscription
// handler function for a UavcanParameterValueSubscription.
type UavcanParameterValueSubscriptionCallback func(msg *UavcanParameterValue, info *rclgo.MessageInfo, err error)

// NewUavcanParameterValueSubscription creates and returns a new subscription for the
// UavcanParameterValue
func NewUavcanParameterValueSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback UavcanParameterValueSubscriptionCallback) (*UavcanParameterValueSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg UavcanParameterValue
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, UavcanParameterValueTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &UavcanParameterValueSubscription{sub}, nil
}

func (s *UavcanParameterValueSubscription) TakeMessage(out *UavcanParameterValue) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneUavcanParameterValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUavcanParameterValueSlice(dst, src []UavcanParameterValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UavcanParameterValueTypeSupport types.MessageTypeSupport = _UavcanParameterValueTypeSupport{}

type _UavcanParameterValueTypeSupport struct{}

func (t _UavcanParameterValueTypeSupport) New() types.Message {
	return NewUavcanParameterValue()
}

func (t _UavcanParameterValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__UavcanParameterValue
	return (unsafe.Pointer)(C.px4_msgs__msg__UavcanParameterValue__create())
}

func (t _UavcanParameterValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__UavcanParameterValue__destroy((*C.px4_msgs__msg__UavcanParameterValue)(pointer_to_free))
}

func (t _UavcanParameterValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*UavcanParameterValue)
	mem := (*C.px4_msgs__msg__UavcanParameterValue)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.node_id = C.uint8_t(m.NodeId)
	cSlice_param_id := mem.param_id[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_param_id)), m.ParamId[:])
	mem.param_index = C.int16_t(m.ParamIndex)
	mem.param_count = C.uint16_t(m.ParamCount)
	mem.param_type = C.uint8_t(m.ParamType)
	mem.int_value = C.int64_t(m.IntValue)
	mem.real_value = C.float(m.RealValue)
}

func (t _UavcanParameterValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UavcanParameterValue)
	mem := (*C.px4_msgs__msg__UavcanParameterValue)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.NodeId = uint8(mem.node_id)
	cSlice_param_id := mem.param_id[:]
	primitives.Char__Array_to_Go(m.ParamId[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_param_id)))
	m.ParamIndex = int16(mem.param_index)
	m.ParamCount = uint16(mem.param_count)
	m.ParamType = uint8(mem.param_type)
	m.IntValue = int64(mem.int_value)
	m.RealValue = float32(mem.real_value)
}

func (t _UavcanParameterValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__UavcanParameterValue())
}

type CUavcanParameterValue = C.px4_msgs__msg__UavcanParameterValue
type CUavcanParameterValue__Sequence = C.px4_msgs__msg__UavcanParameterValue__Sequence

func UavcanParameterValue__Sequence_to_Go(goSlice *[]UavcanParameterValue, cSlice CUavcanParameterValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UavcanParameterValue, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		UavcanParameterValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func UavcanParameterValue__Sequence_to_C(cSlice *CUavcanParameterValue__Sequence, goSlice []UavcanParameterValue) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__UavcanParameterValue)(C.malloc(C.sizeof_struct_px4_msgs__msg__UavcanParameterValue * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		UavcanParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func UavcanParameterValue__Array_to_Go(goSlice []UavcanParameterValue, cSlice []CUavcanParameterValue) {
	for i := 0; i < len(cSlice); i++ {
		UavcanParameterValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func UavcanParameterValue__Array_to_C(cSlice []CUavcanParameterValue, goSlice []UavcanParameterValue) {
	for i := 0; i < len(goSlice); i++ {
		UavcanParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
