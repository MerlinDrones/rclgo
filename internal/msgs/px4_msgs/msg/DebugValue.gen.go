// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/debug_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/DebugValue", DebugValueTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/DebugValue", DebugValueTypeSupport)
}

type DebugValue struct {
	Timestamp uint64  `yaml:"timestamp"` // time since system start (microseconds)
	Ind       int8    `yaml:"ind"`       // index of debug variable
	Value     float32 `yaml:"value"`     // the value to send as debug output
}

// NewDebugValue creates a new DebugValue with default values.
func NewDebugValue() *DebugValue {
	self := DebugValue{}
	self.SetDefaults()
	return &self
}

func (t *DebugValue) Clone() *DebugValue {
	c := &DebugValue{}
	c.Timestamp = t.Timestamp
	c.Ind = t.Ind
	c.Value = t.Value
	return c
}

func (t *DebugValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DebugValue) SetDefaults() {
	t.Timestamp = 0
	t.Ind = 0
	t.Value = 0
}

func (t *DebugValue) GetTypeSupport() types.MessageTypeSupport {
	return DebugValueTypeSupport
}

// DebugValuePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DebugValuePublisher struct {
	*rclgo.Publisher
}

// NewDebugValuePublisher creates and returns a new publisher for the
// DebugValue
func NewDebugValuePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DebugValuePublisher, error) {
	pub, err := node.NewPublisher(topic_name, DebugValueTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DebugValuePublisher{pub}, nil
}

func (p *DebugValuePublisher) Publish(msg *DebugValue) error {
	return p.Publisher.Publish(msg)
}

// DebugValueSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DebugValueSubscription struct {
	*rclgo.Subscription
}

// DebugValueSubscriptionCallback type is used to provide a subscription
// handler function for a DebugValueSubscription.
type DebugValueSubscriptionCallback func(msg *DebugValue, info *rclgo.MessageInfo, err error)

// NewDebugValueSubscription creates and returns a new subscription for the
// DebugValue
func NewDebugValueSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DebugValueSubscriptionCallback) (*DebugValueSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DebugValue
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DebugValueTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DebugValueSubscription{sub}, nil
}

func (s *DebugValueSubscription) TakeMessage(out *DebugValue) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDebugValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDebugValueSlice(dst, src []DebugValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DebugValueTypeSupport types.MessageTypeSupport = _DebugValueTypeSupport{}

type _DebugValueTypeSupport struct{}

func (t _DebugValueTypeSupport) New() types.Message {
	return NewDebugValue()
}

func (t _DebugValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DebugValue
	return (unsafe.Pointer)(C.px4_msgs__msg__DebugValue__create())
}

func (t _DebugValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DebugValue__destroy((*C.px4_msgs__msg__DebugValue)(pointer_to_free))
}

func (t _DebugValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DebugValue)
	mem := (*C.px4_msgs__msg__DebugValue)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.ind = C.int8_t(m.Ind)
	mem.value = C.float(m.Value)
}

func (t _DebugValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DebugValue)
	mem := (*C.px4_msgs__msg__DebugValue)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Ind = int8(mem.ind)
	m.Value = float32(mem.value)
}

func (t _DebugValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DebugValue())
}

type CDebugValue = C.px4_msgs__msg__DebugValue
type CDebugValue__Sequence = C.px4_msgs__msg__DebugValue__Sequence

func DebugValue__Sequence_to_Go(goSlice *[]DebugValue, cSlice CDebugValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DebugValue, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DebugValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DebugValue__Sequence_to_C(cSlice *CDebugValue__Sequence, goSlice []DebugValue) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DebugValue)(C.malloc(C.sizeof_struct_px4_msgs__msg__DebugValue * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DebugValueTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DebugValue__Array_to_Go(goSlice []DebugValue, cSlice []CDebugValue) {
	for i := 0; i < len(cSlice); i++ {
		DebugValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DebugValue__Array_to_C(cSlice []CDebugValue, goSlice []DebugValue) {
	for i := 0; i < len(goSlice); i++ {
		DebugValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
