// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/unregister_ext_component.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/UnregisterExtComponent", UnregisterExtComponentTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/UnregisterExtComponent", UnregisterExtComponentTypeSupport)
}

type UnregisterExtComponent struct {
	Timestamp      uint64   `yaml:"timestamp"`        // time since system start (microseconds)
	Name           [25]byte `yaml:"name"`             // either the mode name, or component name
	ArmingCheckId  int8     `yaml:"arming_check_id"`  // arming check registration ID (-1 if not registered)
	ModeId         int8     `yaml:"mode_id"`          // assigned mode ID (-1 if not registered)
	ModeExecutorId int8     `yaml:"mode_executor_id"` // assigned mode executor ID (-1 if not registered)
}

// NewUnregisterExtComponent creates a new UnregisterExtComponent with default values.
func NewUnregisterExtComponent() *UnregisterExtComponent {
	self := UnregisterExtComponent{}
	self.SetDefaults()
	return &self
}

func (t *UnregisterExtComponent) Clone() *UnregisterExtComponent {
	c := &UnregisterExtComponent{}
	c.Timestamp = t.Timestamp
	c.Name = t.Name
	c.ArmingCheckId = t.ArmingCheckId
	c.ModeId = t.ModeId
	c.ModeExecutorId = t.ModeExecutorId
	return c
}

func (t *UnregisterExtComponent) CloneMsg() types.Message {
	return t.Clone()
}

func (t *UnregisterExtComponent) SetDefaults() {
	t.Timestamp = 0
	t.Name = [25]byte{}
	t.ArmingCheckId = 0
	t.ModeId = 0
	t.ModeExecutorId = 0
}

func (t *UnregisterExtComponent) GetTypeSupport() types.MessageTypeSupport {
	return UnregisterExtComponentTypeSupport
}

// UnregisterExtComponentPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type UnregisterExtComponentPublisher struct {
	*rclgo.Publisher
}

// NewUnregisterExtComponentPublisher creates and returns a new publisher for the
// UnregisterExtComponent
func NewUnregisterExtComponentPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*UnregisterExtComponentPublisher, error) {
	pub, err := node.NewPublisher(topic_name, UnregisterExtComponentTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &UnregisterExtComponentPublisher{pub}, nil
}

func (p *UnregisterExtComponentPublisher) Publish(msg *UnregisterExtComponent) error {
	return p.Publisher.Publish(msg)
}

// UnregisterExtComponentSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type UnregisterExtComponentSubscription struct {
	*rclgo.Subscription
}

// UnregisterExtComponentSubscriptionCallback type is used to provide a subscription
// handler function for a UnregisterExtComponentSubscription.
type UnregisterExtComponentSubscriptionCallback func(msg *UnregisterExtComponent, info *rclgo.MessageInfo, err error)

// NewUnregisterExtComponentSubscription creates and returns a new subscription for the
// UnregisterExtComponent
func NewUnregisterExtComponentSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback UnregisterExtComponentSubscriptionCallback) (*UnregisterExtComponentSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg UnregisterExtComponent
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, UnregisterExtComponentTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &UnregisterExtComponentSubscription{sub}, nil
}

func (s *UnregisterExtComponentSubscription) TakeMessage(out *UnregisterExtComponent) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneUnregisterExtComponentSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneUnregisterExtComponentSlice(dst, src []UnregisterExtComponent) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var UnregisterExtComponentTypeSupport types.MessageTypeSupport = _UnregisterExtComponentTypeSupport{}

type _UnregisterExtComponentTypeSupport struct{}

func (t _UnregisterExtComponentTypeSupport) New() types.Message {
	return NewUnregisterExtComponent()
}

func (t _UnregisterExtComponentTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__UnregisterExtComponent
	return (unsafe.Pointer)(C.px4_msgs__msg__UnregisterExtComponent__create())
}

func (t _UnregisterExtComponentTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__UnregisterExtComponent__destroy((*C.px4_msgs__msg__UnregisterExtComponent)(pointer_to_free))
}

func (t _UnregisterExtComponentTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*UnregisterExtComponent)
	mem := (*C.px4_msgs__msg__UnregisterExtComponent)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)), m.Name[:])
	mem.arming_check_id = C.int8_t(m.ArmingCheckId)
	mem.mode_id = C.int8_t(m.ModeId)
	mem.mode_executor_id = C.int8_t(m.ModeExecutorId)
}

func (t _UnregisterExtComponentTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*UnregisterExtComponent)
	mem := (*C.px4_msgs__msg__UnregisterExtComponent)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_Go(m.Name[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)))
	m.ArmingCheckId = int8(mem.arming_check_id)
	m.ModeId = int8(mem.mode_id)
	m.ModeExecutorId = int8(mem.mode_executor_id)
}

func (t _UnregisterExtComponentTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__UnregisterExtComponent())
}

type CUnregisterExtComponent = C.px4_msgs__msg__UnregisterExtComponent
type CUnregisterExtComponent__Sequence = C.px4_msgs__msg__UnregisterExtComponent__Sequence

func UnregisterExtComponent__Sequence_to_Go(goSlice *[]UnregisterExtComponent, cSlice CUnregisterExtComponent__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]UnregisterExtComponent, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		UnregisterExtComponentTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func UnregisterExtComponent__Sequence_to_C(cSlice *CUnregisterExtComponent__Sequence, goSlice []UnregisterExtComponent) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__UnregisterExtComponent)(C.malloc(C.sizeof_struct_px4_msgs__msg__UnregisterExtComponent * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		UnregisterExtComponentTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func UnregisterExtComponent__Array_to_Go(goSlice []UnregisterExtComponent, cSlice []CUnregisterExtComponent) {
	for i := 0; i < len(cSlice); i++ {
		UnregisterExtComponentTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func UnregisterExtComponent__Array_to_C(cSlice []CUnregisterExtComponent, goSlice []UnregisterExtComponent) {
	for i := 0; i < len(goSlice); i++ {
		UnregisterExtComponentTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
