// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/debug_array.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/DebugArray", DebugArrayTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/DebugArray", DebugArrayTypeSupport)
}

const (
	DebugArray_ARRAY_SIZE uint8 = 58
)

type DebugArray struct {
	Timestamp uint64      `yaml:"timestamp"` // time since system start (microseconds)
	Id        uint16      `yaml:"id"`        // unique ID of debug array, used to discriminate between arrays
	Name      [10]byte    `yaml:"name"`      // name of the debug array (max. 10 characters)
	Data      [58]float32 `yaml:"data"`      // data
}

// NewDebugArray creates a new DebugArray with default values.
func NewDebugArray() *DebugArray {
	self := DebugArray{}
	self.SetDefaults()
	return &self
}

func (t *DebugArray) Clone() *DebugArray {
	c := &DebugArray{}
	c.Timestamp = t.Timestamp
	c.Id = t.Id
	c.Name = t.Name
	c.Data = t.Data
	return c
}

func (t *DebugArray) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DebugArray) SetDefaults() {
	t.Timestamp = 0
	t.Id = 0
	t.Name = [10]byte{}
	t.Data = [58]float32{}
}

func (t *DebugArray) GetTypeSupport() types.MessageTypeSupport {
	return DebugArrayTypeSupport
}

// DebugArrayPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DebugArrayPublisher struct {
	*rclgo.Publisher
}

// NewDebugArrayPublisher creates and returns a new publisher for the
// DebugArray
func NewDebugArrayPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DebugArrayPublisher, error) {
	pub, err := node.NewPublisher(topic_name, DebugArrayTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DebugArrayPublisher{pub}, nil
}

func (p *DebugArrayPublisher) Publish(msg *DebugArray) error {
	return p.Publisher.Publish(msg)
}

// DebugArraySubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DebugArraySubscription struct {
	*rclgo.Subscription
}

// DebugArraySubscriptionCallback type is used to provide a subscription
// handler function for a DebugArraySubscription.
type DebugArraySubscriptionCallback func(msg *DebugArray, info *rclgo.MessageInfo, err error)

// NewDebugArraySubscription creates and returns a new subscription for the
// DebugArray
func NewDebugArraySubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DebugArraySubscriptionCallback) (*DebugArraySubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DebugArray
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DebugArrayTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DebugArraySubscription{sub}, nil
}

func (s *DebugArraySubscription) TakeMessage(out *DebugArray) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDebugArraySlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDebugArraySlice(dst, src []DebugArray) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DebugArrayTypeSupport types.MessageTypeSupport = _DebugArrayTypeSupport{}

type _DebugArrayTypeSupport struct{}

func (t _DebugArrayTypeSupport) New() types.Message {
	return NewDebugArray()
}

func (t _DebugArrayTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__DebugArray
	return (unsafe.Pointer)(C.px4_msgs__msg__DebugArray__create())
}

func (t _DebugArrayTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__DebugArray__destroy((*C.px4_msgs__msg__DebugArray)(pointer_to_free))
}

func (t _DebugArrayTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DebugArray)
	mem := (*C.px4_msgs__msg__DebugArray)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.id = C.uint16_t(m.Id)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_C(*(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)), m.Name[:])
	cSlice_data := mem.data[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_data)), m.Data[:])
}

func (t _DebugArrayTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DebugArray)
	mem := (*C.px4_msgs__msg__DebugArray)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Id = uint16(mem.id)
	cSlice_name := mem.name[:]
	primitives.Char__Array_to_Go(m.Name[:], *(*[]primitives.CChar)(unsafe.Pointer(&cSlice_name)))
	cSlice_data := mem.data[:]
	primitives.Float32__Array_to_Go(m.Data[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_data)))
}

func (t _DebugArrayTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__DebugArray())
}

type CDebugArray = C.px4_msgs__msg__DebugArray
type CDebugArray__Sequence = C.px4_msgs__msg__DebugArray__Sequence

func DebugArray__Sequence_to_Go(goSlice *[]DebugArray, cSlice CDebugArray__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DebugArray, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DebugArrayTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DebugArray__Sequence_to_C(cSlice *CDebugArray__Sequence, goSlice []DebugArray) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__DebugArray)(C.malloc(C.sizeof_struct_px4_msgs__msg__DebugArray * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DebugArrayTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DebugArray__Array_to_Go(goSlice []DebugArray, cSlice []CDebugArray) {
	for i := 0; i < len(cSlice); i++ {
		DebugArrayTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DebugArray__Array_to_C(cSlice []CDebugArray, goSlice []DebugArray) {
	for i := 0; i < len(goSlice); i++ {
		DebugArrayTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
