// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/health_report.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/HealthReport", HealthReportTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/HealthReport", HealthReportTypeSupport)
}

type HealthReport struct {
	Timestamp               uint64 `yaml:"timestamp"`               // time since system start (microseconds)
	CanArmModeFlags         uint64 `yaml:"can_arm_mode_flags"`      // bitfield for each flight mode (NAVIGATION_STATE_*) if arming is possible
	CanRunModeFlags         uint64 `yaml:"can_run_mode_flags"`      // bitfield for each flight mode if it can run
	HealthIsPresentFlags    uint64 `yaml:"health_is_present_flags"` // flags for each health_component_t
	HealthWarningFlags      uint64 `yaml:"health_warning_flags"`
	HealthErrorFlags        uint64 `yaml:"health_error_flags"`
	ArmingCheckWarningFlags uint64 `yaml:"arming_check_warning_flags"`
	ArmingCheckErrorFlags   uint64 `yaml:"arming_check_error_flags"`
}

// NewHealthReport creates a new HealthReport with default values.
func NewHealthReport() *HealthReport {
	self := HealthReport{}
	self.SetDefaults()
	return &self
}

func (t *HealthReport) Clone() *HealthReport {
	c := &HealthReport{}
	c.Timestamp = t.Timestamp
	c.CanArmModeFlags = t.CanArmModeFlags
	c.CanRunModeFlags = t.CanRunModeFlags
	c.HealthIsPresentFlags = t.HealthIsPresentFlags
	c.HealthWarningFlags = t.HealthWarningFlags
	c.HealthErrorFlags = t.HealthErrorFlags
	c.ArmingCheckWarningFlags = t.ArmingCheckWarningFlags
	c.ArmingCheckErrorFlags = t.ArmingCheckErrorFlags
	return c
}

func (t *HealthReport) CloneMsg() types.Message {
	return t.Clone()
}

func (t *HealthReport) SetDefaults() {
	t.Timestamp = 0
	t.CanArmModeFlags = 0
	t.CanRunModeFlags = 0
	t.HealthIsPresentFlags = 0
	t.HealthWarningFlags = 0
	t.HealthErrorFlags = 0
	t.ArmingCheckWarningFlags = 0
	t.ArmingCheckErrorFlags = 0
}

func (t *HealthReport) GetTypeSupport() types.MessageTypeSupport {
	return HealthReportTypeSupport
}

// HealthReportPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type HealthReportPublisher struct {
	*rclgo.Publisher
}

// NewHealthReportPublisher creates and returns a new publisher for the
// HealthReport
func NewHealthReportPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*HealthReportPublisher, error) {
	pub, err := node.NewPublisher(topic_name, HealthReportTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &HealthReportPublisher{pub}, nil
}

func (p *HealthReportPublisher) Publish(msg *HealthReport) error {
	return p.Publisher.Publish(msg)
}

// HealthReportSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type HealthReportSubscription struct {
	*rclgo.Subscription
}

// HealthReportSubscriptionCallback type is used to provide a subscription
// handler function for a HealthReportSubscription.
type HealthReportSubscriptionCallback func(msg *HealthReport, info *rclgo.MessageInfo, err error)

// NewHealthReportSubscription creates and returns a new subscription for the
// HealthReport
func NewHealthReportSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback HealthReportSubscriptionCallback) (*HealthReportSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg HealthReport
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, HealthReportTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &HealthReportSubscription{sub}, nil
}

func (s *HealthReportSubscription) TakeMessage(out *HealthReport) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneHealthReportSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneHealthReportSlice(dst, src []HealthReport) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var HealthReportTypeSupport types.MessageTypeSupport = _HealthReportTypeSupport{}

type _HealthReportTypeSupport struct{}

func (t _HealthReportTypeSupport) New() types.Message {
	return NewHealthReport()
}

func (t _HealthReportTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__HealthReport
	return (unsafe.Pointer)(C.px4_msgs__msg__HealthReport__create())
}

func (t _HealthReportTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__HealthReport__destroy((*C.px4_msgs__msg__HealthReport)(pointer_to_free))
}

func (t _HealthReportTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*HealthReport)
	mem := (*C.px4_msgs__msg__HealthReport)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.can_arm_mode_flags = C.uint64_t(m.CanArmModeFlags)
	mem.can_run_mode_flags = C.uint64_t(m.CanRunModeFlags)
	mem.health_is_present_flags = C.uint64_t(m.HealthIsPresentFlags)
	mem.health_warning_flags = C.uint64_t(m.HealthWarningFlags)
	mem.health_error_flags = C.uint64_t(m.HealthErrorFlags)
	mem.arming_check_warning_flags = C.uint64_t(m.ArmingCheckWarningFlags)
	mem.arming_check_error_flags = C.uint64_t(m.ArmingCheckErrorFlags)
}

func (t _HealthReportTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*HealthReport)
	mem := (*C.px4_msgs__msg__HealthReport)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.CanArmModeFlags = uint64(mem.can_arm_mode_flags)
	m.CanRunModeFlags = uint64(mem.can_run_mode_flags)
	m.HealthIsPresentFlags = uint64(mem.health_is_present_flags)
	m.HealthWarningFlags = uint64(mem.health_warning_flags)
	m.HealthErrorFlags = uint64(mem.health_error_flags)
	m.ArmingCheckWarningFlags = uint64(mem.arming_check_warning_flags)
	m.ArmingCheckErrorFlags = uint64(mem.arming_check_error_flags)
}

func (t _HealthReportTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__HealthReport())
}

type CHealthReport = C.px4_msgs__msg__HealthReport
type CHealthReport__Sequence = C.px4_msgs__msg__HealthReport__Sequence

func HealthReport__Sequence_to_Go(goSlice *[]HealthReport, cSlice CHealthReport__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]HealthReport, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		HealthReportTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func HealthReport__Sequence_to_C(cSlice *CHealthReport__Sequence, goSlice []HealthReport) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__HealthReport)(C.malloc(C.sizeof_struct_px4_msgs__msg__HealthReport * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		HealthReportTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func HealthReport__Array_to_Go(goSlice []HealthReport, cSlice []CHealthReport) {
	for i := 0; i < len(cSlice); i++ {
		HealthReportTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func HealthReport__Array_to_C(cSlice []CHealthReport, goSlice []HealthReport) {
	for i := 0; i < len(goSlice); i++ {
		HealthReportTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
