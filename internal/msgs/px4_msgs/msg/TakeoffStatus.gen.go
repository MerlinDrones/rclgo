// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/takeoff_status.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TakeoffStatus", TakeoffStatusTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/TakeoffStatus", TakeoffStatusTypeSupport)
}

const (
	TakeoffStatus_TAKEOFF_STATE_UNINITIALIZED     uint8 = 0
	TakeoffStatus_TAKEOFF_STATE_DISARMED          uint8 = 1
	TakeoffStatus_TAKEOFF_STATE_SPOOLUP           uint8 = 2
	TakeoffStatus_TAKEOFF_STATE_READY_FOR_TAKEOFF uint8 = 3
	TakeoffStatus_TAKEOFF_STATE_RAMPUP            uint8 = 4
	TakeoffStatus_TAKEOFF_STATE_FLIGHT            uint8 = 5
)

type TakeoffStatus struct {
	Timestamp    uint64  `yaml:"timestamp"` // time since system start (microseconds)
	TakeoffState uint8   `yaml:"takeoff_state"`
	TiltLimit    float32 `yaml:"tilt_limit"` // limited tilt feasibility during takeoff, contains maximum tilt otherwise
}

// NewTakeoffStatus creates a new TakeoffStatus with default values.
func NewTakeoffStatus() *TakeoffStatus {
	self := TakeoffStatus{}
	self.SetDefaults()
	return &self
}

func (t *TakeoffStatus) Clone() *TakeoffStatus {
	c := &TakeoffStatus{}
	c.Timestamp = t.Timestamp
	c.TakeoffState = t.TakeoffState
	c.TiltLimit = t.TiltLimit
	return c
}

func (t *TakeoffStatus) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TakeoffStatus) SetDefaults() {
	t.Timestamp = 0
	t.TakeoffState = 0
	t.TiltLimit = 0
}

func (t *TakeoffStatus) GetTypeSupport() types.MessageTypeSupport {
	return TakeoffStatusTypeSupport
}

// TakeoffStatusPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TakeoffStatusPublisher struct {
	*rclgo.Publisher
}

// NewTakeoffStatusPublisher creates and returns a new publisher for the
// TakeoffStatus
func NewTakeoffStatusPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TakeoffStatusPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TakeoffStatusTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TakeoffStatusPublisher{pub}, nil
}

func (p *TakeoffStatusPublisher) Publish(msg *TakeoffStatus) error {
	return p.Publisher.Publish(msg)
}

// TakeoffStatusSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TakeoffStatusSubscription struct {
	*rclgo.Subscription
}

// TakeoffStatusSubscriptionCallback type is used to provide a subscription
// handler function for a TakeoffStatusSubscription.
type TakeoffStatusSubscriptionCallback func(msg *TakeoffStatus, info *rclgo.MessageInfo, err error)

// NewTakeoffStatusSubscription creates and returns a new subscription for the
// TakeoffStatus
func NewTakeoffStatusSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TakeoffStatusSubscriptionCallback) (*TakeoffStatusSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TakeoffStatus
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TakeoffStatusTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TakeoffStatusSubscription{sub}, nil
}

func (s *TakeoffStatusSubscription) TakeMessage(out *TakeoffStatus) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTakeoffStatusSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTakeoffStatusSlice(dst, src []TakeoffStatus) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TakeoffStatusTypeSupport types.MessageTypeSupport = _TakeoffStatusTypeSupport{}

type _TakeoffStatusTypeSupport struct{}

func (t _TakeoffStatusTypeSupport) New() types.Message {
	return NewTakeoffStatus()
}

func (t _TakeoffStatusTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TakeoffStatus
	return (unsafe.Pointer)(C.px4_msgs__msg__TakeoffStatus__create())
}

func (t _TakeoffStatusTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TakeoffStatus__destroy((*C.px4_msgs__msg__TakeoffStatus)(pointer_to_free))
}

func (t _TakeoffStatusTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TakeoffStatus)
	mem := (*C.px4_msgs__msg__TakeoffStatus)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.takeoff_state = C.uint8_t(m.TakeoffState)
	mem.tilt_limit = C.float(m.TiltLimit)
}

func (t _TakeoffStatusTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TakeoffStatus)
	mem := (*C.px4_msgs__msg__TakeoffStatus)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.TakeoffState = uint8(mem.takeoff_state)
	m.TiltLimit = float32(mem.tilt_limit)
}

func (t _TakeoffStatusTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TakeoffStatus())
}

type CTakeoffStatus = C.px4_msgs__msg__TakeoffStatus
type CTakeoffStatus__Sequence = C.px4_msgs__msg__TakeoffStatus__Sequence

func TakeoffStatus__Sequence_to_Go(goSlice *[]TakeoffStatus, cSlice CTakeoffStatus__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TakeoffStatus, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TakeoffStatusTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TakeoffStatus__Sequence_to_C(cSlice *CTakeoffStatus__Sequence, goSlice []TakeoffStatus) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TakeoffStatus)(C.malloc(C.sizeof_struct_px4_msgs__msg__TakeoffStatus * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TakeoffStatusTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TakeoffStatus__Array_to_Go(goSlice []TakeoffStatus, cSlice []CTakeoffStatus) {
	for i := 0; i < len(cSlice); i++ {
		TakeoffStatusTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TakeoffStatus__Array_to_C(cSlice []CTakeoffStatus, goSlice []TakeoffStatus) {
	for i := 0; i < len(goSlice); i++ {
		TakeoffStatusTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
