// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/trajectory_bezier.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/TrajectoryBezier", TrajectoryBezierTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/TrajectoryBezier", TrajectoryBezierTypeSupport)
}

type TrajectoryBezier struct {
	Timestamp uint64     `yaml:"timestamp"` // time since system start (microseconds)
	Position  [3]float32 `yaml:"position"`  // local position x,y,z (metres)
	Yaw       float32    `yaml:"yaw"`       // yaw angle (rad)
	Delta     float32    `yaml:"delta"`     // time it should take to get to this waypoint, if this is the final waypoint (seconds)
}

// NewTrajectoryBezier creates a new TrajectoryBezier with default values.
func NewTrajectoryBezier() *TrajectoryBezier {
	self := TrajectoryBezier{}
	self.SetDefaults()
	return &self
}

func (t *TrajectoryBezier) Clone() *TrajectoryBezier {
	c := &TrajectoryBezier{}
	c.Timestamp = t.Timestamp
	c.Position = t.Position
	c.Yaw = t.Yaw
	c.Delta = t.Delta
	return c
}

func (t *TrajectoryBezier) CloneMsg() types.Message {
	return t.Clone()
}

func (t *TrajectoryBezier) SetDefaults() {
	t.Timestamp = 0
	t.Position = [3]float32{}
	t.Yaw = 0
	t.Delta = 0
}

func (t *TrajectoryBezier) GetTypeSupport() types.MessageTypeSupport {
	return TrajectoryBezierTypeSupport
}

// TrajectoryBezierPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type TrajectoryBezierPublisher struct {
	*rclgo.Publisher
}

// NewTrajectoryBezierPublisher creates and returns a new publisher for the
// TrajectoryBezier
func NewTrajectoryBezierPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*TrajectoryBezierPublisher, error) {
	pub, err := node.NewPublisher(topic_name, TrajectoryBezierTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &TrajectoryBezierPublisher{pub}, nil
}

func (p *TrajectoryBezierPublisher) Publish(msg *TrajectoryBezier) error {
	return p.Publisher.Publish(msg)
}

// TrajectoryBezierSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type TrajectoryBezierSubscription struct {
	*rclgo.Subscription
}

// TrajectoryBezierSubscriptionCallback type is used to provide a subscription
// handler function for a TrajectoryBezierSubscription.
type TrajectoryBezierSubscriptionCallback func(msg *TrajectoryBezier, info *rclgo.MessageInfo, err error)

// NewTrajectoryBezierSubscription creates and returns a new subscription for the
// TrajectoryBezier
func NewTrajectoryBezierSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback TrajectoryBezierSubscriptionCallback) (*TrajectoryBezierSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg TrajectoryBezier
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, TrajectoryBezierTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &TrajectoryBezierSubscription{sub}, nil
}

func (s *TrajectoryBezierSubscription) TakeMessage(out *TrajectoryBezier) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneTrajectoryBezierSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneTrajectoryBezierSlice(dst, src []TrajectoryBezier) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var TrajectoryBezierTypeSupport types.MessageTypeSupport = _TrajectoryBezierTypeSupport{}

type _TrajectoryBezierTypeSupport struct{}

func (t _TrajectoryBezierTypeSupport) New() types.Message {
	return NewTrajectoryBezier()
}

func (t _TrajectoryBezierTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__TrajectoryBezier
	return (unsafe.Pointer)(C.px4_msgs__msg__TrajectoryBezier__create())
}

func (t _TrajectoryBezierTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__TrajectoryBezier__destroy((*C.px4_msgs__msg__TrajectoryBezier)(pointer_to_free))
}

func (t _TrajectoryBezierTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*TrajectoryBezier)
	mem := (*C.px4_msgs__msg__TrajectoryBezier)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_C(*(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)), m.Position[:])
	mem.yaw = C.float(m.Yaw)
	mem.delta = C.float(m.Delta)
}

func (t _TrajectoryBezierTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*TrajectoryBezier)
	mem := (*C.px4_msgs__msg__TrajectoryBezier)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	cSlice_position := mem.position[:]
	primitives.Float32__Array_to_Go(m.Position[:], *(*[]primitives.CFloat32)(unsafe.Pointer(&cSlice_position)))
	m.Yaw = float32(mem.yaw)
	m.Delta = float32(mem.delta)
}

func (t _TrajectoryBezierTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__TrajectoryBezier())
}

type CTrajectoryBezier = C.px4_msgs__msg__TrajectoryBezier
type CTrajectoryBezier__Sequence = C.px4_msgs__msg__TrajectoryBezier__Sequence

func TrajectoryBezier__Sequence_to_Go(goSlice *[]TrajectoryBezier, cSlice CTrajectoryBezier__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]TrajectoryBezier, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		TrajectoryBezierTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func TrajectoryBezier__Sequence_to_C(cSlice *CTrajectoryBezier__Sequence, goSlice []TrajectoryBezier) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__TrajectoryBezier)(C.malloc(C.sizeof_struct_px4_msgs__msg__TrajectoryBezier * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		TrajectoryBezierTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func TrajectoryBezier__Array_to_Go(goSlice []TrajectoryBezier, cSlice []CTrajectoryBezier) {
	for i := 0; i < len(cSlice); i++ {
		TrajectoryBezierTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func TrajectoryBezier__Array_to_C(cSlice []CTrajectoryBezier, goSlice []TrajectoryBezier) {
	for i := 0; i < len(goSlice); i++ {
		TrajectoryBezierTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
