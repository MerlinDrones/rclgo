// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	primitives "github.com/merlindrones/rclgo/pkg/rclgo/primitives"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/event.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/Event", EventTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/Event", EventTypeSupport)
}

const (
	Event_ORB_QUEUE_LENGTH uint8 = 16
)

type Event struct {
	Timestamp     uint64    `yaml:"timestamp"`      // time since system start (microseconds). Events interface
	Id            uint32    `yaml:"id"`             // Event ID
	EventSequence uint16    `yaml:"event_sequence"` // Event sequence number
	Arguments     [25]uint8 `yaml:"arguments"`      // (optional) arguments, depend on event id
	LogLevels     uint8     `yaml:"log_levels"`     // Log levels: 4 bits MSB: internal, 4 bits LSB: external
}

// NewEvent creates a new Event with default values.
func NewEvent() *Event {
	self := Event{}
	self.SetDefaults()
	return &self
}

func (t *Event) Clone() *Event {
	c := &Event{}
	c.Timestamp = t.Timestamp
	c.Id = t.Id
	c.EventSequence = t.EventSequence
	c.Arguments = t.Arguments
	c.LogLevels = t.LogLevels
	return c
}

func (t *Event) CloneMsg() types.Message {
	return t.Clone()
}

func (t *Event) SetDefaults() {
	t.Timestamp = 0
	t.Id = 0
	t.EventSequence = 0
	t.Arguments = [25]uint8{}
	t.LogLevels = 0
}

func (t *Event) GetTypeSupport() types.MessageTypeSupport {
	return EventTypeSupport
}

// EventPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type EventPublisher struct {
	*rclgo.Publisher
}

// NewEventPublisher creates and returns a new publisher for the
// Event
func NewEventPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*EventPublisher, error) {
	pub, err := node.NewPublisher(topic_name, EventTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &EventPublisher{pub}, nil
}

func (p *EventPublisher) Publish(msg *Event) error {
	return p.Publisher.Publish(msg)
}

// EventSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type EventSubscription struct {
	*rclgo.Subscription
}

// EventSubscriptionCallback type is used to provide a subscription
// handler function for a EventSubscription.
type EventSubscriptionCallback func(msg *Event, info *rclgo.MessageInfo, err error)

// NewEventSubscription creates and returns a new subscription for the
// Event
func NewEventSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback EventSubscriptionCallback) (*EventSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg Event
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, EventTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &EventSubscription{sub}, nil
}

func (s *EventSubscription) TakeMessage(out *Event) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneEventSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneEventSlice(dst, src []Event) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var EventTypeSupport types.MessageTypeSupport = _EventTypeSupport{}

type _EventTypeSupport struct{}

func (t _EventTypeSupport) New() types.Message {
	return NewEvent()
}

func (t _EventTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__Event
	return (unsafe.Pointer)(C.px4_msgs__msg__Event__create())
}

func (t _EventTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__Event__destroy((*C.px4_msgs__msg__Event)(pointer_to_free))
}

func (t _EventTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*Event)
	mem := (*C.px4_msgs__msg__Event)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.id = C.uint32_t(m.Id)
	mem.event_sequence = C.uint16_t(m.EventSequence)
	cSlice_arguments := mem.arguments[:]
	primitives.Uint8__Array_to_C(*(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_arguments)), m.Arguments[:])
	mem.log_levels = C.uint8_t(m.LogLevels)
}

func (t _EventTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*Event)
	mem := (*C.px4_msgs__msg__Event)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.Id = uint32(mem.id)
	m.EventSequence = uint16(mem.event_sequence)
	cSlice_arguments := mem.arguments[:]
	primitives.Uint8__Array_to_Go(m.Arguments[:], *(*[]primitives.CUint8)(unsafe.Pointer(&cSlice_arguments)))
	m.LogLevels = uint8(mem.log_levels)
}

func (t _EventTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__Event())
}

type CEvent = C.px4_msgs__msg__Event
type CEvent__Sequence = C.px4_msgs__msg__Event__Sequence

func Event__Sequence_to_Go(goSlice *[]Event, cSlice CEvent__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]Event, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		EventTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func Event__Sequence_to_C(cSlice *CEvent__Sequence, goSlice []Event) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__Event)(C.malloc(C.sizeof_struct_px4_msgs__msg__Event * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		EventTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func Event__Array_to_Go(goSlice []Event, cSlice []CEvent) {
	for i := 0; i < len(cSlice); i++ {
		EventTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func Event__Array_to_C(cSlice []CEvent, goSlice []Event) {
	for i := 0; i < len(goSlice); i++ {
		EventTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
