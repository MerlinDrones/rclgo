// Code generated by rclgo-gen. DO NOT EDIT.

package px4_msgs_msg

import (
	"unsafe"

	"github.com/merlindrones/rclgo/pkg/rclgo"
	"github.com/merlindrones/rclgo/pkg/rclgo/typemap"
	"github.com/merlindrones/rclgo/pkg/rclgo/types"
)

/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <px4_msgs/msg/landing_gear.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("px4_msgs/LandingGear", LandingGearTypeSupport)
	typemap.RegisterMessage("px4_msgs/msg/LandingGear", LandingGearTypeSupport)
}

const (
	LandingGear_GEAR_UP   int8 = 1  // landing gear up
	LandingGear_GEAR_DOWN int8 = -1 // landing gear down
	LandingGear_GEAR_KEEP int8 = 0  // keep the current state
)

type LandingGear struct {
	Timestamp   uint64 `yaml:"timestamp"` // time since system start (microseconds)
	LandingGear int8   `yaml:"landing_gear"`
}

// NewLandingGear creates a new LandingGear with default values.
func NewLandingGear() *LandingGear {
	self := LandingGear{}
	self.SetDefaults()
	return &self
}

func (t *LandingGear) Clone() *LandingGear {
	c := &LandingGear{}
	c.Timestamp = t.Timestamp
	c.LandingGear = t.LandingGear
	return c
}

func (t *LandingGear) CloneMsg() types.Message {
	return t.Clone()
}

func (t *LandingGear) SetDefaults() {
	t.Timestamp = 0
	t.LandingGear = 0
}

func (t *LandingGear) GetTypeSupport() types.MessageTypeSupport {
	return LandingGearTypeSupport
}

// LandingGearPublisher wraps rclgo.Publisher to provide type safe helper
// functions
type LandingGearPublisher struct {
	*rclgo.Publisher
}

// NewLandingGearPublisher creates and returns a new publisher for the
// LandingGear
func NewLandingGearPublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*LandingGearPublisher, error) {
	pub, err := node.NewPublisher(topic_name, LandingGearTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &LandingGearPublisher{pub}, nil
}

func (p *LandingGearPublisher) Publish(msg *LandingGear) error {
	return p.Publisher.Publish(msg)
}

// LandingGearSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type LandingGearSubscription struct {
	*rclgo.Subscription
}

// LandingGearSubscriptionCallback type is used to provide a subscription
// handler function for a LandingGearSubscription.
type LandingGearSubscriptionCallback func(msg *LandingGear, info *rclgo.MessageInfo, err error)

// NewLandingGearSubscription creates and returns a new subscription for the
// LandingGear
func NewLandingGearSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback LandingGearSubscriptionCallback) (*LandingGearSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg LandingGear
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, LandingGearTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &LandingGearSubscription{sub}, nil
}

func (s *LandingGearSubscription) TakeMessage(out *LandingGear) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneLandingGearSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneLandingGearSlice(dst, src []LandingGear) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var LandingGearTypeSupport types.MessageTypeSupport = _LandingGearTypeSupport{}

type _LandingGearTypeSupport struct{}

func (t _LandingGearTypeSupport) New() types.Message {
	return NewLandingGear()
}

func (t _LandingGearTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.px4_msgs__msg__LandingGear
	return (unsafe.Pointer)(C.px4_msgs__msg__LandingGear__create())
}

func (t _LandingGearTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.px4_msgs__msg__LandingGear__destroy((*C.px4_msgs__msg__LandingGear)(pointer_to_free))
}

func (t _LandingGearTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*LandingGear)
	mem := (*C.px4_msgs__msg__LandingGear)(dst)
	mem.timestamp = C.uint64_t(m.Timestamp)
	mem.landing_gear = C.int8_t(m.LandingGear)
}

func (t _LandingGearTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*LandingGear)
	mem := (*C.px4_msgs__msg__LandingGear)(ros2_message_buffer)
	m.Timestamp = uint64(mem.timestamp)
	m.LandingGear = int8(mem.landing_gear)
}

func (t _LandingGearTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__px4_msgs__msg__LandingGear())
}

type CLandingGear = C.px4_msgs__msg__LandingGear
type CLandingGear__Sequence = C.px4_msgs__msg__LandingGear__Sequence

func LandingGear__Sequence_to_Go(goSlice *[]LandingGear, cSlice CLandingGear__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]LandingGear, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		LandingGearTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func LandingGear__Sequence_to_C(cSlice *CLandingGear__Sequence, goSlice []LandingGear) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.px4_msgs__msg__LandingGear)(C.malloc(C.sizeof_struct_px4_msgs__msg__LandingGear * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		LandingGearTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func LandingGear__Array_to_Go(goSlice []LandingGear, cSlice []CLandingGear) {
	for i := 0; i < len(cSlice); i++ {
		LandingGearTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func LandingGear__Array_to_C(cSlice []CLandingGear, goSlice []LandingGear) {
	for i := 0; i < len(goSlice); i++ {
		LandingGearTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
